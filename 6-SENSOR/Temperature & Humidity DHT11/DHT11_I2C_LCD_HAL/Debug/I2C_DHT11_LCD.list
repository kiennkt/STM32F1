
I2C_DHT11_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d6c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08005e80  08005e80  00015e80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800624c  0800624c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000000  0800624c  0800624c  000201d4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800624c  0800624c  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800624c  0800624c  0001624c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006250  08006250  00016250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08006254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  200001d4  08006428  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08006428  000203f4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201fd  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b11e  00000000  00000000  00020240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c3a  00000000  00000000  0002b35e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  0002cf98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3c  00000000  00000000  0002dcb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018676  00000000  00000000  0002e6f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ee3b  00000000  00000000  00046d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c0d7  00000000  00000000  00055ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000487c  00000000  00000000  000e1c7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000e64f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08005e64 	.word	0x08005e64

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08005e64 	.word	0x08005e64

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af02      	add	r7, sp, #8
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000a92:	79fb      	ldrb	r3, [r7, #7]
 8000a94:	f023 030f 	bic.w	r3, r3, #15
 8000a98:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	011b      	lsls	r3, r3, #4
 8000a9e:	73bb      	strb	r3, [r7, #14]
							  // (p3 = 1(blacklight auto 1), p2 = 1(Enable), p1 = 0(write), p0 = 0(RS = 0: ghi lệnh))
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000aa0:	7bfb      	ldrb	r3, [r7, #15]
 8000aa2:	f043 030c 	orr.w	r3, r3, #12
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
 8000aac:	f043 0308 	orr.w	r3, r3, #8
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000ab4:	7bbb      	ldrb	r3, [r7, #14]
 8000ab6:	f043 030c 	orr.w	r3, r3, #12
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	f043 0308 	orr.w	r3, r3, #8
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000ac8:	f107 0208 	add.w	r2, r7, #8
 8000acc:	2364      	movs	r3, #100	; 0x64
 8000ace:	9300      	str	r3, [sp, #0]
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	214e      	movs	r1, #78	; 0x4e
 8000ad4:	4803      	ldr	r0, [pc, #12]	; (8000ae4 <lcd_send_cmd+0x5c>)
 8000ad6:	f001 f939 	bl	8001d4c <HAL_I2C_Master_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3710      	adds	r7, #16
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	200001f0 	.word	0x200001f0

08000ae8 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b086      	sub	sp, #24
 8000aec:	af02      	add	r7, sp, #8
 8000aee:	4603      	mov	r3, r0
 8000af0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000af2:	79fb      	ldrb	r3, [r7, #7]
 8000af4:	f023 030f 	bic.w	r3, r3, #15
 8000af8:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000afa:	79fb      	ldrb	r3, [r7, #7]
 8000afc:	011b      	lsls	r3, r3, #4
 8000afe:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 8000b00:	7bfb      	ldrb	r3, [r7, #15]
 8000b02:	f043 030d 	orr.w	r3, r3, #13
 8000b06:	b2db      	uxtb	r3, r3
 8000b08:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
 8000b0c:	f043 0309 	orr.w	r3, r3, #9
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8000b14:	7bbb      	ldrb	r3, [r7, #14]
 8000b16:	f043 030d 	orr.w	r3, r3, #13
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 8000b1e:	7bbb      	ldrb	r3, [r7, #14]
 8000b20:	f043 0309 	orr.w	r3, r3, #9
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000b28:	f107 0208 	add.w	r2, r7, #8
 8000b2c:	2364      	movs	r3, #100	; 0x64
 8000b2e:	9300      	str	r3, [sp, #0]
 8000b30:	2304      	movs	r3, #4
 8000b32:	214e      	movs	r1, #78	; 0x4e
 8000b34:	4803      	ldr	r0, [pc, #12]	; (8000b44 <lcd_send_data+0x5c>)
 8000b36:	f001 f909 	bl	8001d4c <HAL_I2C_Master_Transmit>
}
 8000b3a:	bf00      	nop
 8000b3c:	3710      	adds	r7, #16
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200001f0 	.word	0x200001f0

08000b48 <lcd_clear>:

void lcd_clear (void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000b4e:	2080      	movs	r0, #128	; 0x80
 8000b50:	f7ff ff9a 	bl	8000a88 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	e005      	b.n	8000b66 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000b5a:	2020      	movs	r0, #32
 8000b5c:	f7ff ffc4 	bl	8000ae8 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	3301      	adds	r3, #1
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	2b45      	cmp	r3, #69	; 0x45
 8000b6a:	ddf6      	ble.n	8000b5a <lcd_clear+0x12>
	}
}
 8000b6c:	bf00      	nop
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
    switch (row)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d003      	beq.n	8000b8e <lcd_put_cur+0x18>
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d005      	beq.n	8000b98 <lcd_put_cur+0x22>
 8000b8c:	e009      	b.n	8000ba2 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b94:	603b      	str	r3, [r7, #0]
            break;
 8000b96:	e004      	b.n	8000ba2 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000b9e:	603b      	str	r3, [r7, #0]
            break;
 8000ba0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ff6e 	bl	8000a88 <lcd_send_cmd>
}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <lcd_init>:

void lcd_init (void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000bb8:	2032      	movs	r0, #50	; 0x32
 8000bba:	f000 fcc7 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bbe:	2030      	movs	r0, #48	; 0x30
 8000bc0:	f7ff ff62 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f000 fcc1 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bca:	2030      	movs	r0, #48	; 0x30
 8000bcc:	f7ff ff5c 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	f000 fcbb 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x30);
 8000bd6:	2030      	movs	r0, #48	; 0x30
 8000bd8:	f7ff ff56 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(10);
 8000bdc:	200a      	movs	r0, #10
 8000bde:	f000 fcb5 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000be2:	2020      	movs	r0, #32
 8000be4:	f7ff ff50 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(10);
 8000be8:	200a      	movs	r0, #10
 8000bea:	f000 fcaf 	bl	800154c <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000bee:	2028      	movs	r0, #40	; 0x28
 8000bf0:	f7ff ff4a 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000bf4:	2001      	movs	r0, #1
 8000bf6:	f000 fca9 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000bfa:	2008      	movs	r0, #8
 8000bfc:	f7ff ff44 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000c00:	2001      	movs	r0, #1
 8000c02:	f000 fca3 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000c06:	2001      	movs	r0, #1
 8000c08:	f7ff ff3e 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000c0c:	2001      	movs	r0, #1
 8000c0e:	f000 fc9d 	bl	800154c <HAL_Delay>
	HAL_Delay(1);
 8000c12:	2001      	movs	r0, #1
 8000c14:	f000 fc9a 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000c18:	2006      	movs	r0, #6
 8000c1a:	f7ff ff35 	bl	8000a88 <lcd_send_cmd>
	HAL_Delay(1);
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f000 fc94 	bl	800154c <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000c24:	200c      	movs	r0, #12
 8000c26:	f7ff ff2f 	bl	8000a88 <lcd_send_cmd>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000c36:	e006      	b.n	8000c46 <lcd_send_string+0x18>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	1c5a      	adds	r2, r3, #1
 8000c3c:	607a      	str	r2, [r7, #4]
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4618      	mov	r0, r3
 8000c42:	f7ff ff51 	bl	8000ae8 <lcd_send_data>
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d1f4      	bne.n	8000c38 <lcd_send_string+0xa>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <delay>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delay(unsigned int time){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(&htim2);
 8000c60:	480a      	ldr	r0, [pc, #40]	; (8000c8c <delay+0x34>)
 8000c62:	f002 f817 	bl	8002c94 <HAL_TIM_Base_Start>
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <delay+0x34>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	625a      	str	r2, [r3, #36]	; 0x24
	while((__HAL_TIM_GET_COUNTER(&htim2)) < time);
 8000c6e:	bf00      	nop
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <delay+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d8f9      	bhi.n	8000c70 <delay+0x18>
	HAL_TIM_Base_Stop(&htim2);
 8000c7c:	4803      	ldr	r0, [pc, #12]	; (8000c8c <delay+0x34>)
 8000c7e:	f002 f853 	bl	8002d28 <HAL_TIM_Base_Stop>
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000244 	.word	0x20000244

08000c90 <Display_Temp>:

void Display_Temp (int Temp)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b088      	sub	sp, #32
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60fb      	str	r3, [r7, #12]
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	601a      	str	r2, [r3, #0]
 8000ca4:	605a      	str	r2, [r3, #4]
 8000ca6:	609a      	str	r2, [r3, #8]
 8000ca8:	60da      	str	r2, [r3, #12]
	lcd_put_cur(0, 1);
 8000caa:	2101      	movs	r1, #1
 8000cac:	2000      	movs	r0, #0
 8000cae:	f7ff ff62 	bl	8000b76 <lcd_put_cur>

	sprintf (str, "NHIET DO:- %d ", Temp);
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	687a      	ldr	r2, [r7, #4]
 8000cb8:	4907      	ldr	r1, [pc, #28]	; (8000cd8 <Display_Temp+0x48>)
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f002 ff86 	bl	8003bcc <siprintf>
	lcd_send_string(str);
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff ffb2 	bl	8000c2e <lcd_send_string>
	lcd_send_data('C');
 8000cca:	2043      	movs	r0, #67	; 0x43
 8000ccc:	f7ff ff0c 	bl	8000ae8 <lcd_send_data>
}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	08005e80 	.word	0x08005e80

08000cdc <Display_Rh>:

void Display_Rh (int Rh)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
 8000cf2:	609a      	str	r2, [r3, #8]
 8000cf4:	60da      	str	r2, [r3, #12]
	lcd_put_cur(1, 1);
 8000cf6:	2101      	movs	r1, #1
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	f7ff ff3c 	bl	8000b76 <lcd_put_cur>

	sprintf (str, "DO AM:- %d ", Rh);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	4907      	ldr	r1, [pc, #28]	; (8000d24 <Display_Rh+0x48>)
 8000d06:	4618      	mov	r0, r3
 8000d08:	f002 ff60 	bl	8003bcc <siprintf>
	lcd_send_string(str);
 8000d0c:	f107 030c 	add.w	r3, r7, #12
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff8c 	bl	8000c2e <lcd_send_string>
	lcd_send_data('%');
 8000d16:	2025      	movs	r0, #37	; 0x25
 8000d18:	f7ff fee6 	bl	8000ae8 <lcd_send_data>
}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	08005e90 	.word	0x08005e90

08000d28 <DHT11_Start>:
#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_0
/* USER CODE END 0 */

void DHT11_Start (void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
//	delay(1000);
//	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4808      	ldr	r0, [pc, #32]	; (8000d54 <DHT11_Start+0x2c>)
 8000d32:	f000 feae 	bl	8001a92 <HAL_GPIO_WritePin>
	delay (20000);  // wait for 18ms
 8000d36:	f644 6020 	movw	r0, #20000	; 0x4e20
 8000d3a:	f7ff ff8d 	bl	8000c58 <delay>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2101      	movs	r1, #1
 8000d42:	4804      	ldr	r0, [pc, #16]	; (8000d54 <DHT11_Start+0x2c>)
 8000d44:	f000 fea5 	bl	8001a92 <HAL_GPIO_WritePin>
	delay (45);   // wait for 40us, đợi DHT11 respone
 8000d48:	202d      	movs	r0, #45	; 0x2d
 8000d4a:	f7ff ff85 	bl	8000c58 <delay>
//	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40010800 	.word	0x40010800

08000d58 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b082      	sub	sp, #8
 8000d5c:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	71fb      	strb	r3, [r7, #7]
//	delay (40);
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 8000d62:	2101      	movs	r1, #1
 8000d64:	4810      	ldr	r0, [pc, #64]	; (8000da8 <DHT11_Check_Response+0x50>)
 8000d66:	f000 fe7d 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d10e      	bne.n	8000d8e <DHT11_Check_Response+0x36>
	{
		delay (80);
 8000d70:	2050      	movs	r0, #80	; 0x50
 8000d72:	f7ff ff71 	bl	8000c58 <delay>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1; // đã sẵn dàng gửi data
 8000d76:	2101      	movs	r1, #1
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <DHT11_Check_Response+0x50>)
 8000d7a:	f000 fe73 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <DHT11_Check_Response+0x32>
 8000d84:	2301      	movs	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e001      	b.n	8000d8e <DHT11_Check_Response+0x36>
		else Response = -1; // 255, chưa sẵn sàng để gửi data
 8000d8a:	23ff      	movs	r3, #255	; 0xff
 8000d8c:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8000d8e:	bf00      	nop
 8000d90:	2101      	movs	r1, #1
 8000d92:	4805      	ldr	r0, [pc, #20]	; (8000da8 <DHT11_Check_Response+0x50>)
 8000d94:	f000 fe66 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d1f8      	bne.n	8000d90 <DHT11_Check_Response+0x38>

	return Response;
 8000d9e:	79fb      	ldrb	r3, [r7, #7]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3708      	adds	r7, #8
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	40010800 	.word	0x40010800

08000dac <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 8000db2:	2300      	movs	r3, #0
 8000db4:	71bb      	strb	r3, [r7, #6]
 8000db6:	e037      	b.n	8000e28 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8000db8:	bf00      	nop
 8000dba:	2101      	movs	r1, #1
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <DHT11_Read+0x8c>)
 8000dbe:	f000 fe51 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d0f8      	beq.n	8000dba <DHT11_Read+0xe>
		delay (40);   // wait for 40 us
 8000dc8:	2028      	movs	r0, #40	; 0x28
 8000dca:	f7ff ff45 	bl	8000c58 <delay>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8000dce:	2101      	movs	r1, #1
 8000dd0:	4819      	ldr	r0, [pc, #100]	; (8000e38 <DHT11_Read+0x8c>)
 8000dd2:	f000 fe47 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10e      	bne.n	8000dfa <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0, giữ các bit trước không bị thay đổi
 8000ddc:	79bb      	ldrb	r3, [r7, #6]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2201      	movs	r2, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	b25b      	sxtb	r3, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	b25a      	sxtb	r2, r3
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	4013      	ands	r3, r2
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	71fb      	strb	r3, [r7, #7]
 8000df8:	e00b      	b.n	8000e12 <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8000dfa:	79bb      	ldrb	r3, [r7, #6]
 8000dfc:	f1c3 0307 	rsb	r3, r3, #7
 8000e00:	2201      	movs	r2, #1
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	b25a      	sxtb	r2, r3
 8000e08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	b25b      	sxtb	r3, r3
 8000e10:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 8000e12:	bf00      	nop
 8000e14:	2101      	movs	r1, #1
 8000e16:	4808      	ldr	r0, [pc, #32]	; (8000e38 <DHT11_Read+0x8c>)
 8000e18:	f000 fe24 	bl	8001a64 <HAL_GPIO_ReadPin>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f8      	bne.n	8000e14 <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 8000e22:	79bb      	ldrb	r3, [r7, #6]
 8000e24:	3301      	adds	r3, #1
 8000e26:	71bb      	strb	r3, [r7, #6]
 8000e28:	79bb      	ldrb	r3, [r7, #6]
 8000e2a:	2b07      	cmp	r3, #7
 8000e2c:	d9c4      	bls.n	8000db8 <DHT11_Read+0xc>
	}
	return i;
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40010800 	.word	0x40010800

08000e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e40:	f000 fb22 	bl	8001488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e44:	f000 f870 	bl	8000f28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e48:	f000 f92e 	bl	80010a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e4c:	f000 f8b2 	bl	8000fb4 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000e50:	f000 f8de 	bl	8001010 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  lcd_init();
 8000e54:	f7ff feae 	bl	8000bb4 <lcd_init>
  lcd_put_cur(0, 1);
 8000e58:	2101      	movs	r1, #1
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f7ff fe8b 	bl	8000b76 <lcd_put_cur>
  lcd_send_string("KIM TUAN KIEN");
 8000e60:	4827      	ldr	r0, [pc, #156]	; (8000f00 <main+0xc4>)
 8000e62:	f7ff fee4 	bl	8000c2e <lcd_send_string>
  lcd_put_cur(1, 5);
 8000e66:	2105      	movs	r1, #5
 8000e68:	2001      	movs	r0, #1
 8000e6a:	f7ff fe84 	bl	8000b76 <lcd_put_cur>
  lcd_send_string("PTIT");
 8000e6e:	4825      	ldr	r0, [pc, #148]	; (8000f04 <main+0xc8>)
 8000e70:	f7ff fedd 	bl	8000c2e <lcd_send_string>
  HAL_Delay(4000);
 8000e74:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8000e78:	f000 fb68 	bl	800154c <HAL_Delay>
  lcd_clear();
 8000e7c:	f7ff fe64 	bl	8000b48 <lcd_clear>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Display_Temp(Temperature);
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <main+0xcc>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff ff03 	bl	8000c90 <Display_Temp>
	Display_Rh(Humidity);
 8000e8a:	4b20      	ldr	r3, [pc, #128]	; (8000f0c <main+0xd0>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff24 	bl	8000cdc <Display_Rh>

	DHT11_Start();
 8000e94:	f7ff ff48 	bl	8000d28 <DHT11_Start>
	Presence = DHT11_Check_Response(); // co the kiem tra xem DHT11 co response k
 8000e98:	f7ff ff5e 	bl	8000d58 <DHT11_Check_Response>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	; (8000f10 <main+0xd4>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	Rh_byte1 = DHT11_Read ();
 8000ea4:	f7ff ff82 	bl	8000dac <DHT11_Read>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	461a      	mov	r2, r3
 8000eac:	4b19      	ldr	r3, [pc, #100]	; (8000f14 <main+0xd8>)
 8000eae:	701a      	strb	r2, [r3, #0]
	Rh_byte2 = DHT11_Read ();
 8000eb0:	f7ff ff7c 	bl	8000dac <DHT11_Read>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <main+0xdc>)
 8000eba:	701a      	strb	r2, [r3, #0]
	Temp_byte1 = DHT11_Read ();
 8000ebc:	f7ff ff76 	bl	8000dac <DHT11_Read>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	4b15      	ldr	r3, [pc, #84]	; (8000f1c <main+0xe0>)
 8000ec6:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DHT11_Read ();
 8000ec8:	f7ff ff70 	bl	8000dac <DHT11_Read>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	461a      	mov	r2, r3
 8000ed0:	4b13      	ldr	r3, [pc, #76]	; (8000f20 <main+0xe4>)
 8000ed2:	701a      	strb	r2, [r3, #0]
	SUM = DHT11_Read();
 8000ed4:	f7ff ff6a 	bl	8000dac <DHT11_Read>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	b29a      	uxth	r2, r3
 8000edc:	4b11      	ldr	r3, [pc, #68]	; (8000f24 <main+0xe8>)
 8000ede:	801a      	strh	r2, [r3, #0]

	Temperature = Temp_byte1;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <main+0xe0>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <main+0xcc>)
 8000ee8:	601a      	str	r2, [r3, #0]
	Humidity = Rh_byte1;
 8000eea:	4b0a      	ldr	r3, [pc, #40]	; (8000f14 <main+0xd8>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	461a      	mov	r2, r3
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <main+0xd0>)
 8000ef2:	601a      	str	r2, [r3, #0]
    /* USER CODE BEGIN 3 */
	HAL_Delay(3000);
 8000ef4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000ef8:	f000 fb28 	bl	800154c <HAL_Delay>
	Display_Temp(Temperature);
 8000efc:	e7c0      	b.n	8000e80 <main+0x44>
 8000efe:	bf00      	nop
 8000f00:	08005e9c 	.word	0x08005e9c
 8000f04:	08005eac 	.word	0x08005eac
 8000f08:	20000294 	.word	0x20000294
 8000f0c:	20000298 	.word	0x20000298
 8000f10:	2000029c 	.word	0x2000029c
 8000f14:	2000028c 	.word	0x2000028c
 8000f18:	2000028d 	.word	0x2000028d
 8000f1c:	2000028e 	.word	0x2000028e
 8000f20:	2000028f 	.word	0x2000028f
 8000f24:	20000290 	.word	0x20000290

08000f28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b090      	sub	sp, #64	; 0x40
 8000f2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f2e:	f107 0318 	add.w	r3, r7, #24
 8000f32:	2228      	movs	r2, #40	; 0x28
 8000f34:	2100      	movs	r1, #0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 feab 	bl	8003c92 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f3c:	1d3b      	adds	r3, r7, #4
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f6c:	f107 0318 	add.w	r3, r7, #24
 8000f70:	4618      	mov	r0, r3
 8000f72:	f001 fa43 	bl	80023fc <HAL_RCC_OscConfig>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d001      	beq.n	8000f80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f7c:	f000 f8de 	bl	800113c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f80:	230f      	movs	r3, #15
 8000f82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f84:	2302      	movs	r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f92:	2300      	movs	r3, #0
 8000f94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f96:	1d3b      	adds	r3, r7, #4
 8000f98:	2102      	movs	r1, #2
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f001 fcb0 	bl	8002900 <HAL_RCC_ClockConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fa6:	f000 f8c9 	bl	800113c <Error_Handler>
  }
}
 8000faa:	bf00      	nop
 8000fac:	3740      	adds	r7, #64	; 0x40
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
	...

08000fb4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fba:	4a13      	ldr	r2, [pc, #76]	; (8001008 <MX_I2C1_Init+0x54>)
 8000fbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fc0:	4a12      	ldr	r2, [pc, #72]	; (800100c <MX_I2C1_Init+0x58>)
 8000fc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fc4:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000fde:	4b09      	ldr	r3, [pc, #36]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fe4:	4b07      	ldr	r3, [pc, #28]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fea:	4b06      	ldr	r3, [pc, #24]	; (8001004 <MX_I2C1_Init+0x50>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	; (8001004 <MX_I2C1_Init+0x50>)
 8000ff2:	f000 fd67 	bl	8001ac4 <HAL_I2C_Init>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ffc:	f000 f89e 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200001f0 	.word	0x200001f0
 8001008:	40005400 	.word	0x40005400
 800100c:	000186a0 	.word	0x000186a0

08001010 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001016:	f107 0308 	add.w	r3, r7, #8
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
 8001020:	609a      	str	r2, [r3, #8]
 8001022:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	463b      	mov	r3, r7
 8001026:	2200      	movs	r2, #0
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_TIM2_Init+0x94>)
 800102e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001032:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <MX_TIM2_Init+0x94>)
 8001036:	2247      	movs	r2, #71	; 0x47
 8001038:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800103a:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_TIM2_Init+0x94>)
 800103c:	2200      	movs	r2, #0
 800103e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 8001040:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <MX_TIM2_Init+0x94>)
 8001042:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001046:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001048:	4b16      	ldr	r3, [pc, #88]	; (80010a4 <MX_TIM2_Init+0x94>)
 800104a:	2200      	movs	r2, #0
 800104c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_TIM2_Init+0x94>)
 8001050:	2200      	movs	r2, #0
 8001052:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001054:	4813      	ldr	r0, [pc, #76]	; (80010a4 <MX_TIM2_Init+0x94>)
 8001056:	f001 fdcd 	bl	8002bf4 <HAL_TIM_Base_Init>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001060:	f000 f86c 	bl	800113c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001064:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001068:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	4619      	mov	r1, r3
 8001070:	480c      	ldr	r0, [pc, #48]	; (80010a4 <MX_TIM2_Init+0x94>)
 8001072:	f001 fe7f 	bl	8002d74 <HAL_TIM_ConfigClockSource>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800107c:	f000 f85e 	bl	800113c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001084:	2300      	movs	r3, #0
 8001086:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_TIM2_Init+0x94>)
 800108e:	f002 f831 	bl	80030f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001098:	f000 f850 	bl	800113c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3718      	adds	r7, #24
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000244 	.word	0x20000244

080010a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a1c      	ldr	r2, [pc, #112]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010c2:	f043 0320 	orr.w	r3, r3, #32
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0320 	and.w	r3, r3, #32
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d4:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010d6:	699b      	ldr	r3, [r3, #24]
 80010d8:	4a16      	ldr	r2, [pc, #88]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010da:	f043 0304 	orr.w	r3, r3, #4
 80010de:	6193      	str	r3, [r2, #24]
 80010e0:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010e2:	699b      	ldr	r3, [r3, #24]
 80010e4:	f003 0304 	and.w	r3, r3, #4
 80010e8:	60bb      	str	r3, [r7, #8]
 80010ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	4a10      	ldr	r2, [pc, #64]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010f2:	f043 0308 	orr.w	r3, r3, #8
 80010f6:	6193      	str	r3, [r2, #24]
 80010f8:	4b0e      	ldr	r3, [pc, #56]	; (8001134 <MX_GPIO_Init+0x8c>)
 80010fa:	699b      	ldr	r3, [r3, #24]
 80010fc:	f003 0308 	and.w	r3, r3, #8
 8001100:	607b      	str	r3, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, 1);
 8001104:	2201      	movs	r2, #1
 8001106:	2101      	movs	r1, #1
 8001108:	480b      	ldr	r0, [pc, #44]	; (8001138 <MX_GPIO_Init+0x90>)
 800110a:	f000 fcc2 	bl	8001a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110e:	2301      	movs	r3, #1
 8001110:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001112:	2311      	movs	r3, #17
 8001114:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2302      	movs	r3, #2
 800111c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	4619      	mov	r1, r3
 8001124:	4804      	ldr	r0, [pc, #16]	; (8001138 <MX_GPIO_Init+0x90>)
 8001126:	f000 fb19 	bl	800175c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800112a:	bf00      	nop
 800112c:	3720      	adds	r7, #32
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40021000 	.word	0x40021000
 8001138:	40010800 	.word	0x40010800

0800113c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
}
 8001142:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001144:	e7fe      	b.n	8001144 <Error_Handler+0x8>
	...

08001148 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114e:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <HAL_MspInit+0x5c>)
 8001150:	699b      	ldr	r3, [r3, #24]
 8001152:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <HAL_MspInit+0x5c>)
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	6193      	str	r3, [r2, #24]
 800115a:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <HAL_MspInit+0x5c>)
 800115c:	699b      	ldr	r3, [r3, #24]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	60bb      	str	r3, [r7, #8]
 8001164:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <HAL_MspInit+0x5c>)
 8001168:	69db      	ldr	r3, [r3, #28]
 800116a:	4a0e      	ldr	r2, [pc, #56]	; (80011a4 <HAL_MspInit+0x5c>)
 800116c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001170:	61d3      	str	r3, [r2, #28]
 8001172:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <HAL_MspInit+0x5c>)
 8001174:	69db      	ldr	r3, [r3, #28]
 8001176:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800117e:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <HAL_MspInit+0x60>)
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800118a:	60fb      	str	r3, [r7, #12]
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4a04      	ldr	r2, [pc, #16]	; (80011a8 <HAL_MspInit+0x60>)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119a:	bf00      	nop
 800119c:	3714      	adds	r7, #20
 800119e:	46bd      	mov	sp, r7
 80011a0:	bc80      	pop	{r7}
 80011a2:	4770      	bx	lr
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000

080011ac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b4:	f107 0310 	add.w	r3, r7, #16
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4a15      	ldr	r2, [pc, #84]	; (800121c <HAL_I2C_MspInit+0x70>)
 80011c8:	4293      	cmp	r3, r2
 80011ca:	d123      	bne.n	8001214 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011cc:	4b14      	ldr	r3, [pc, #80]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	4a13      	ldr	r2, [pc, #76]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011d2:	f043 0308 	orr.w	r3, r3, #8
 80011d6:	6193      	str	r3, [r2, #24]
 80011d8:	4b11      	ldr	r3, [pc, #68]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011da:	699b      	ldr	r3, [r3, #24]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	60fb      	str	r3, [r7, #12]
 80011e2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011e4:	23c0      	movs	r3, #192	; 0xc0
 80011e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011e8:	2312      	movs	r3, #18
 80011ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011ec:	2303      	movs	r3, #3
 80011ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011f0:	f107 0310 	add.w	r3, r7, #16
 80011f4:	4619      	mov	r1, r3
 80011f6:	480b      	ldr	r0, [pc, #44]	; (8001224 <HAL_I2C_MspInit+0x78>)
 80011f8:	f000 fab0 	bl	800175c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	; (8001220 <HAL_I2C_MspInit+0x74>)
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	4a07      	ldr	r2, [pc, #28]	; (8001220 <HAL_I2C_MspInit+0x74>)
 8001202:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001206:	61d3      	str	r3, [r2, #28]
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <HAL_I2C_MspInit+0x74>)
 800120a:	69db      	ldr	r3, [r3, #28]
 800120c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001214:	bf00      	nop
 8001216:	3720      	adds	r7, #32
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40005400 	.word	0x40005400
 8001220:	40021000 	.word	0x40021000
 8001224:	40010c00 	.word	0x40010c00

08001228 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001238:	d10b      	bne.n	8001252 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <HAL_TIM_Base_MspInit+0x34>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	4a07      	ldr	r2, [pc, #28]	; (800125c <HAL_TIM_Base_MspInit+0x34>)
 8001240:	f043 0301 	orr.w	r3, r3, #1
 8001244:	61d3      	str	r3, [r2, #28]
 8001246:	4b05      	ldr	r3, [pc, #20]	; (800125c <HAL_TIM_Base_MspInit+0x34>)
 8001248:	69db      	ldr	r3, [r3, #28]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001252:	bf00      	nop
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr
 800125c:	40021000 	.word	0x40021000

08001260 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <NMI_Handler+0x4>

08001266 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800126a:	e7fe      	b.n	800126a <HardFault_Handler+0x4>

0800126c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <MemManage_Handler+0x4>

08001272 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <BusFault_Handler+0x4>

08001278 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <UsageFault_Handler+0x4>

0800127e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	bc80      	pop	{r7}
 8001294:	4770      	bx	lr

08001296 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	46bd      	mov	sp, r7
 800129e:	bc80      	pop	{r7}
 80012a0:	4770      	bx	lr

080012a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012a6:	f000 f935 	bl	8001514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return 1;
 80012b2:	2301      	movs	r3, #1
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <_kill>:

int _kill(int pid, int sig)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012c6:	f002 fd37 	bl	8003d38 <__errno>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2216      	movs	r2, #22
 80012ce:	601a      	str	r2, [r3, #0]
  return -1;
 80012d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}

080012dc <_exit>:

void _exit (int status)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012e4:	f04f 31ff 	mov.w	r1, #4294967295
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ffe7 	bl	80012bc <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ee:	e7fe      	b.n	80012ee <_exit+0x12>

080012f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	e00a      	b.n	8001318 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001302:	f3af 8000 	nop.w
 8001306:	4601      	mov	r1, r0
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	1c5a      	adds	r2, r3, #1
 800130c:	60ba      	str	r2, [r7, #8]
 800130e:	b2ca      	uxtb	r2, r1
 8001310:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	3301      	adds	r3, #1
 8001316:	617b      	str	r3, [r7, #20]
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	429a      	cmp	r2, r3
 800131e:	dbf0      	blt.n	8001302 <_read+0x12>
  }

  return len;
 8001320:	687b      	ldr	r3, [r7, #4]
}
 8001322:	4618      	mov	r0, r3
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b086      	sub	sp, #24
 800132e:	af00      	add	r7, sp, #0
 8001330:	60f8      	str	r0, [r7, #12]
 8001332:	60b9      	str	r1, [r7, #8]
 8001334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
 800133a:	e009      	b.n	8001350 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1c5a      	adds	r2, r3, #1
 8001340:	60ba      	str	r2, [r7, #8]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	4618      	mov	r0, r3
 8001346:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	3301      	adds	r3, #1
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	697a      	ldr	r2, [r7, #20]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	dbf1      	blt.n	800133c <_write+0x12>
  }
  return len;
 8001358:	687b      	ldr	r3, [r7, #4]
}
 800135a:	4618      	mov	r0, r3
 800135c:	3718      	adds	r7, #24
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <_close>:

int _close(int file)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800136e:	4618      	mov	r0, r3
 8001370:	370c      	adds	r7, #12
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr

08001378 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001388:	605a      	str	r2, [r3, #4]
  return 0;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr

08001396 <_isatty>:

int _isatty(int file)
{
 8001396:	b480      	push	{r7}
 8001398:	b083      	sub	sp, #12
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800139e:	2301      	movs	r3, #1
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr

080013aa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b085      	sub	sp, #20
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	60f8      	str	r0, [r7, #12]
 80013b2:	60b9      	str	r1, [r7, #8]
 80013b4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
	...

080013c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b086      	sub	sp, #24
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013cc:	4a14      	ldr	r2, [pc, #80]	; (8001420 <_sbrk+0x5c>)
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <_sbrk+0x60>)
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013d8:	4b13      	ldr	r3, [pc, #76]	; (8001428 <_sbrk+0x64>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d102      	bne.n	80013e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013e0:	4b11      	ldr	r3, [pc, #68]	; (8001428 <_sbrk+0x64>)
 80013e2:	4a12      	ldr	r2, [pc, #72]	; (800142c <_sbrk+0x68>)
 80013e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <_sbrk+0x64>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4413      	add	r3, r2
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d207      	bcs.n	8001404 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013f4:	f002 fca0 	bl	8003d38 <__errno>
 80013f8:	4603      	mov	r3, r0
 80013fa:	220c      	movs	r2, #12
 80013fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001402:	e009      	b.n	8001418 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <_sbrk+0x64>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800140a:	4b07      	ldr	r3, [pc, #28]	; (8001428 <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <_sbrk+0x64>)
 8001414:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001416:	68fb      	ldr	r3, [r7, #12]
}
 8001418:	4618      	mov	r0, r3
 800141a:	3718      	adds	r7, #24
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	20005000 	.word	0x20005000
 8001424:	00000400 	.word	0x00000400
 8001428:	200002a0 	.word	0x200002a0
 800142c:	200003f8 	.word	0x200003f8

08001430 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bc80      	pop	{r7}
 800143a:	4770      	bx	lr

0800143c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800143c:	f7ff fff8 	bl	8001430 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001440:	480b      	ldr	r0, [pc, #44]	; (8001470 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001442:	490c      	ldr	r1, [pc, #48]	; (8001474 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001444:	4a0c      	ldr	r2, [pc, #48]	; (8001478 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001446:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001448:	e002      	b.n	8001450 <LoopCopyDataInit>

0800144a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800144a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800144c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800144e:	3304      	adds	r3, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001450:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001452:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001454:	d3f9      	bcc.n	800144a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001456:	4a09      	ldr	r2, [pc, #36]	; (800147c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001458:	4c09      	ldr	r4, [pc, #36]	; (8001480 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800145c:	e001      	b.n	8001462 <LoopFillZerobss>

0800145e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800145e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001460:	3204      	adds	r2, #4

08001462 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001462:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001464:	d3fb      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001466:	f002 fc6d 	bl	8003d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800146a:	f7ff fce7 	bl	8000e3c <main>
  bx lr
 800146e:	4770      	bx	lr
  ldr r0, =_sdata
 8001470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001474:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001478:	08006254 	.word	0x08006254
  ldr r2, =_sbss
 800147c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001480:	200003f4 	.word	0x200003f4

08001484 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001484:	e7fe      	b.n	8001484 <ADC1_2_IRQHandler>
	...

08001488 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_Init+0x28>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <HAL_Init+0x28>)
 8001492:	f043 0310 	orr.w	r3, r3, #16
 8001496:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001498:	2003      	movs	r0, #3
 800149a:	f000 f92b 	bl	80016f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800149e:	200f      	movs	r0, #15
 80014a0:	f000 f808 	bl	80014b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014a4:	f7ff fe50 	bl	8001148 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014a8:	2300      	movs	r3, #0
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014bc:	4b12      	ldr	r3, [pc, #72]	; (8001508 <HAL_InitTick+0x54>)
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	4b12      	ldr	r3, [pc, #72]	; (800150c <HAL_InitTick+0x58>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80014ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	f000 f935 	bl	8001742 <HAL_SYSTICK_Config>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e00e      	b.n	8001500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	d80a      	bhi.n	80014fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014e8:	2200      	movs	r2, #0
 80014ea:	6879      	ldr	r1, [r7, #4]
 80014ec:	f04f 30ff 	mov.w	r0, #4294967295
 80014f0:	f000 f90b 	bl	800170a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014f4:	4a06      	ldr	r2, [pc, #24]	; (8001510 <HAL_InitTick+0x5c>)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
 80014fc:	e000      	b.n	8001500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
}
 8001500:	4618      	mov	r0, r3
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	20000000 	.word	0x20000000
 800150c:	20000008 	.word	0x20000008
 8001510:	20000004 	.word	0x20000004

08001514 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001518:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_IncTick+0x1c>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	461a      	mov	r2, r3
 800151e:	4b05      	ldr	r3, [pc, #20]	; (8001534 <HAL_IncTick+0x20>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4413      	add	r3, r2
 8001524:	4a03      	ldr	r2, [pc, #12]	; (8001534 <HAL_IncTick+0x20>)
 8001526:	6013      	str	r3, [r2, #0]
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	bc80      	pop	{r7}
 800152e:	4770      	bx	lr
 8001530:	20000008 	.word	0x20000008
 8001534:	200002a4 	.word	0x200002a4

08001538 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  return uwTick;
 800153c:	4b02      	ldr	r3, [pc, #8]	; (8001548 <HAL_GetTick+0x10>)
 800153e:	681b      	ldr	r3, [r3, #0]
}
 8001540:	4618      	mov	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	bc80      	pop	{r7}
 8001546:	4770      	bx	lr
 8001548:	200002a4 	.word	0x200002a4

0800154c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fff0 	bl	8001538 <HAL_GetTick>
 8001558:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001564:	d005      	beq.n	8001572 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_Delay+0x44>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	461a      	mov	r2, r3
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	4413      	add	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001572:	bf00      	nop
 8001574:	f7ff ffe0 	bl	8001538 <HAL_GetTick>
 8001578:	4602      	mov	r2, r0
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	429a      	cmp	r2, r3
 8001582:	d8f7      	bhi.n	8001574 <HAL_Delay+0x28>
  {
  }
}
 8001584:	bf00      	nop
 8001586:	bf00      	nop
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	20000008 	.word	0x20000008

08001594 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015b0:	4013      	ands	r3, r2
 80015b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015c6:	4a04      	ldr	r2, [pc, #16]	; (80015d8 <__NVIC_SetPriorityGrouping+0x44>)
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	60d3      	str	r3, [r2, #12]
}
 80015cc:	bf00      	nop
 80015ce:	3714      	adds	r7, #20
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bc80      	pop	{r7}
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_GetPriorityGrouping+0x18>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	0a1b      	lsrs	r3, r3, #8
 80015e6:	f003 0307 	and.w	r3, r3, #7
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bc80      	pop	{r7}
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	e000ed00 	.word	0xe000ed00

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001604:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	db0a      	blt.n	8001622 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	b2da      	uxtb	r2, r3
 8001610:	490c      	ldr	r1, [pc, #48]	; (8001644 <__NVIC_SetPriority+0x4c>)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	0112      	lsls	r2, r2, #4
 8001618:	b2d2      	uxtb	r2, r2
 800161a:	440b      	add	r3, r1
 800161c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001620:	e00a      	b.n	8001638 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	4908      	ldr	r1, [pc, #32]	; (8001648 <__NVIC_SetPriority+0x50>)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	f003 030f 	and.w	r3, r3, #15
 800162e:	3b04      	subs	r3, #4
 8001630:	0112      	lsls	r2, r2, #4
 8001632:	b2d2      	uxtb	r2, r2
 8001634:	440b      	add	r3, r1
 8001636:	761a      	strb	r2, [r3, #24]
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	bc80      	pop	{r7}
 8001640:	4770      	bx	lr
 8001642:	bf00      	nop
 8001644:	e000e100 	.word	0xe000e100
 8001648:	e000ed00 	.word	0xe000ed00

0800164c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	60f8      	str	r0, [r7, #12]
 8001654:	60b9      	str	r1, [r7, #8]
 8001656:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 0307 	and.w	r3, r3, #7
 800165e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f1c3 0307 	rsb	r3, r3, #7
 8001666:	2b04      	cmp	r3, #4
 8001668:	bf28      	it	cs
 800166a:	2304      	movcs	r3, #4
 800166c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	3304      	adds	r3, #4
 8001672:	2b06      	cmp	r3, #6
 8001674:	d902      	bls.n	800167c <NVIC_EncodePriority+0x30>
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	3b03      	subs	r3, #3
 800167a:	e000      	b.n	800167e <NVIC_EncodePriority+0x32>
 800167c:	2300      	movs	r3, #0
 800167e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001680:	f04f 32ff 	mov.w	r2, #4294967295
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	43da      	mvns	r2, r3
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	401a      	ands	r2, r3
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001694:	f04f 31ff 	mov.w	r1, #4294967295
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	fa01 f303 	lsl.w	r3, r1, r3
 800169e:	43d9      	mvns	r1, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	4313      	orrs	r3, r2
         );
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bc80      	pop	{r7}
 80016ae:	4770      	bx	lr

080016b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	3b01      	subs	r3, #1
 80016bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016c0:	d301      	bcc.n	80016c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016c2:	2301      	movs	r3, #1
 80016c4:	e00f      	b.n	80016e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016c6:	4a0a      	ldr	r2, [pc, #40]	; (80016f0 <SysTick_Config+0x40>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ce:	210f      	movs	r1, #15
 80016d0:	f04f 30ff 	mov.w	r0, #4294967295
 80016d4:	f7ff ff90 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d8:	4b05      	ldr	r3, [pc, #20]	; (80016f0 <SysTick_Config+0x40>)
 80016da:	2200      	movs	r2, #0
 80016dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016de:	4b04      	ldr	r3, [pc, #16]	; (80016f0 <SysTick_Config+0x40>)
 80016e0:	2207      	movs	r2, #7
 80016e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	e000e010 	.word	0xe000e010

080016f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016fc:	6878      	ldr	r0, [r7, #4]
 80016fe:	f7ff ff49 	bl	8001594 <__NVIC_SetPriorityGrouping>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800170a:	b580      	push	{r7, lr}
 800170c:	b086      	sub	sp, #24
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	60b9      	str	r1, [r7, #8]
 8001714:	607a      	str	r2, [r7, #4]
 8001716:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800171c:	f7ff ff5e 	bl	80015dc <__NVIC_GetPriorityGrouping>
 8001720:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	68b9      	ldr	r1, [r7, #8]
 8001726:	6978      	ldr	r0, [r7, #20]
 8001728:	f7ff ff90 	bl	800164c <NVIC_EncodePriority>
 800172c:	4602      	mov	r2, r0
 800172e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff5f 	bl	80015f8 <__NVIC_SetPriority>
}
 800173a:	bf00      	nop
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b082      	sub	sp, #8
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffb0 	bl	80016b0 <SysTick_Config>
 8001750:	4603      	mov	r3, r0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
	...

0800175c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800175c:	b480      	push	{r7}
 800175e:	b08b      	sub	sp, #44	; 0x2c
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001766:	2300      	movs	r3, #0
 8001768:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800176a:	2300      	movs	r3, #0
 800176c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800176e:	e169      	b.n	8001a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001770:	2201      	movs	r2, #1
 8001772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	69fa      	ldr	r2, [r7, #28]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	429a      	cmp	r2, r3
 800178a:	f040 8158 	bne.w	8001a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	4a9a      	ldr	r2, [pc, #616]	; (80019fc <HAL_GPIO_Init+0x2a0>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d05e      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 8001798:	4a98      	ldr	r2, [pc, #608]	; (80019fc <HAL_GPIO_Init+0x2a0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d875      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 800179e:	4a98      	ldr	r2, [pc, #608]	; (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d058      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017a4:	4a96      	ldr	r2, [pc, #600]	; (8001a00 <HAL_GPIO_Init+0x2a4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d86f      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017aa:	4a96      	ldr	r2, [pc, #600]	; (8001a04 <HAL_GPIO_Init+0x2a8>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d052      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017b0:	4a94      	ldr	r2, [pc, #592]	; (8001a04 <HAL_GPIO_Init+0x2a8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d869      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017b6:	4a94      	ldr	r2, [pc, #592]	; (8001a08 <HAL_GPIO_Init+0x2ac>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d04c      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017bc:	4a92      	ldr	r2, [pc, #584]	; (8001a08 <HAL_GPIO_Init+0x2ac>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d863      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017c2:	4a92      	ldr	r2, [pc, #584]	; (8001a0c <HAL_GPIO_Init+0x2b0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d046      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
 80017c8:	4a90      	ldr	r2, [pc, #576]	; (8001a0c <HAL_GPIO_Init+0x2b0>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d85d      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017ce:	2b12      	cmp	r3, #18
 80017d0:	d82a      	bhi.n	8001828 <HAL_GPIO_Init+0xcc>
 80017d2:	2b12      	cmp	r3, #18
 80017d4:	d859      	bhi.n	800188a <HAL_GPIO_Init+0x12e>
 80017d6:	a201      	add	r2, pc, #4	; (adr r2, 80017dc <HAL_GPIO_Init+0x80>)
 80017d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017dc:	08001857 	.word	0x08001857
 80017e0:	08001831 	.word	0x08001831
 80017e4:	08001843 	.word	0x08001843
 80017e8:	08001885 	.word	0x08001885
 80017ec:	0800188b 	.word	0x0800188b
 80017f0:	0800188b 	.word	0x0800188b
 80017f4:	0800188b 	.word	0x0800188b
 80017f8:	0800188b 	.word	0x0800188b
 80017fc:	0800188b 	.word	0x0800188b
 8001800:	0800188b 	.word	0x0800188b
 8001804:	0800188b 	.word	0x0800188b
 8001808:	0800188b 	.word	0x0800188b
 800180c:	0800188b 	.word	0x0800188b
 8001810:	0800188b 	.word	0x0800188b
 8001814:	0800188b 	.word	0x0800188b
 8001818:	0800188b 	.word	0x0800188b
 800181c:	0800188b 	.word	0x0800188b
 8001820:	08001839 	.word	0x08001839
 8001824:	0800184d 	.word	0x0800184d
 8001828:	4a79      	ldr	r2, [pc, #484]	; (8001a10 <HAL_GPIO_Init+0x2b4>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182e:	e02c      	b.n	800188a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	623b      	str	r3, [r7, #32]
          break;
 8001836:	e029      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	3304      	adds	r3, #4
 800183e:	623b      	str	r3, [r7, #32]
          break;
 8001840:	e024      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	3308      	adds	r3, #8
 8001848:	623b      	str	r3, [r7, #32]
          break;
 800184a:	e01f      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	330c      	adds	r3, #12
 8001852:	623b      	str	r3, [r7, #32]
          break;
 8001854:	e01a      	b.n	800188c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d102      	bne.n	8001864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800185e:	2304      	movs	r3, #4
 8001860:	623b      	str	r3, [r7, #32]
          break;
 8001862:	e013      	b.n	800188c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689b      	ldr	r3, [r3, #8]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d105      	bne.n	8001878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800186c:	2308      	movs	r3, #8
 800186e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	69fa      	ldr	r2, [r7, #28]
 8001874:	611a      	str	r2, [r3, #16]
          break;
 8001876:	e009      	b.n	800188c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001878:	2308      	movs	r3, #8
 800187a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69fa      	ldr	r2, [r7, #28]
 8001880:	615a      	str	r2, [r3, #20]
          break;
 8001882:	e003      	b.n	800188c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e000      	b.n	800188c <HAL_GPIO_Init+0x130>
          break;
 800188a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2bff      	cmp	r3, #255	; 0xff
 8001890:	d801      	bhi.n	8001896 <HAL_GPIO_Init+0x13a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	e001      	b.n	800189a <HAL_GPIO_Init+0x13e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3304      	adds	r3, #4
 800189a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d802      	bhi.n	80018a8 <HAL_GPIO_Init+0x14c>
 80018a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	e002      	b.n	80018ae <HAL_GPIO_Init+0x152>
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	3b08      	subs	r3, #8
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	210f      	movs	r1, #15
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	fa01 f303 	lsl.w	r3, r1, r3
 80018bc:	43db      	mvns	r3, r3
 80018be:	401a      	ands	r2, r3
 80018c0:	6a39      	ldr	r1, [r7, #32]
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	fa01 f303 	lsl.w	r3, r1, r3
 80018c8:	431a      	orrs	r2, r3
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	f000 80b1 	beq.w	8001a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018dc:	4b4d      	ldr	r3, [pc, #308]	; (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	4a4c      	ldr	r2, [pc, #304]	; (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018e2:	f043 0301 	orr.w	r3, r3, #1
 80018e6:	6193      	str	r3, [r2, #24]
 80018e8:	4b4a      	ldr	r3, [pc, #296]	; (8001a14 <HAL_GPIO_Init+0x2b8>)
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	60bb      	str	r3, [r7, #8]
 80018f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_GPIO_Init+0x2bc>)
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001904:	f003 0303 	and.w	r3, r3, #3
 8001908:	009b      	lsls	r3, r3, #2
 800190a:	220f      	movs	r2, #15
 800190c:	fa02 f303 	lsl.w	r3, r2, r3
 8001910:	43db      	mvns	r3, r3
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4013      	ands	r3, r2
 8001916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a40      	ldr	r2, [pc, #256]	; (8001a1c <HAL_GPIO_Init+0x2c0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d013      	beq.n	8001948 <HAL_GPIO_Init+0x1ec>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3f      	ldr	r2, [pc, #252]	; (8001a20 <HAL_GPIO_Init+0x2c4>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00d      	beq.n	8001944 <HAL_GPIO_Init+0x1e8>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3e      	ldr	r2, [pc, #248]	; (8001a24 <HAL_GPIO_Init+0x2c8>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <HAL_GPIO_Init+0x1e4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3d      	ldr	r2, [pc, #244]	; (8001a28 <HAL_GPIO_Init+0x2cc>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d101      	bne.n	800193c <HAL_GPIO_Init+0x1e0>
 8001938:	2303      	movs	r3, #3
 800193a:	e006      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 800193c:	2304      	movs	r3, #4
 800193e:	e004      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001940:	2302      	movs	r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <HAL_GPIO_Init+0x1ee>
 8001948:	2300      	movs	r3, #0
 800194a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800194c:	f002 0203 	and.w	r2, r2, #3
 8001950:	0092      	lsls	r2, r2, #2
 8001952:	4093      	lsls	r3, r2
 8001954:	68fa      	ldr	r2, [r7, #12]
 8001956:	4313      	orrs	r3, r2
 8001958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195a:	492f      	ldr	r1, [pc, #188]	; (8001a18 <HAL_GPIO_Init+0x2bc>)
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	089b      	lsrs	r3, r3, #2
 8001960:	3302      	adds	r3, #2
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d006      	beq.n	8001982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001974:	4b2d      	ldr	r3, [pc, #180]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 8001976:	689a      	ldr	r2, [r3, #8]
 8001978:	492c      	ldr	r1, [pc, #176]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	608b      	str	r3, [r1, #8]
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001982:	4b2a      	ldr	r3, [pc, #168]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 8001984:	689a      	ldr	r2, [r3, #8]
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	43db      	mvns	r3, r3
 800198a:	4928      	ldr	r1, [pc, #160]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 800198c:	4013      	ands	r3, r2
 800198e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d006      	beq.n	80019aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800199c:	4b23      	ldr	r3, [pc, #140]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 800199e:	68da      	ldr	r2, [r3, #12]
 80019a0:	4922      	ldr	r1, [pc, #136]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60cb      	str	r3, [r1, #12]
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019aa:	4b20      	ldr	r3, [pc, #128]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	491e      	ldr	r1, [pc, #120]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d006      	beq.n	80019d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c4:	4b19      	ldr	r3, [pc, #100]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019c6:	685a      	ldr	r2, [r3, #4]
 80019c8:	4918      	ldr	r1, [pc, #96]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
 80019d0:	e006      	b.n	80019e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	43db      	mvns	r3, r3
 80019da:	4914      	ldr	r1, [pc, #80]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019dc:	4013      	ands	r3, r2
 80019de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d021      	beq.n	8001a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019ee:	681a      	ldr	r2, [r3, #0]
 80019f0:	490e      	ldr	r1, [pc, #56]	; (8001a2c <HAL_GPIO_Init+0x2d0>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	600b      	str	r3, [r1, #0]
 80019f8:	e021      	b.n	8001a3e <HAL_GPIO_Init+0x2e2>
 80019fa:	bf00      	nop
 80019fc:	10320000 	.word	0x10320000
 8001a00:	10310000 	.word	0x10310000
 8001a04:	10220000 	.word	0x10220000
 8001a08:	10210000 	.word	0x10210000
 8001a0c:	10120000 	.word	0x10120000
 8001a10:	10110000 	.word	0x10110000
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40010000 	.word	0x40010000
 8001a1c:	40010800 	.word	0x40010800
 8001a20:	40010c00 	.word	0x40010c00
 8001a24:	40011000 	.word	0x40011000
 8001a28:	40011400 	.word	0x40011400
 8001a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_GPIO_Init+0x304>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4909      	ldr	r1, [pc, #36]	; (8001a60 <HAL_GPIO_Init+0x304>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f ae8e 	bne.w	8001770 <HAL_GPIO_Init+0x14>
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	372c      	adds	r7, #44	; 0x2c
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	460b      	mov	r3, r1
 8001a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689a      	ldr	r2, [r3, #8]
 8001a74:	887b      	ldrh	r3, [r7, #2]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	73fb      	strb	r3, [r7, #15]
 8001a80:	e001      	b.n	8001a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a82:	2300      	movs	r3, #0
 8001a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a92:	b480      	push	{r7}
 8001a94:	b083      	sub	sp, #12
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
 8001a9a:	460b      	mov	r3, r1
 8001a9c:	807b      	strh	r3, [r7, #2]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa2:	787b      	ldrb	r3, [r7, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d003      	beq.n	8001ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa8:	887a      	ldrh	r2, [r7, #2]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aae:	e003      	b.n	8001ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab0:	887b      	ldrh	r3, [r7, #2]
 8001ab2:	041a      	lsls	r2, r3, #16
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	611a      	str	r2, [r3, #16]
}
 8001ab8:	bf00      	nop
 8001aba:	370c      	adds	r7, #12
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bc80      	pop	{r7}
 8001ac0:	4770      	bx	lr
	...

08001ac4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e12b      	b.n	8001d2e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff fb5e 	bl	80011ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2224      	movs	r2, #36	; 0x24
 8001af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f022 0201 	bic.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b16:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b28:	f001 f832 	bl	8002b90 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	4a81      	ldr	r2, [pc, #516]	; (8001d38 <HAL_I2C_Init+0x274>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d807      	bhi.n	8001b48 <HAL_I2C_Init+0x84>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	4a80      	ldr	r2, [pc, #512]	; (8001d3c <HAL_I2C_Init+0x278>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	bf94      	ite	ls
 8001b40:	2301      	movls	r3, #1
 8001b42:	2300      	movhi	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e006      	b.n	8001b56 <HAL_I2C_Init+0x92>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4a7d      	ldr	r2, [pc, #500]	; (8001d40 <HAL_I2C_Init+0x27c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	bf94      	ite	ls
 8001b50:	2301      	movls	r3, #1
 8001b52:	2300      	movhi	r3, #0
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e0e7      	b.n	8001d2e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4a78      	ldr	r2, [pc, #480]	; (8001d44 <HAL_I2C_Init+0x280>)
 8001b62:	fba2 2303 	umull	r2, r3, r2, r3
 8001b66:	0c9b      	lsrs	r3, r3, #18
 8001b68:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68ba      	ldr	r2, [r7, #8]
 8001b7a:	430a      	orrs	r2, r1
 8001b7c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6a1b      	ldr	r3, [r3, #32]
 8001b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a6a      	ldr	r2, [pc, #424]	; (8001d38 <HAL_I2C_Init+0x274>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d802      	bhi.n	8001b98 <HAL_I2C_Init+0xd4>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	3301      	adds	r3, #1
 8001b96:	e009      	b.n	8001bac <HAL_I2C_Init+0xe8>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ba2:	4a69      	ldr	r2, [pc, #420]	; (8001d48 <HAL_I2C_Init+0x284>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	099b      	lsrs	r3, r3, #6
 8001baa:	3301      	adds	r3, #1
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	430b      	orrs	r3, r1
 8001bb2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	69db      	ldr	r3, [r3, #28]
 8001bba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001bbe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	495c      	ldr	r1, [pc, #368]	; (8001d38 <HAL_I2C_Init+0x274>)
 8001bc8:	428b      	cmp	r3, r1
 8001bca:	d819      	bhi.n	8001c00 <HAL_I2C_Init+0x13c>
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1e59      	subs	r1, r3, #1
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bda:	1c59      	adds	r1, r3, #1
 8001bdc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001be0:	400b      	ands	r3, r1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_I2C_Init+0x138>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1e59      	subs	r1, r3, #1
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bfa:	e051      	b.n	8001ca0 <HAL_I2C_Init+0x1dc>
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	e04f      	b.n	8001ca0 <HAL_I2C_Init+0x1dc>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d111      	bne.n	8001c2c <HAL_I2C_Init+0x168>
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	1e58      	subs	r0, r3, #1
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6859      	ldr	r1, [r3, #4]
 8001c10:	460b      	mov	r3, r1
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	440b      	add	r3, r1
 8001c16:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	bf0c      	ite	eq
 8001c24:	2301      	moveq	r3, #1
 8001c26:	2300      	movne	r3, #0
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e012      	b.n	8001c52 <HAL_I2C_Init+0x18e>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	1e58      	subs	r0, r3, #1
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6859      	ldr	r1, [r3, #4]
 8001c34:	460b      	mov	r3, r1
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	0099      	lsls	r1, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c42:	3301      	adds	r3, #1
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	bf0c      	ite	eq
 8001c4c:	2301      	moveq	r3, #1
 8001c4e:	2300      	movne	r3, #0
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_I2C_Init+0x196>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e022      	b.n	8001ca0 <HAL_I2C_Init+0x1dc>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10e      	bne.n	8001c80 <HAL_I2C_Init+0x1bc>
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	1e58      	subs	r0, r3, #1
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6859      	ldr	r1, [r3, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	440b      	add	r3, r1
 8001c70:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7e:	e00f      	b.n	8001ca0 <HAL_I2C_Init+0x1dc>
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	1e58      	subs	r0, r3, #1
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	460b      	mov	r3, r1
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	440b      	add	r3, r1
 8001c8e:	0099      	lsls	r1, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c96:	3301      	adds	r3, #1
 8001c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	6809      	ldr	r1, [r1, #0]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69da      	ldr	r2, [r3, #28]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a1b      	ldr	r3, [r3, #32]
 8001cba:	431a      	orrs	r2, r3
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6911      	ldr	r1, [r2, #16]
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	68d2      	ldr	r2, [r2, #12]
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6812      	ldr	r2, [r2, #0]
 8001ce0:	430b      	orrs	r3, r1
 8001ce2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695a      	ldr	r2, [r3, #20]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	431a      	orrs	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	000186a0 	.word	0x000186a0
 8001d3c:	001e847f 	.word	0x001e847f
 8001d40:	003d08ff 	.word	0x003d08ff
 8001d44:	431bde83 	.word	0x431bde83
 8001d48:	10624dd3 	.word	0x10624dd3

08001d4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af02      	add	r7, sp, #8
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	461a      	mov	r2, r3
 8001d58:	460b      	mov	r3, r1
 8001d5a:	817b      	strh	r3, [r7, #10]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff fbea 	bl	8001538 <HAL_GetTick>
 8001d64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	f040 80e0 	bne.w	8001f34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	9300      	str	r3, [sp, #0]
 8001d78:	2319      	movs	r3, #25
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	4970      	ldr	r1, [pc, #448]	; (8001f40 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f000 f964 	bl	800204c <I2C_WaitOnFlagUntilTimeout>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0d3      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d101      	bne.n	8001d9c <HAL_I2C_Master_Transmit+0x50>
 8001d98:	2302      	movs	r3, #2
 8001d9a:	e0cc      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	2201      	movs	r2, #1
 8001da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d007      	beq.n	8001dc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001dd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2221      	movs	r2, #33	; 0x21
 8001dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2210      	movs	r2, #16
 8001dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	687a      	ldr	r2, [r7, #4]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	893a      	ldrh	r2, [r7, #8]
 8001df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001df8:	b29a      	uxth	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	4a50      	ldr	r2, [pc, #320]	; (8001f44 <HAL_I2C_Master_Transmit+0x1f8>)
 8001e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001e04:	8979      	ldrh	r1, [r7, #10]
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	6a3a      	ldr	r2, [r7, #32]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f000 f89c 	bl	8001f48 <I2C_MasterRequestWrite>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e08d      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001e30:	e066      	b.n	8001f00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e32:	697a      	ldr	r2, [r7, #20]
 8001e34:	6a39      	ldr	r1, [r7, #32]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	f000 fa22 	bl	8002280 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d00d      	beq.n	8001e5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e46:	2b04      	cmp	r3, #4
 8001e48:	d107      	bne.n	8001e5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e06b      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	781a      	ldrb	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6e:	1c5a      	adds	r2, r3, #1
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e78:	b29b      	uxth	r3, r3
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	b29a      	uxth	r2, r3
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e86:	3b01      	subs	r3, #1
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	f003 0304 	and.w	r3, r3, #4
 8001e98:	2b04      	cmp	r3, #4
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_I2C_Master_Transmit+0x188>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d017      	beq.n	8001ed4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea8:	781a      	ldrb	r2, [r3, #0]
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb4:	1c5a      	adds	r2, r3, #1
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ebe:	b29b      	uxth	r3, r3
 8001ec0:	3b01      	subs	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	3b01      	subs	r3, #1
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	6a39      	ldr	r1, [r7, #32]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa19 	bl	8002310 <I2C_WaitOnBTFFlagUntilTimeout>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00d      	beq.n	8001f00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee8:	2b04      	cmp	r3, #4
 8001eea:	d107      	bne.n	8001efc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001efa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e01a      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d194      	bne.n	8001e32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2220      	movs	r2, #32
 8001f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f30:	2300      	movs	r3, #0
 8001f32:	e000      	b.n	8001f36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001f34:	2302      	movs	r3, #2
  }
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3718      	adds	r7, #24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	00100002 	.word	0x00100002
 8001f44:	ffff0000 	.word	0xffff0000

08001f48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2b08      	cmp	r3, #8
 8001f62:	d006      	beq.n	8001f72 <I2C_MasterRequestWrite+0x2a>
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d003      	beq.n	8001f72 <I2C_MasterRequestWrite+0x2a>
 8001f6a:	697b      	ldr	r3, [r7, #20]
 8001f6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f70:	d108      	bne.n	8001f84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e00b      	b.n	8001f9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	2b12      	cmp	r3, #18
 8001f8a:	d107      	bne.n	8001f9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	9300      	str	r3, [sp, #0]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001fa8:	68f8      	ldr	r0, [r7, #12]
 8001faa:	f000 f84f 	bl	800204c <I2C_WaitOnFlagUntilTimeout>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fc2:	d103      	bne.n	8001fcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e035      	b.n	800203c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001fd8:	d108      	bne.n	8001fec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001fda:	897b      	ldrh	r3, [r7, #10]
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	461a      	mov	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e01b      	b.n	8002024 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001fec:	897b      	ldrh	r3, [r7, #10]
 8001fee:	11db      	asrs	r3, r3, #7
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	f003 0306 	and.w	r3, r3, #6
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	f063 030f 	orn	r3, r3, #15
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	490e      	ldr	r1, [pc, #56]	; (8002044 <I2C_MasterRequestWrite+0xfc>)
 800200a:	68f8      	ldr	r0, [r7, #12]
 800200c:	f000 f898 	bl	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e010      	b.n	800203c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800201a:	897b      	ldrh	r3, [r7, #10]
 800201c:	b2da      	uxtb	r2, r3
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	687a      	ldr	r2, [r7, #4]
 8002028:	4907      	ldr	r1, [pc, #28]	; (8002048 <I2C_MasterRequestWrite+0x100>)
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f888 	bl	8002140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e000      	b.n	800203c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800203a:	2300      	movs	r3, #0
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	00010008 	.word	0x00010008
 8002048:	00010002 	.word	0x00010002

0800204c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	4613      	mov	r3, r2
 800205a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800205c:	e048      	b.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d044      	beq.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002066:	f7ff fa67 	bl	8001538 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	69bb      	ldr	r3, [r7, #24]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d302      	bcc.n	800207c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d139      	bne.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	0c1b      	lsrs	r3, r3, #16
 8002080:	b2db      	uxtb	r3, r3
 8002082:	2b01      	cmp	r3, #1
 8002084:	d10d      	bne.n	80020a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	695b      	ldr	r3, [r3, #20]
 800208c:	43da      	mvns	r2, r3
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	4013      	ands	r3, r2
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	bf0c      	ite	eq
 8002098:	2301      	moveq	r3, #1
 800209a:	2300      	movne	r3, #0
 800209c:	b2db      	uxtb	r3, r3
 800209e:	461a      	mov	r2, r3
 80020a0:	e00c      	b.n	80020bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	43da      	mvns	r2, r3
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4013      	ands	r3, r2
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	bf0c      	ite	eq
 80020b4:	2301      	moveq	r3, #1
 80020b6:	2300      	movne	r3, #0
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	429a      	cmp	r2, r3
 80020c0:	d116      	bne.n	80020f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2200      	movs	r2, #0
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2220      	movs	r2, #32
 80020cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2200      	movs	r2, #0
 80020d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020dc:	f043 0220 	orr.w	r2, r3, #32
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e023      	b.n	8002138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020f0:	68bb      	ldr	r3, [r7, #8]
 80020f2:	0c1b      	lsrs	r3, r3, #16
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d10d      	bne.n	8002116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	695b      	ldr	r3, [r3, #20]
 8002100:	43da      	mvns	r2, r3
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	4013      	ands	r3, r2
 8002106:	b29b      	uxth	r3, r3
 8002108:	2b00      	cmp	r3, #0
 800210a:	bf0c      	ite	eq
 800210c:	2301      	moveq	r3, #1
 800210e:	2300      	movne	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	e00c      	b.n	8002130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	43da      	mvns	r2, r3
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	4013      	ands	r3, r2
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	bf0c      	ite	eq
 8002128:	2301      	moveq	r3, #1
 800212a:	2300      	movne	r3, #0
 800212c:	b2db      	uxtb	r3, r3
 800212e:	461a      	mov	r2, r3
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	429a      	cmp	r2, r3
 8002134:	d093      	beq.n	800205e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
 800214c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800214e:	e071      	b.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	695b      	ldr	r3, [r3, #20]
 8002156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215e:	d123      	bne.n	80021a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800216e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2200      	movs	r2, #0
 800217e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2220      	movs	r2, #32
 8002184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2200      	movs	r2, #0
 800218c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002194:	f043 0204 	orr.w	r2, r3, #4
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021a4:	2301      	movs	r3, #1
 80021a6:	e067      	b.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021ae:	d041      	beq.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b0:	f7ff f9c2 	bl	8001538 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d302      	bcc.n	80021c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d136      	bne.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	0c1b      	lsrs	r3, r3, #16
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	2b01      	cmp	r3, #1
 80021ce:	d10c      	bne.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	695b      	ldr	r3, [r3, #20]
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	e00b      	b.n	8002202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	43da      	mvns	r2, r3
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	4013      	ands	r3, r2
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d016      	beq.n	8002234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2220      	movs	r2, #32
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f043 0220 	orr.w	r2, r3, #32
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e021      	b.n	8002278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	0c1b      	lsrs	r3, r3, #16
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b01      	cmp	r3, #1
 800223c:	d10c      	bne.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695b      	ldr	r3, [r3, #20]
 8002244:	43da      	mvns	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	4013      	ands	r3, r2
 800224a:	b29b      	uxth	r3, r3
 800224c:	2b00      	cmp	r3, #0
 800224e:	bf14      	ite	ne
 8002250:	2301      	movne	r3, #1
 8002252:	2300      	moveq	r3, #0
 8002254:	b2db      	uxtb	r3, r3
 8002256:	e00b      	b.n	8002270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	43da      	mvns	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4013      	ands	r3, r2
 8002264:	b29b      	uxth	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	bf14      	ite	ne
 800226a:	2301      	movne	r3, #1
 800226c:	2300      	moveq	r3, #0
 800226e:	b2db      	uxtb	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	f47f af6d 	bne.w	8002150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3710      	adds	r7, #16
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b084      	sub	sp, #16
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	60b9      	str	r1, [r7, #8]
 800228a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800228c:	e034      	b.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800228e:	68f8      	ldr	r0, [r7, #12]
 8002290:	f000 f886 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e034      	b.n	8002308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022a4:	d028      	beq.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022a6:	f7ff f947 	bl	8001538 <HAL_GetTick>
 80022aa:	4602      	mov	r2, r0
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	68ba      	ldr	r2, [r7, #8]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d302      	bcc.n	80022bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d11d      	bne.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022c6:	2b80      	cmp	r3, #128	; 0x80
 80022c8:	d016      	beq.n	80022f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2220      	movs	r2, #32
 80022d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0220 	orr.w	r2, r3, #32
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695b      	ldr	r3, [r3, #20]
 80022fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002302:	2b80      	cmp	r3, #128	; 0x80
 8002304:	d1c3      	bne.n	800228e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800231c:	e034      	b.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	f000 f83e 	bl	80023a0 <I2C_IsAcknowledgeFailed>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e034      	b.n	8002398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002334:	d028      	beq.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002336:	f7ff f8ff 	bl	8001538 <HAL_GetTick>
 800233a:	4602      	mov	r2, r0
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	1ad3      	subs	r3, r2, r3
 8002340:	68ba      	ldr	r2, [r7, #8]
 8002342:	429a      	cmp	r2, r3
 8002344:	d302      	bcc.n	800234c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d11d      	bne.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	695b      	ldr	r3, [r3, #20]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b04      	cmp	r3, #4
 8002358:	d016      	beq.n	8002388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2220      	movs	r2, #32
 8002364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002374:	f043 0220 	orr.w	r2, r3, #32
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e007      	b.n	8002398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	f003 0304 	and.w	r3, r3, #4
 8002392:	2b04      	cmp	r3, #4
 8002394:	d1c3      	bne.n	800231e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3710      	adds	r7, #16
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023b6:	d11b      	bne.n	80023f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2200      	movs	r2, #0
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023dc:	f043 0204 	orr.w	r2, r3, #4
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e000      	b.n	80023f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e272      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 8087 	beq.w	800252a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800241c:	4b92      	ldr	r3, [pc, #584]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f003 030c 	and.w	r3, r3, #12
 8002424:	2b04      	cmp	r3, #4
 8002426:	d00c      	beq.n	8002442 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002428:	4b8f      	ldr	r3, [pc, #572]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 030c 	and.w	r3, r3, #12
 8002430:	2b08      	cmp	r3, #8
 8002432:	d112      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
 8002434:	4b8c      	ldr	r3, [pc, #560]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800243c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002440:	d10b      	bne.n	800245a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002442:	4b89      	ldr	r3, [pc, #548]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d06c      	beq.n	8002528 <HAL_RCC_OscConfig+0x12c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d168      	bne.n	8002528 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e24c      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002462:	d106      	bne.n	8002472 <HAL_RCC_OscConfig+0x76>
 8002464:	4b80      	ldr	r3, [pc, #512]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a7f      	ldr	r2, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800246a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246e:	6013      	str	r3, [r2, #0]
 8002470:	e02e      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b7b      	ldr	r3, [pc, #492]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a7a      	ldr	r2, [pc, #488]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002480:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b78      	ldr	r3, [pc, #480]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a77      	ldr	r2, [pc, #476]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800248c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e01d      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800249c:	d10c      	bne.n	80024b8 <HAL_RCC_OscConfig+0xbc>
 800249e:	4b72      	ldr	r3, [pc, #456]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a71      	ldr	r2, [pc, #452]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024a8:	6013      	str	r3, [r2, #0]
 80024aa:	4b6f      	ldr	r3, [pc, #444]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a6e      	ldr	r2, [pc, #440]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e00b      	b.n	80024d0 <HAL_RCC_OscConfig+0xd4>
 80024b8:	4b6b      	ldr	r3, [pc, #428]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a6a      	ldr	r2, [pc, #424]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024c2:	6013      	str	r3, [r2, #0]
 80024c4:	4b68      	ldr	r3, [pc, #416]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a67      	ldr	r2, [pc, #412]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024ce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d013      	beq.n	8002500 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff f82e 	bl	8001538 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff f82a 	bl	8001538 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e200      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024f2:	4b5d      	ldr	r3, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0f0      	beq.n	80024e0 <HAL_RCC_OscConfig+0xe4>
 80024fe:	e014      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002500:	f7ff f81a 	bl	8001538 <HAL_GetTick>
 8002504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002506:	e008      	b.n	800251a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002508:	f7ff f816 	bl	8001538 <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	2b64      	cmp	r3, #100	; 0x64
 8002514:	d901      	bls.n	800251a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e1ec      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800251a:	4b53      	ldr	r3, [pc, #332]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f0      	bne.n	8002508 <HAL_RCC_OscConfig+0x10c>
 8002526:	e000      	b.n	800252a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d063      	beq.n	80025fe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002536:	4b4c      	ldr	r3, [pc, #304]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002542:	4b49      	ldr	r3, [pc, #292]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b08      	cmp	r3, #8
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
 800254e:	4b46      	ldr	r3, [pc, #280]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b43      	ldr	r3, [pc, #268]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1c0      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3d      	ldr	r3, [pc, #244]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	695b      	ldr	r3, [r3, #20]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4939      	ldr	r1, [pc, #228]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b36      	ldr	r3, [pc, #216]	; (800266c <HAL_RCC_OscConfig+0x270>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002596:	f7fe ffcf 	bl	8001538 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe ffcb 	bl	8001538 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1a1      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2d      	ldr	r3, [pc, #180]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b2a      	ldr	r3, [pc, #168]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	695b      	ldr	r3, [r3, #20]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4927      	ldr	r1, [pc, #156]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b26      	ldr	r3, [pc, #152]	; (800266c <HAL_RCC_OscConfig+0x270>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025d8:	f7fe ffae 	bl	8001538 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe ffaa 	bl	8001538 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e180      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1d      	ldr	r3, [pc, #116]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d03a      	beq.n	8002680 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d019      	beq.n	8002646 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b17      	ldr	r3, [pc, #92]	; (8002670 <HAL_RCC_OscConfig+0x274>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002618:	f7fe ff8e 	bl	8001538 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe ff8a 	bl	8001538 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e160      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0d      	ldr	r3, [pc, #52]	; (8002668 <HAL_RCC_OscConfig+0x26c>)
 8002634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800263e:	2001      	movs	r0, #1
 8002640:	f000 faba 	bl	8002bb8 <RCC_Delay>
 8002644:	e01c      	b.n	8002680 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002646:	4b0a      	ldr	r3, [pc, #40]	; (8002670 <HAL_RCC_OscConfig+0x274>)
 8002648:	2200      	movs	r2, #0
 800264a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe ff74 	bl	8001538 <HAL_GetTick>
 8002650:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002652:	e00f      	b.n	8002674 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002654:	f7fe ff70 	bl	8001538 <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	1ad3      	subs	r3, r2, r3
 800265e:	2b02      	cmp	r3, #2
 8002660:	d908      	bls.n	8002674 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002662:	2303      	movs	r3, #3
 8002664:	e146      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
 8002666:	bf00      	nop
 8002668:	40021000 	.word	0x40021000
 800266c:	42420000 	.word	0x42420000
 8002670:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002674:	4b92      	ldr	r3, [pc, #584]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e9      	bne.n	8002654 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	f000 80a6 	beq.w	80027da <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800268e:	2300      	movs	r3, #0
 8002690:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002692:	4b8b      	ldr	r3, [pc, #556]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	69db      	ldr	r3, [r3, #28]
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10d      	bne.n	80026ba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800269e:	4b88      	ldr	r3, [pc, #544]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	69db      	ldr	r3, [r3, #28]
 80026a2:	4a87      	ldr	r2, [pc, #540]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a8:	61d3      	str	r3, [r2, #28]
 80026aa:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026b2:	60bb      	str	r3, [r7, #8]
 80026b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b6:	2301      	movs	r3, #1
 80026b8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	4b82      	ldr	r3, [pc, #520]	; (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d118      	bne.n	80026f8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c6:	4b7f      	ldr	r3, [pc, #508]	; (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a7e      	ldr	r2, [pc, #504]	; (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026d2:	f7fe ff31 	bl	8001538 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026da:	f7fe ff2d 	bl	8001538 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b64      	cmp	r3, #100	; 0x64
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e103      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ec:	4b75      	ldr	r3, [pc, #468]	; (80028c4 <HAL_RCC_OscConfig+0x4c8>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d0f0      	beq.n	80026da <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d106      	bne.n	800270e <HAL_RCC_OscConfig+0x312>
 8002700:	4b6f      	ldr	r3, [pc, #444]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4a6e      	ldr	r2, [pc, #440]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002706:	f043 0301 	orr.w	r3, r3, #1
 800270a:	6213      	str	r3, [r2, #32]
 800270c:	e02d      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10c      	bne.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002716:	4b6a      	ldr	r3, [pc, #424]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4a69      	ldr	r2, [pc, #420]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	f023 0301 	bic.w	r3, r3, #1
 8002720:	6213      	str	r3, [r2, #32]
 8002722:	4b67      	ldr	r3, [pc, #412]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	4a66      	ldr	r2, [pc, #408]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002728:	f023 0304 	bic.w	r3, r3, #4
 800272c:	6213      	str	r3, [r2, #32]
 800272e:	e01c      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b05      	cmp	r3, #5
 8002736:	d10c      	bne.n	8002752 <HAL_RCC_OscConfig+0x356>
 8002738:	4b61      	ldr	r3, [pc, #388]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800273a:	6a1b      	ldr	r3, [r3, #32]
 800273c:	4a60      	ldr	r2, [pc, #384]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800273e:	f043 0304 	orr.w	r3, r3, #4
 8002742:	6213      	str	r3, [r2, #32]
 8002744:	4b5e      	ldr	r3, [pc, #376]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e00b      	b.n	800276a <HAL_RCC_OscConfig+0x36e>
 8002752:	4b5b      	ldr	r3, [pc, #364]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	4a5a      	ldr	r2, [pc, #360]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 0301 	bic.w	r3, r3, #1
 800275c:	6213      	str	r3, [r2, #32]
 800275e:	4b58      	ldr	r3, [pc, #352]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	4a57      	ldr	r2, [pc, #348]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	f023 0304 	bic.w	r3, r3, #4
 8002768:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d015      	beq.n	800279e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002772:	f7fe fee1 	bl	8001538 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002778:	e00a      	b.n	8002790 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277a:	f7fe fedd 	bl	8001538 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	f241 3288 	movw	r2, #5000	; 0x1388
 8002788:	4293      	cmp	r3, r2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e0b1      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002790:	4b4b      	ldr	r3, [pc, #300]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002792:	6a1b      	ldr	r3, [r3, #32]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ee      	beq.n	800277a <HAL_RCC_OscConfig+0x37e>
 800279c:	e014      	b.n	80027c8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800279e:	f7fe fecb 	bl	8001538 <HAL_GetTick>
 80027a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027a4:	e00a      	b.n	80027bc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a6:	f7fe fec7 	bl	8001538 <HAL_GetTick>
 80027aa:	4602      	mov	r2, r0
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	1ad3      	subs	r3, r2, r3
 80027b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d901      	bls.n	80027bc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027b8:	2303      	movs	r3, #3
 80027ba:	e09b      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027bc:	4b40      	ldr	r3, [pc, #256]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1ee      	bne.n	80027a6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80027c8:	7dfb      	ldrb	r3, [r7, #23]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d105      	bne.n	80027da <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027ce:	4b3c      	ldr	r3, [pc, #240]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027d0:	69db      	ldr	r3, [r3, #28]
 80027d2:	4a3b      	ldr	r2, [pc, #236]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f000 8087 	beq.w	80028f2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027e4:	4b36      	ldr	r3, [pc, #216]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f003 030c 	and.w	r3, r3, #12
 80027ec:	2b08      	cmp	r3, #8
 80027ee:	d061      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d146      	bne.n	8002886 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f8:	4b33      	ldr	r3, [pc, #204]	; (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fe9b 	bl	8001538 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002804:	e008      	b.n	8002818 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002806:	f7fe fe97 	bl	8001538 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	2b02      	cmp	r3, #2
 8002812:	d901      	bls.n	8002818 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002814:	2303      	movs	r3, #3
 8002816:	e06d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002818:	4b29      	ldr	r3, [pc, #164]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1f0      	bne.n	8002806 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800282c:	d108      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800282e:	4b24      	ldr	r3, [pc, #144]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4921      	ldr	r1, [pc, #132]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002840:	4b1f      	ldr	r3, [pc, #124]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a19      	ldr	r1, [r3, #32]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002850:	430b      	orrs	r3, r1
 8002852:	491b      	ldr	r1, [pc, #108]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 8002854:	4313      	orrs	r3, r2
 8002856:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 800285a:	2201      	movs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800285e:	f7fe fe6b 	bl	8001538 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002866:	f7fe fe67 	bl	8001538 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e03d      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002878:	4b11      	ldr	r3, [pc, #68]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x46a>
 8002884:	e035      	b.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002886:	4b10      	ldr	r3, [pc, #64]	; (80028c8 <HAL_RCC_OscConfig+0x4cc>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fe54 	bl	8001538 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002894:	f7fe fe50 	bl	8001538 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e026      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	4b06      	ldr	r3, [pc, #24]	; (80028c0 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x498>
 80028b2:	e01e      	b.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d107      	bne.n	80028cc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e019      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40007000 	.word	0x40007000
 80028c8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x500>)
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d106      	bne.n	80028ee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000

08002900 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d101      	bne.n	8002914 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	e0d0      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002914:	4b6a      	ldr	r3, [pc, #424]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0307 	and.w	r3, r3, #7
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	429a      	cmp	r2, r3
 8002920:	d910      	bls.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002922:	4b67      	ldr	r3, [pc, #412]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f023 0207 	bic.w	r2, r3, #7
 800292a:	4965      	ldr	r1, [pc, #404]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	4313      	orrs	r3, r2
 8002930:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	4b63      	ldr	r3, [pc, #396]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	429a      	cmp	r2, r3
 800293e:	d001      	beq.n	8002944 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e0b8      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 0302 	and.w	r3, r3, #2
 800294c:	2b00      	cmp	r3, #0
 800294e:	d020      	beq.n	8002992 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0304 	and.w	r3, r3, #4
 8002958:	2b00      	cmp	r3, #0
 800295a:	d005      	beq.n	8002968 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800295c:	4b59      	ldr	r3, [pc, #356]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002966:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0308 	and.w	r3, r3, #8
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002974:	4b53      	ldr	r3, [pc, #332]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a52      	ldr	r2, [pc, #328]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800297a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800297e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002980:	4b50      	ldr	r3, [pc, #320]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	494d      	ldr	r1, [pc, #308]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 800298e:	4313      	orrs	r3, r2
 8002990:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b00      	cmp	r3, #0
 800299c:	d040      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	2b01      	cmp	r3, #1
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029a6:	4b47      	ldr	r3, [pc, #284]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d115      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e07f      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d107      	bne.n	80029ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029be:	4b41      	ldr	r3, [pc, #260]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e073      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ce:	4b3d      	ldr	r3, [pc, #244]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d101      	bne.n	80029de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e06b      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029de:	4b39      	ldr	r3, [pc, #228]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f023 0203 	bic.w	r2, r3, #3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	4936      	ldr	r1, [pc, #216]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029f0:	f7fe fda2 	bl	8001538 <HAL_GetTick>
 80029f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	e00a      	b.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f8:	f7fe fd9e 	bl	8001538 <HAL_GetTick>
 80029fc:	4602      	mov	r2, r0
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	1ad3      	subs	r3, r2, r3
 8002a02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e053      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0e:	4b2d      	ldr	r3, [pc, #180]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f003 020c 	and.w	r2, r3, #12
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	009b      	lsls	r3, r3, #2
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d1eb      	bne.n	80029f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a20:	4b27      	ldr	r3, [pc, #156]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f003 0307 	and.w	r3, r3, #7
 8002a28:	683a      	ldr	r2, [r7, #0]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d210      	bcs.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a2e:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f023 0207 	bic.w	r2, r3, #7
 8002a36:	4922      	ldr	r1, [pc, #136]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a3e:	4b20      	ldr	r3, [pc, #128]	; (8002ac0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	429a      	cmp	r2, r3
 8002a4a:	d001      	beq.n	8002a50 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e032      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d008      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a5c:	4b19      	ldr	r3, [pc, #100]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68db      	ldr	r3, [r3, #12]
 8002a68:	4916      	ldr	r1, [pc, #88]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 0308 	and.w	r3, r3, #8
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d009      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	490e      	ldr	r1, [pc, #56]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a8e:	f000 f821 	bl	8002ad4 <HAL_RCC_GetSysClockFreq>
 8002a92:	4602      	mov	r2, r0
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	490a      	ldr	r1, [pc, #40]	; (8002ac8 <HAL_RCC_ClockConfig+0x1c8>)
 8002aa0:	5ccb      	ldrb	r3, [r1, r3]
 8002aa2:	fa22 f303 	lsr.w	r3, r2, r3
 8002aa6:	4a09      	ldr	r2, [pc, #36]	; (8002acc <HAL_RCC_ClockConfig+0x1cc>)
 8002aa8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aaa:	4b09      	ldr	r3, [pc, #36]	; (8002ad0 <HAL_RCC_ClockConfig+0x1d0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fe fd00 	bl	80014b4 <HAL_InitTick>

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08005eb4 	.word	0x08005eb4
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000004 	.word	0x20000004

08002ad4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b087      	sub	sp, #28
 8002ad8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	2300      	movs	r3, #0
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002aea:	2300      	movs	r3, #0
 8002aec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002aee:	4b1e      	ldr	r3, [pc, #120]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d002      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x30>
 8002afe:	2b08      	cmp	r3, #8
 8002b00:	d003      	beq.n	8002b0a <HAL_RCC_GetSysClockFreq+0x36>
 8002b02:	e027      	b.n	8002b54 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b06:	613b      	str	r3, [r7, #16]
      break;
 8002b08:	e027      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	0c9b      	lsrs	r3, r3, #18
 8002b0e:	f003 030f 	and.w	r3, r3, #15
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b14:	5cd3      	ldrb	r3, [r2, r3]
 8002b16:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d010      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b22:	4b11      	ldr	r3, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x94>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	0c5b      	lsrs	r3, r3, #17
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	4a11      	ldr	r2, [pc, #68]	; (8002b74 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b2e:	5cd3      	ldrb	r3, [r2, r3]
 8002b30:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a0d      	ldr	r2, [pc, #52]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b36:	fb03 f202 	mul.w	r2, r3, r2
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	e004      	b.n	8002b4e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a0c      	ldr	r2, [pc, #48]	; (8002b78 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b48:	fb02 f303 	mul.w	r3, r2, r3
 8002b4c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	613b      	str	r3, [r7, #16]
      break;
 8002b52:	e002      	b.n	8002b5a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b54:	4b05      	ldr	r3, [pc, #20]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x98>)
 8002b56:	613b      	str	r3, [r7, #16]
      break;
 8002b58:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b5a:	693b      	ldr	r3, [r7, #16]
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	371c      	adds	r7, #28
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bc80      	pop	{r7}
 8002b64:	4770      	bx	lr
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	007a1200 	.word	0x007a1200
 8002b70:	08005ecc 	.word	0x08005ecc
 8002b74:	08005edc 	.word	0x08005edc
 8002b78:	003d0900 	.word	0x003d0900

08002b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b80:	4b02      	ldr	r3, [pc, #8]	; (8002b8c <HAL_RCC_GetHCLKFreq+0x10>)
 8002b82:	681b      	ldr	r3, [r3, #0]
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bc80      	pop	{r7}
 8002b8a:	4770      	bx	lr
 8002b8c:	20000000 	.word	0x20000000

08002b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b94:	f7ff fff2 	bl	8002b7c <HAL_RCC_GetHCLKFreq>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	0a1b      	lsrs	r3, r3, #8
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4903      	ldr	r1, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ba6:	5ccb      	ldrb	r3, [r1, r3]
 8002ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40021000 	.word	0x40021000
 8002bb4:	08005ec4 	.word	0x08005ec4

08002bb8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b085      	sub	sp, #20
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	; (8002bec <RCC_Delay+0x34>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4a0a      	ldr	r2, [pc, #40]	; (8002bf0 <RCC_Delay+0x38>)
 8002bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bca:	0a5b      	lsrs	r3, r3, #9
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	fb02 f303 	mul.w	r3, r2, r3
 8002bd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bd4:	bf00      	nop
  }
  while (Delay --);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e5a      	subs	r2, r3, #1
 8002bda:	60fa      	str	r2, [r7, #12]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d1f9      	bne.n	8002bd4 <RCC_Delay+0x1c>
}
 8002be0:	bf00      	nop
 8002be2:	bf00      	nop
 8002be4:	3714      	adds	r7, #20
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	10624dd3 	.word	0x10624dd3

08002bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e041      	b.n	8002c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d106      	bne.n	8002c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7fe fb04 	bl	8001228 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2202      	movs	r2, #2
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3304      	adds	r3, #4
 8002c30:	4619      	mov	r1, r3
 8002c32:	4610      	mov	r0, r2
 8002c34:	f000 f966 	bl	8002f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2201      	movs	r2, #1
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
	...

08002c94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b085      	sub	sp, #20
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d001      	beq.n	8002cac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e032      	b.n	8002d12 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2202      	movs	r2, #2
 8002cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a18      	ldr	r2, [pc, #96]	; (8002d1c <HAL_TIM_Base_Start+0x88>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d00e      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc6:	d009      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a14      	ldr	r2, [pc, #80]	; (8002d20 <HAL_TIM_Base_Start+0x8c>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d004      	beq.n	8002cdc <HAL_TIM_Base_Start+0x48>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a13      	ldr	r2, [pc, #76]	; (8002d24 <HAL_TIM_Base_Start+0x90>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d111      	bne.n	8002d00 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2b06      	cmp	r3, #6
 8002cec:	d010      	beq.n	8002d10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f042 0201 	orr.w	r2, r2, #1
 8002cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cfe:	e007      	b.n	8002d10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 0201 	orr.w	r2, r2, #1
 8002d0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr
 8002d1c:	40012c00 	.word	0x40012c00
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800

08002d28 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6a1a      	ldr	r2, [r3, #32]
 8002d36:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d10f      	bne.n	8002d60 <HAL_TIM_Base_Stop+0x38>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a1a      	ldr	r2, [r3, #32]
 8002d46:	f240 4344 	movw	r3, #1092	; 0x444
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_Base_Stop+0x38>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f022 0201 	bic.w	r2, r2, #1
 8002d5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x1c>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0b4      	b.n	8002efa <HAL_TIM_ConfigClockSource+0x186>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d03e      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0xd4>
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	f200 8087 	bhi.w	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	f000 8086 	beq.w	8002ee6 <HAL_TIM_ConfigClockSource+0x172>
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dde:	d87f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d01a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xa6>
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d87b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d050      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x11a>
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d877      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d03c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xfa>
 8002df4:	2b50      	cmp	r3, #80	; 0x50
 8002df6:	d873      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d058      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x13a>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d86f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d064      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d86b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d060      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d867      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d05a      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x15a>
 8002e18:	e062      	b.n	8002ee0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e2a:	f000 f944 	bl	80030b6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68ba      	ldr	r2, [r7, #8]
 8002e44:	609a      	str	r2, [r3, #8]
      break;
 8002e46:	e04f      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e58:	f000 f92d 	bl	80030b6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6a:	609a      	str	r2, [r3, #8]
      break;
 8002e6c:	e03c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 f8a4 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2150      	movs	r1, #80	; 0x50
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 f8fb 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e02c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 f8c2 	bl	8003024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2160      	movs	r1, #96	; 0x60
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 f8eb 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002eac:	e01c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 f884 	bl	8002fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f8db 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e00c      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 f8d2 	bl	8003082 <TIM_ITRx_SetConfig>
      break;
 8002ede:	e003      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee4:	e000      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ee6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3710      	adds	r7, #16
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a29      	ldr	r2, [pc, #164]	; (8002fbc <TIM_Base_SetConfig+0xb8>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00b      	beq.n	8002f34 <TIM_Base_SetConfig+0x30>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f22:	d007      	beq.n	8002f34 <TIM_Base_SetConfig+0x30>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a26      	ldr	r2, [pc, #152]	; (8002fc0 <TIM_Base_SetConfig+0xbc>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d003      	beq.n	8002f34 <TIM_Base_SetConfig+0x30>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	4a25      	ldr	r2, [pc, #148]	; (8002fc4 <TIM_Base_SetConfig+0xc0>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d108      	bne.n	8002f46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a1c      	ldr	r2, [pc, #112]	; (8002fbc <TIM_Base_SetConfig+0xb8>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00b      	beq.n	8002f66 <TIM_Base_SetConfig+0x62>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f54:	d007      	beq.n	8002f66 <TIM_Base_SetConfig+0x62>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a19      	ldr	r2, [pc, #100]	; (8002fc0 <TIM_Base_SetConfig+0xbc>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d003      	beq.n	8002f66 <TIM_Base_SetConfig+0x62>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a18      	ldr	r2, [pc, #96]	; (8002fc4 <TIM_Base_SetConfig+0xc0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d108      	bne.n	8002f78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	695b      	ldr	r3, [r3, #20]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a07      	ldr	r2, [pc, #28]	; (8002fbc <TIM_Base_SetConfig+0xb8>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d103      	bne.n	8002fac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	615a      	str	r2, [r3, #20]
}
 8002fb2:	bf00      	nop
 8002fb4:	3714      	adds	r7, #20
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bc80      	pop	{r7}
 8002fba:	4770      	bx	lr
 8002fbc:	40012c00 	.word	0x40012c00
 8002fc0:	40000400 	.word	0x40000400
 8002fc4:	40000800 	.word	0x40000800

08002fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b087      	sub	sp, #28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	6a1b      	ldr	r3, [r3, #32]
 8002fde:	f023 0201 	bic.w	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	699b      	ldr	r3, [r3, #24]
 8002fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	011b      	lsls	r3, r3, #4
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f023 030a 	bic.w	r3, r3, #10
 8003004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4313      	orrs	r3, r2
 800300c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	693a      	ldr	r2, [r7, #16]
 8003012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	621a      	str	r2, [r3, #32]
}
 800301a:	bf00      	nop
 800301c:	371c      	adds	r7, #28
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003024:	b480      	push	{r7}
 8003026:	b087      	sub	sp, #28
 8003028:	af00      	add	r7, sp, #0
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	60b9      	str	r1, [r7, #8]
 800302e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a1b      	ldr	r3, [r3, #32]
 8003034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	f023 0210 	bic.w	r2, r3, #16
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800304e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	031b      	lsls	r3, r3, #12
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	697a      	ldr	r2, [r7, #20]
 8003068:	4313      	orrs	r3, r2
 800306a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	693a      	ldr	r2, [r7, #16]
 8003070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	621a      	str	r2, [r3, #32]
}
 8003078:	bf00      	nop
 800307a:	371c      	adds	r7, #28
 800307c:	46bd      	mov	sp, r7
 800307e:	bc80      	pop	{r7}
 8003080:	4770      	bx	lr

08003082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003082:	b480      	push	{r7}
 8003084:	b085      	sub	sp, #20
 8003086:	af00      	add	r7, sp, #0
 8003088:	6078      	str	r0, [r7, #4]
 800308a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800309a:	683a      	ldr	r2, [r7, #0]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	4313      	orrs	r3, r2
 80030a0:	f043 0307 	orr.w	r3, r3, #7
 80030a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	609a      	str	r2, [r3, #8]
}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bc80      	pop	{r7}
 80030b4:	4770      	bx	lr

080030b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030b6:	b480      	push	{r7}
 80030b8:	b087      	sub	sp, #28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	60f8      	str	r0, [r7, #12]
 80030be:	60b9      	str	r1, [r7, #8]
 80030c0:	607a      	str	r2, [r7, #4]
 80030c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ca:	697b      	ldr	r3, [r7, #20]
 80030cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	021a      	lsls	r2, r3, #8
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	431a      	orrs	r2, r3
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4313      	orrs	r3, r2
 80030de:	697a      	ldr	r2, [r7, #20]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	697a      	ldr	r2, [r7, #20]
 80030e8:	609a      	str	r2, [r3, #8]
}
 80030ea:	bf00      	nop
 80030ec:	371c      	adds	r7, #28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bc80      	pop	{r7}
 80030f2:	4770      	bx	lr

080030f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b085      	sub	sp, #20
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003108:	2302      	movs	r3, #2
 800310a:	e046      	b.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2202      	movs	r2, #2
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	68fa      	ldr	r2, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a16      	ldr	r2, [pc, #88]	; (80031a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003158:	d009      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a12      	ldr	r2, [pc, #72]	; (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a10      	ldr	r2, [pc, #64]	; (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40012c00 	.word	0x40012c00
 80031a8:	40000400 	.word	0x40000400
 80031ac:	40000800 	.word	0x40000800

080031b0 <__cvt>:
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80031b6:	461f      	mov	r7, r3
 80031b8:	bfbb      	ittet	lt
 80031ba:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80031be:	461f      	movlt	r7, r3
 80031c0:	2300      	movge	r3, #0
 80031c2:	232d      	movlt	r3, #45	; 0x2d
 80031c4:	b088      	sub	sp, #32
 80031c6:	4614      	mov	r4, r2
 80031c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80031ca:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80031cc:	7013      	strb	r3, [r2, #0]
 80031ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80031d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80031d4:	f023 0820 	bic.w	r8, r3, #32
 80031d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80031dc:	d005      	beq.n	80031ea <__cvt+0x3a>
 80031de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80031e2:	d100      	bne.n	80031e6 <__cvt+0x36>
 80031e4:	3501      	adds	r5, #1
 80031e6:	2302      	movs	r3, #2
 80031e8:	e000      	b.n	80031ec <__cvt+0x3c>
 80031ea:	2303      	movs	r3, #3
 80031ec:	aa07      	add	r2, sp, #28
 80031ee:	9204      	str	r2, [sp, #16]
 80031f0:	aa06      	add	r2, sp, #24
 80031f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80031f6:	e9cd 3500 	strd	r3, r5, [sp]
 80031fa:	4622      	mov	r2, r4
 80031fc:	463b      	mov	r3, r7
 80031fe:	f000 fe5f 	bl	8003ec0 <_dtoa_r>
 8003202:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003206:	4606      	mov	r6, r0
 8003208:	d102      	bne.n	8003210 <__cvt+0x60>
 800320a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800320c:	07db      	lsls	r3, r3, #31
 800320e:	d522      	bpl.n	8003256 <__cvt+0xa6>
 8003210:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003214:	eb06 0905 	add.w	r9, r6, r5
 8003218:	d110      	bne.n	800323c <__cvt+0x8c>
 800321a:	7833      	ldrb	r3, [r6, #0]
 800321c:	2b30      	cmp	r3, #48	; 0x30
 800321e:	d10a      	bne.n	8003236 <__cvt+0x86>
 8003220:	2200      	movs	r2, #0
 8003222:	2300      	movs	r3, #0
 8003224:	4620      	mov	r0, r4
 8003226:	4639      	mov	r1, r7
 8003228:	f7fd fbbe 	bl	80009a8 <__aeabi_dcmpeq>
 800322c:	b918      	cbnz	r0, 8003236 <__cvt+0x86>
 800322e:	f1c5 0501 	rsb	r5, r5, #1
 8003232:	f8ca 5000 	str.w	r5, [sl]
 8003236:	f8da 3000 	ldr.w	r3, [sl]
 800323a:	4499      	add	r9, r3
 800323c:	2200      	movs	r2, #0
 800323e:	2300      	movs	r3, #0
 8003240:	4620      	mov	r0, r4
 8003242:	4639      	mov	r1, r7
 8003244:	f7fd fbb0 	bl	80009a8 <__aeabi_dcmpeq>
 8003248:	b108      	cbz	r0, 800324e <__cvt+0x9e>
 800324a:	f8cd 901c 	str.w	r9, [sp, #28]
 800324e:	2230      	movs	r2, #48	; 0x30
 8003250:	9b07      	ldr	r3, [sp, #28]
 8003252:	454b      	cmp	r3, r9
 8003254:	d307      	bcc.n	8003266 <__cvt+0xb6>
 8003256:	4630      	mov	r0, r6
 8003258:	9b07      	ldr	r3, [sp, #28]
 800325a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800325c:	1b9b      	subs	r3, r3, r6
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	b008      	add	sp, #32
 8003262:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	9107      	str	r1, [sp, #28]
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	e7f0      	b.n	8003250 <__cvt+0xa0>

0800326e <__exponent>:
 800326e:	4603      	mov	r3, r0
 8003270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003272:	2900      	cmp	r1, #0
 8003274:	f803 2b02 	strb.w	r2, [r3], #2
 8003278:	bfb6      	itet	lt
 800327a:	222d      	movlt	r2, #45	; 0x2d
 800327c:	222b      	movge	r2, #43	; 0x2b
 800327e:	4249      	neglt	r1, r1
 8003280:	2909      	cmp	r1, #9
 8003282:	7042      	strb	r2, [r0, #1]
 8003284:	dd2a      	ble.n	80032dc <__exponent+0x6e>
 8003286:	f10d 0207 	add.w	r2, sp, #7
 800328a:	4617      	mov	r7, r2
 800328c:	260a      	movs	r6, #10
 800328e:	fb91 f5f6 	sdiv	r5, r1, r6
 8003292:	4694      	mov	ip, r2
 8003294:	fb06 1415 	mls	r4, r6, r5, r1
 8003298:	3430      	adds	r4, #48	; 0x30
 800329a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800329e:	460c      	mov	r4, r1
 80032a0:	2c63      	cmp	r4, #99	; 0x63
 80032a2:	4629      	mov	r1, r5
 80032a4:	f102 32ff 	add.w	r2, r2, #4294967295
 80032a8:	dcf1      	bgt.n	800328e <__exponent+0x20>
 80032aa:	3130      	adds	r1, #48	; 0x30
 80032ac:	f1ac 0402 	sub.w	r4, ip, #2
 80032b0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80032b4:	4622      	mov	r2, r4
 80032b6:	1c41      	adds	r1, r0, #1
 80032b8:	42ba      	cmp	r2, r7
 80032ba:	d30a      	bcc.n	80032d2 <__exponent+0x64>
 80032bc:	f10d 0209 	add.w	r2, sp, #9
 80032c0:	eba2 020c 	sub.w	r2, r2, ip
 80032c4:	42bc      	cmp	r4, r7
 80032c6:	bf88      	it	hi
 80032c8:	2200      	movhi	r2, #0
 80032ca:	4413      	add	r3, r2
 80032cc:	1a18      	subs	r0, r3, r0
 80032ce:	b003      	add	sp, #12
 80032d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032d2:	f812 5b01 	ldrb.w	r5, [r2], #1
 80032d6:	f801 5f01 	strb.w	r5, [r1, #1]!
 80032da:	e7ed      	b.n	80032b8 <__exponent+0x4a>
 80032dc:	2330      	movs	r3, #48	; 0x30
 80032de:	3130      	adds	r1, #48	; 0x30
 80032e0:	7083      	strb	r3, [r0, #2]
 80032e2:	70c1      	strb	r1, [r0, #3]
 80032e4:	1d03      	adds	r3, r0, #4
 80032e6:	e7f1      	b.n	80032cc <__exponent+0x5e>

080032e8 <_printf_float>:
 80032e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032ec:	b091      	sub	sp, #68	; 0x44
 80032ee:	460c      	mov	r4, r1
 80032f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80032f4:	4616      	mov	r6, r2
 80032f6:	461f      	mov	r7, r3
 80032f8:	4605      	mov	r5, r0
 80032fa:	f000 fcd3 	bl	8003ca4 <_localeconv_r>
 80032fe:	6803      	ldr	r3, [r0, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	9309      	str	r3, [sp, #36]	; 0x24
 8003304:	f7fc ff24 	bl	8000150 <strlen>
 8003308:	2300      	movs	r3, #0
 800330a:	930e      	str	r3, [sp, #56]	; 0x38
 800330c:	f8d8 3000 	ldr.w	r3, [r8]
 8003310:	900a      	str	r0, [sp, #40]	; 0x28
 8003312:	3307      	adds	r3, #7
 8003314:	f023 0307 	bic.w	r3, r3, #7
 8003318:	f103 0208 	add.w	r2, r3, #8
 800331c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003320:	f8d4 b000 	ldr.w	fp, [r4]
 8003324:	f8c8 2000 	str.w	r2, [r8]
 8003328:	e9d3 a800 	ldrd	sl, r8, [r3]
 800332c:	4652      	mov	r2, sl
 800332e:	4643      	mov	r3, r8
 8003330:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003334:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003338:	930b      	str	r3, [sp, #44]	; 0x2c
 800333a:	f04f 32ff 	mov.w	r2, #4294967295
 800333e:	4650      	mov	r0, sl
 8003340:	4b9c      	ldr	r3, [pc, #624]	; (80035b4 <_printf_float+0x2cc>)
 8003342:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003344:	f7fd fb62 	bl	8000a0c <__aeabi_dcmpun>
 8003348:	bb70      	cbnz	r0, 80033a8 <_printf_float+0xc0>
 800334a:	f04f 32ff 	mov.w	r2, #4294967295
 800334e:	4650      	mov	r0, sl
 8003350:	4b98      	ldr	r3, [pc, #608]	; (80035b4 <_printf_float+0x2cc>)
 8003352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003354:	f7fd fb3c 	bl	80009d0 <__aeabi_dcmple>
 8003358:	bb30      	cbnz	r0, 80033a8 <_printf_float+0xc0>
 800335a:	2200      	movs	r2, #0
 800335c:	2300      	movs	r3, #0
 800335e:	4650      	mov	r0, sl
 8003360:	4641      	mov	r1, r8
 8003362:	f7fd fb2b 	bl	80009bc <__aeabi_dcmplt>
 8003366:	b110      	cbz	r0, 800336e <_printf_float+0x86>
 8003368:	232d      	movs	r3, #45	; 0x2d
 800336a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800336e:	4a92      	ldr	r2, [pc, #584]	; (80035b8 <_printf_float+0x2d0>)
 8003370:	4b92      	ldr	r3, [pc, #584]	; (80035bc <_printf_float+0x2d4>)
 8003372:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003376:	bf94      	ite	ls
 8003378:	4690      	movls	r8, r2
 800337a:	4698      	movhi	r8, r3
 800337c:	2303      	movs	r3, #3
 800337e:	f04f 0a00 	mov.w	sl, #0
 8003382:	6123      	str	r3, [r4, #16]
 8003384:	f02b 0304 	bic.w	r3, fp, #4
 8003388:	6023      	str	r3, [r4, #0]
 800338a:	4633      	mov	r3, r6
 800338c:	4621      	mov	r1, r4
 800338e:	4628      	mov	r0, r5
 8003390:	9700      	str	r7, [sp, #0]
 8003392:	aa0f      	add	r2, sp, #60	; 0x3c
 8003394:	f000 f9d6 	bl	8003744 <_printf_common>
 8003398:	3001      	adds	r0, #1
 800339a:	f040 8090 	bne.w	80034be <_printf_float+0x1d6>
 800339e:	f04f 30ff 	mov.w	r0, #4294967295
 80033a2:	b011      	add	sp, #68	; 0x44
 80033a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033a8:	4652      	mov	r2, sl
 80033aa:	4643      	mov	r3, r8
 80033ac:	4650      	mov	r0, sl
 80033ae:	4641      	mov	r1, r8
 80033b0:	f7fd fb2c 	bl	8000a0c <__aeabi_dcmpun>
 80033b4:	b148      	cbz	r0, 80033ca <_printf_float+0xe2>
 80033b6:	f1b8 0f00 	cmp.w	r8, #0
 80033ba:	bfb8      	it	lt
 80033bc:	232d      	movlt	r3, #45	; 0x2d
 80033be:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <_printf_float+0x2d8>)
 80033c0:	bfb8      	it	lt
 80033c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80033c6:	4b7f      	ldr	r3, [pc, #508]	; (80035c4 <_printf_float+0x2dc>)
 80033c8:	e7d3      	b.n	8003372 <_printf_float+0x8a>
 80033ca:	6863      	ldr	r3, [r4, #4]
 80033cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80033d0:	1c5a      	adds	r2, r3, #1
 80033d2:	d142      	bne.n	800345a <_printf_float+0x172>
 80033d4:	2306      	movs	r3, #6
 80033d6:	6063      	str	r3, [r4, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	9206      	str	r2, [sp, #24]
 80033dc:	aa0e      	add	r2, sp, #56	; 0x38
 80033de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80033e2:	aa0d      	add	r2, sp, #52	; 0x34
 80033e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80033e8:	9203      	str	r2, [sp, #12]
 80033ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80033ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80033f2:	6023      	str	r3, [r4, #0]
 80033f4:	6863      	ldr	r3, [r4, #4]
 80033f6:	4652      	mov	r2, sl
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	4628      	mov	r0, r5
 80033fc:	4643      	mov	r3, r8
 80033fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8003400:	f7ff fed6 	bl	80031b0 <__cvt>
 8003404:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003406:	4680      	mov	r8, r0
 8003408:	2947      	cmp	r1, #71	; 0x47
 800340a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800340c:	d108      	bne.n	8003420 <_printf_float+0x138>
 800340e:	1cc8      	adds	r0, r1, #3
 8003410:	db02      	blt.n	8003418 <_printf_float+0x130>
 8003412:	6863      	ldr	r3, [r4, #4]
 8003414:	4299      	cmp	r1, r3
 8003416:	dd40      	ble.n	800349a <_printf_float+0x1b2>
 8003418:	f1a9 0902 	sub.w	r9, r9, #2
 800341c:	fa5f f989 	uxtb.w	r9, r9
 8003420:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003424:	d81f      	bhi.n	8003466 <_printf_float+0x17e>
 8003426:	464a      	mov	r2, r9
 8003428:	3901      	subs	r1, #1
 800342a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800342e:	910d      	str	r1, [sp, #52]	; 0x34
 8003430:	f7ff ff1d 	bl	800326e <__exponent>
 8003434:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003436:	4682      	mov	sl, r0
 8003438:	1813      	adds	r3, r2, r0
 800343a:	2a01      	cmp	r2, #1
 800343c:	6123      	str	r3, [r4, #16]
 800343e:	dc02      	bgt.n	8003446 <_printf_float+0x15e>
 8003440:	6822      	ldr	r2, [r4, #0]
 8003442:	07d2      	lsls	r2, r2, #31
 8003444:	d501      	bpl.n	800344a <_printf_float+0x162>
 8003446:	3301      	adds	r3, #1
 8003448:	6123      	str	r3, [r4, #16]
 800344a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800344e:	2b00      	cmp	r3, #0
 8003450:	d09b      	beq.n	800338a <_printf_float+0xa2>
 8003452:	232d      	movs	r3, #45	; 0x2d
 8003454:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003458:	e797      	b.n	800338a <_printf_float+0xa2>
 800345a:	2947      	cmp	r1, #71	; 0x47
 800345c:	d1bc      	bne.n	80033d8 <_printf_float+0xf0>
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ba      	bne.n	80033d8 <_printf_float+0xf0>
 8003462:	2301      	movs	r3, #1
 8003464:	e7b7      	b.n	80033d6 <_printf_float+0xee>
 8003466:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800346a:	d118      	bne.n	800349e <_printf_float+0x1b6>
 800346c:	2900      	cmp	r1, #0
 800346e:	6863      	ldr	r3, [r4, #4]
 8003470:	dd0b      	ble.n	800348a <_printf_float+0x1a2>
 8003472:	6121      	str	r1, [r4, #16]
 8003474:	b913      	cbnz	r3, 800347c <_printf_float+0x194>
 8003476:	6822      	ldr	r2, [r4, #0]
 8003478:	07d0      	lsls	r0, r2, #31
 800347a:	d502      	bpl.n	8003482 <_printf_float+0x19a>
 800347c:	3301      	adds	r3, #1
 800347e:	440b      	add	r3, r1
 8003480:	6123      	str	r3, [r4, #16]
 8003482:	f04f 0a00 	mov.w	sl, #0
 8003486:	65a1      	str	r1, [r4, #88]	; 0x58
 8003488:	e7df      	b.n	800344a <_printf_float+0x162>
 800348a:	b913      	cbnz	r3, 8003492 <_printf_float+0x1aa>
 800348c:	6822      	ldr	r2, [r4, #0]
 800348e:	07d2      	lsls	r2, r2, #31
 8003490:	d501      	bpl.n	8003496 <_printf_float+0x1ae>
 8003492:	3302      	adds	r3, #2
 8003494:	e7f4      	b.n	8003480 <_printf_float+0x198>
 8003496:	2301      	movs	r3, #1
 8003498:	e7f2      	b.n	8003480 <_printf_float+0x198>
 800349a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800349e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034a0:	4299      	cmp	r1, r3
 80034a2:	db05      	blt.n	80034b0 <_printf_float+0x1c8>
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	6121      	str	r1, [r4, #16]
 80034a8:	07d8      	lsls	r0, r3, #31
 80034aa:	d5ea      	bpl.n	8003482 <_printf_float+0x19a>
 80034ac:	1c4b      	adds	r3, r1, #1
 80034ae:	e7e7      	b.n	8003480 <_printf_float+0x198>
 80034b0:	2900      	cmp	r1, #0
 80034b2:	bfcc      	ite	gt
 80034b4:	2201      	movgt	r2, #1
 80034b6:	f1c1 0202 	rsble	r2, r1, #2
 80034ba:	4413      	add	r3, r2
 80034bc:	e7e0      	b.n	8003480 <_printf_float+0x198>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	055a      	lsls	r2, r3, #21
 80034c2:	d407      	bmi.n	80034d4 <_printf_float+0x1ec>
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	4642      	mov	r2, r8
 80034c8:	4631      	mov	r1, r6
 80034ca:	4628      	mov	r0, r5
 80034cc:	47b8      	blx	r7
 80034ce:	3001      	adds	r0, #1
 80034d0:	d12b      	bne.n	800352a <_printf_float+0x242>
 80034d2:	e764      	b.n	800339e <_printf_float+0xb6>
 80034d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80034d8:	f240 80dd 	bls.w	8003696 <_printf_float+0x3ae>
 80034dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80034e0:	2200      	movs	r2, #0
 80034e2:	2300      	movs	r3, #0
 80034e4:	f7fd fa60 	bl	80009a8 <__aeabi_dcmpeq>
 80034e8:	2800      	cmp	r0, #0
 80034ea:	d033      	beq.n	8003554 <_printf_float+0x26c>
 80034ec:	2301      	movs	r3, #1
 80034ee:	4631      	mov	r1, r6
 80034f0:	4628      	mov	r0, r5
 80034f2:	4a35      	ldr	r2, [pc, #212]	; (80035c8 <_printf_float+0x2e0>)
 80034f4:	47b8      	blx	r7
 80034f6:	3001      	adds	r0, #1
 80034f8:	f43f af51 	beq.w	800339e <_printf_float+0xb6>
 80034fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003500:	429a      	cmp	r2, r3
 8003502:	db02      	blt.n	800350a <_printf_float+0x222>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	07d8      	lsls	r0, r3, #31
 8003508:	d50f      	bpl.n	800352a <_printf_float+0x242>
 800350a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800350e:	4631      	mov	r1, r6
 8003510:	4628      	mov	r0, r5
 8003512:	47b8      	blx	r7
 8003514:	3001      	adds	r0, #1
 8003516:	f43f af42 	beq.w	800339e <_printf_float+0xb6>
 800351a:	f04f 0800 	mov.w	r8, #0
 800351e:	f104 091a 	add.w	r9, r4, #26
 8003522:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003524:	3b01      	subs	r3, #1
 8003526:	4543      	cmp	r3, r8
 8003528:	dc09      	bgt.n	800353e <_printf_float+0x256>
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	079b      	lsls	r3, r3, #30
 800352e:	f100 8104 	bmi.w	800373a <_printf_float+0x452>
 8003532:	68e0      	ldr	r0, [r4, #12]
 8003534:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003536:	4298      	cmp	r0, r3
 8003538:	bfb8      	it	lt
 800353a:	4618      	movlt	r0, r3
 800353c:	e731      	b.n	80033a2 <_printf_float+0xba>
 800353e:	2301      	movs	r3, #1
 8003540:	464a      	mov	r2, r9
 8003542:	4631      	mov	r1, r6
 8003544:	4628      	mov	r0, r5
 8003546:	47b8      	blx	r7
 8003548:	3001      	adds	r0, #1
 800354a:	f43f af28 	beq.w	800339e <_printf_float+0xb6>
 800354e:	f108 0801 	add.w	r8, r8, #1
 8003552:	e7e6      	b.n	8003522 <_printf_float+0x23a>
 8003554:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003556:	2b00      	cmp	r3, #0
 8003558:	dc38      	bgt.n	80035cc <_printf_float+0x2e4>
 800355a:	2301      	movs	r3, #1
 800355c:	4631      	mov	r1, r6
 800355e:	4628      	mov	r0, r5
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <_printf_float+0x2e0>)
 8003562:	47b8      	blx	r7
 8003564:	3001      	adds	r0, #1
 8003566:	f43f af1a 	beq.w	800339e <_printf_float+0xb6>
 800356a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800356e:	4313      	orrs	r3, r2
 8003570:	d102      	bne.n	8003578 <_printf_float+0x290>
 8003572:	6823      	ldr	r3, [r4, #0]
 8003574:	07d9      	lsls	r1, r3, #31
 8003576:	d5d8      	bpl.n	800352a <_printf_float+0x242>
 8003578:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800357c:	4631      	mov	r1, r6
 800357e:	4628      	mov	r0, r5
 8003580:	47b8      	blx	r7
 8003582:	3001      	adds	r0, #1
 8003584:	f43f af0b 	beq.w	800339e <_printf_float+0xb6>
 8003588:	f04f 0900 	mov.w	r9, #0
 800358c:	f104 0a1a 	add.w	sl, r4, #26
 8003590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003592:	425b      	negs	r3, r3
 8003594:	454b      	cmp	r3, r9
 8003596:	dc01      	bgt.n	800359c <_printf_float+0x2b4>
 8003598:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800359a:	e794      	b.n	80034c6 <_printf_float+0x1de>
 800359c:	2301      	movs	r3, #1
 800359e:	4652      	mov	r2, sl
 80035a0:	4631      	mov	r1, r6
 80035a2:	4628      	mov	r0, r5
 80035a4:	47b8      	blx	r7
 80035a6:	3001      	adds	r0, #1
 80035a8:	f43f aef9 	beq.w	800339e <_printf_float+0xb6>
 80035ac:	f109 0901 	add.w	r9, r9, #1
 80035b0:	e7ee      	b.n	8003590 <_printf_float+0x2a8>
 80035b2:	bf00      	nop
 80035b4:	7fefffff 	.word	0x7fefffff
 80035b8:	08005ede 	.word	0x08005ede
 80035bc:	08005ee2 	.word	0x08005ee2
 80035c0:	08005ee6 	.word	0x08005ee6
 80035c4:	08005eea 	.word	0x08005eea
 80035c8:	08005eee 	.word	0x08005eee
 80035cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80035ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80035d0:	429a      	cmp	r2, r3
 80035d2:	bfa8      	it	ge
 80035d4:	461a      	movge	r2, r3
 80035d6:	2a00      	cmp	r2, #0
 80035d8:	4691      	mov	r9, r2
 80035da:	dc37      	bgt.n	800364c <_printf_float+0x364>
 80035dc:	f04f 0b00 	mov.w	fp, #0
 80035e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80035e4:	f104 021a 	add.w	r2, r4, #26
 80035e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80035ec:	ebaa 0309 	sub.w	r3, sl, r9
 80035f0:	455b      	cmp	r3, fp
 80035f2:	dc33      	bgt.n	800365c <_printf_float+0x374>
 80035f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80035f8:	429a      	cmp	r2, r3
 80035fa:	db3b      	blt.n	8003674 <_printf_float+0x38c>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	07da      	lsls	r2, r3, #31
 8003600:	d438      	bmi.n	8003674 <_printf_float+0x38c>
 8003602:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8003606:	eba2 0903 	sub.w	r9, r2, r3
 800360a:	eba2 020a 	sub.w	r2, r2, sl
 800360e:	4591      	cmp	r9, r2
 8003610:	bfa8      	it	ge
 8003612:	4691      	movge	r9, r2
 8003614:	f1b9 0f00 	cmp.w	r9, #0
 8003618:	dc34      	bgt.n	8003684 <_printf_float+0x39c>
 800361a:	f04f 0800 	mov.w	r8, #0
 800361e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003622:	f104 0a1a 	add.w	sl, r4, #26
 8003626:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	eba3 0309 	sub.w	r3, r3, r9
 8003630:	4543      	cmp	r3, r8
 8003632:	f77f af7a 	ble.w	800352a <_printf_float+0x242>
 8003636:	2301      	movs	r3, #1
 8003638:	4652      	mov	r2, sl
 800363a:	4631      	mov	r1, r6
 800363c:	4628      	mov	r0, r5
 800363e:	47b8      	blx	r7
 8003640:	3001      	adds	r0, #1
 8003642:	f43f aeac 	beq.w	800339e <_printf_float+0xb6>
 8003646:	f108 0801 	add.w	r8, r8, #1
 800364a:	e7ec      	b.n	8003626 <_printf_float+0x33e>
 800364c:	4613      	mov	r3, r2
 800364e:	4631      	mov	r1, r6
 8003650:	4642      	mov	r2, r8
 8003652:	4628      	mov	r0, r5
 8003654:	47b8      	blx	r7
 8003656:	3001      	adds	r0, #1
 8003658:	d1c0      	bne.n	80035dc <_printf_float+0x2f4>
 800365a:	e6a0      	b.n	800339e <_printf_float+0xb6>
 800365c:	2301      	movs	r3, #1
 800365e:	4631      	mov	r1, r6
 8003660:	4628      	mov	r0, r5
 8003662:	920b      	str	r2, [sp, #44]	; 0x2c
 8003664:	47b8      	blx	r7
 8003666:	3001      	adds	r0, #1
 8003668:	f43f ae99 	beq.w	800339e <_printf_float+0xb6>
 800366c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800366e:	f10b 0b01 	add.w	fp, fp, #1
 8003672:	e7b9      	b.n	80035e8 <_printf_float+0x300>
 8003674:	4631      	mov	r1, r6
 8003676:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800367a:	4628      	mov	r0, r5
 800367c:	47b8      	blx	r7
 800367e:	3001      	adds	r0, #1
 8003680:	d1bf      	bne.n	8003602 <_printf_float+0x31a>
 8003682:	e68c      	b.n	800339e <_printf_float+0xb6>
 8003684:	464b      	mov	r3, r9
 8003686:	4631      	mov	r1, r6
 8003688:	4628      	mov	r0, r5
 800368a:	eb08 020a 	add.w	r2, r8, sl
 800368e:	47b8      	blx	r7
 8003690:	3001      	adds	r0, #1
 8003692:	d1c2      	bne.n	800361a <_printf_float+0x332>
 8003694:	e683      	b.n	800339e <_printf_float+0xb6>
 8003696:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003698:	2a01      	cmp	r2, #1
 800369a:	dc01      	bgt.n	80036a0 <_printf_float+0x3b8>
 800369c:	07db      	lsls	r3, r3, #31
 800369e:	d539      	bpl.n	8003714 <_printf_float+0x42c>
 80036a0:	2301      	movs	r3, #1
 80036a2:	4642      	mov	r2, r8
 80036a4:	4631      	mov	r1, r6
 80036a6:	4628      	mov	r0, r5
 80036a8:	47b8      	blx	r7
 80036aa:	3001      	adds	r0, #1
 80036ac:	f43f ae77 	beq.w	800339e <_printf_float+0xb6>
 80036b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80036b4:	4631      	mov	r1, r6
 80036b6:	4628      	mov	r0, r5
 80036b8:	47b8      	blx	r7
 80036ba:	3001      	adds	r0, #1
 80036bc:	f43f ae6f 	beq.w	800339e <_printf_float+0xb6>
 80036c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80036c4:	2200      	movs	r2, #0
 80036c6:	2300      	movs	r3, #0
 80036c8:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 80036cc:	f7fd f96c 	bl	80009a8 <__aeabi_dcmpeq>
 80036d0:	b9d8      	cbnz	r0, 800370a <_printf_float+0x422>
 80036d2:	f109 33ff 	add.w	r3, r9, #4294967295
 80036d6:	f108 0201 	add.w	r2, r8, #1
 80036da:	4631      	mov	r1, r6
 80036dc:	4628      	mov	r0, r5
 80036de:	47b8      	blx	r7
 80036e0:	3001      	adds	r0, #1
 80036e2:	d10e      	bne.n	8003702 <_printf_float+0x41a>
 80036e4:	e65b      	b.n	800339e <_printf_float+0xb6>
 80036e6:	2301      	movs	r3, #1
 80036e8:	464a      	mov	r2, r9
 80036ea:	4631      	mov	r1, r6
 80036ec:	4628      	mov	r0, r5
 80036ee:	47b8      	blx	r7
 80036f0:	3001      	adds	r0, #1
 80036f2:	f43f ae54 	beq.w	800339e <_printf_float+0xb6>
 80036f6:	f108 0801 	add.w	r8, r8, #1
 80036fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80036fc:	3b01      	subs	r3, #1
 80036fe:	4543      	cmp	r3, r8
 8003700:	dcf1      	bgt.n	80036e6 <_printf_float+0x3fe>
 8003702:	4653      	mov	r3, sl
 8003704:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003708:	e6de      	b.n	80034c8 <_printf_float+0x1e0>
 800370a:	f04f 0800 	mov.w	r8, #0
 800370e:	f104 091a 	add.w	r9, r4, #26
 8003712:	e7f2      	b.n	80036fa <_printf_float+0x412>
 8003714:	2301      	movs	r3, #1
 8003716:	4642      	mov	r2, r8
 8003718:	e7df      	b.n	80036da <_printf_float+0x3f2>
 800371a:	2301      	movs	r3, #1
 800371c:	464a      	mov	r2, r9
 800371e:	4631      	mov	r1, r6
 8003720:	4628      	mov	r0, r5
 8003722:	47b8      	blx	r7
 8003724:	3001      	adds	r0, #1
 8003726:	f43f ae3a 	beq.w	800339e <_printf_float+0xb6>
 800372a:	f108 0801 	add.w	r8, r8, #1
 800372e:	68e3      	ldr	r3, [r4, #12]
 8003730:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003732:	1a5b      	subs	r3, r3, r1
 8003734:	4543      	cmp	r3, r8
 8003736:	dcf0      	bgt.n	800371a <_printf_float+0x432>
 8003738:	e6fb      	b.n	8003532 <_printf_float+0x24a>
 800373a:	f04f 0800 	mov.w	r8, #0
 800373e:	f104 0919 	add.w	r9, r4, #25
 8003742:	e7f4      	b.n	800372e <_printf_float+0x446>

08003744 <_printf_common>:
 8003744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003748:	4616      	mov	r6, r2
 800374a:	4699      	mov	r9, r3
 800374c:	688a      	ldr	r2, [r1, #8]
 800374e:	690b      	ldr	r3, [r1, #16]
 8003750:	4607      	mov	r7, r0
 8003752:	4293      	cmp	r3, r2
 8003754:	bfb8      	it	lt
 8003756:	4613      	movlt	r3, r2
 8003758:	6033      	str	r3, [r6, #0]
 800375a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800375e:	460c      	mov	r4, r1
 8003760:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003764:	b10a      	cbz	r2, 800376a <_printf_common+0x26>
 8003766:	3301      	adds	r3, #1
 8003768:	6033      	str	r3, [r6, #0]
 800376a:	6823      	ldr	r3, [r4, #0]
 800376c:	0699      	lsls	r1, r3, #26
 800376e:	bf42      	ittt	mi
 8003770:	6833      	ldrmi	r3, [r6, #0]
 8003772:	3302      	addmi	r3, #2
 8003774:	6033      	strmi	r3, [r6, #0]
 8003776:	6825      	ldr	r5, [r4, #0]
 8003778:	f015 0506 	ands.w	r5, r5, #6
 800377c:	d106      	bne.n	800378c <_printf_common+0x48>
 800377e:	f104 0a19 	add.w	sl, r4, #25
 8003782:	68e3      	ldr	r3, [r4, #12]
 8003784:	6832      	ldr	r2, [r6, #0]
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	42ab      	cmp	r3, r5
 800378a:	dc2b      	bgt.n	80037e4 <_printf_common+0xa0>
 800378c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003790:	1e13      	subs	r3, r2, #0
 8003792:	6822      	ldr	r2, [r4, #0]
 8003794:	bf18      	it	ne
 8003796:	2301      	movne	r3, #1
 8003798:	0692      	lsls	r2, r2, #26
 800379a:	d430      	bmi.n	80037fe <_printf_common+0xba>
 800379c:	4649      	mov	r1, r9
 800379e:	4638      	mov	r0, r7
 80037a0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80037a4:	47c0      	blx	r8
 80037a6:	3001      	adds	r0, #1
 80037a8:	d023      	beq.n	80037f2 <_printf_common+0xae>
 80037aa:	6823      	ldr	r3, [r4, #0]
 80037ac:	6922      	ldr	r2, [r4, #16]
 80037ae:	f003 0306 	and.w	r3, r3, #6
 80037b2:	2b04      	cmp	r3, #4
 80037b4:	bf14      	ite	ne
 80037b6:	2500      	movne	r5, #0
 80037b8:	6833      	ldreq	r3, [r6, #0]
 80037ba:	f04f 0600 	mov.w	r6, #0
 80037be:	bf08      	it	eq
 80037c0:	68e5      	ldreq	r5, [r4, #12]
 80037c2:	f104 041a 	add.w	r4, r4, #26
 80037c6:	bf08      	it	eq
 80037c8:	1aed      	subeq	r5, r5, r3
 80037ca:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037ce:	bf08      	it	eq
 80037d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80037d4:	4293      	cmp	r3, r2
 80037d6:	bfc4      	itt	gt
 80037d8:	1a9b      	subgt	r3, r3, r2
 80037da:	18ed      	addgt	r5, r5, r3
 80037dc:	42b5      	cmp	r5, r6
 80037de:	d11a      	bne.n	8003816 <_printf_common+0xd2>
 80037e0:	2000      	movs	r0, #0
 80037e2:	e008      	b.n	80037f6 <_printf_common+0xb2>
 80037e4:	2301      	movs	r3, #1
 80037e6:	4652      	mov	r2, sl
 80037e8:	4649      	mov	r1, r9
 80037ea:	4638      	mov	r0, r7
 80037ec:	47c0      	blx	r8
 80037ee:	3001      	adds	r0, #1
 80037f0:	d103      	bne.n	80037fa <_printf_common+0xb6>
 80037f2:	f04f 30ff 	mov.w	r0, #4294967295
 80037f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037fa:	3501      	adds	r5, #1
 80037fc:	e7c1      	b.n	8003782 <_printf_common+0x3e>
 80037fe:	2030      	movs	r0, #48	; 0x30
 8003800:	18e1      	adds	r1, r4, r3
 8003802:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003806:	1c5a      	adds	r2, r3, #1
 8003808:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800380c:	4422      	add	r2, r4
 800380e:	3302      	adds	r3, #2
 8003810:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003814:	e7c2      	b.n	800379c <_printf_common+0x58>
 8003816:	2301      	movs	r3, #1
 8003818:	4622      	mov	r2, r4
 800381a:	4649      	mov	r1, r9
 800381c:	4638      	mov	r0, r7
 800381e:	47c0      	blx	r8
 8003820:	3001      	adds	r0, #1
 8003822:	d0e6      	beq.n	80037f2 <_printf_common+0xae>
 8003824:	3601      	adds	r6, #1
 8003826:	e7d9      	b.n	80037dc <_printf_common+0x98>

08003828 <_printf_i>:
 8003828:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800382c:	7e0f      	ldrb	r7, [r1, #24]
 800382e:	4691      	mov	r9, r2
 8003830:	2f78      	cmp	r7, #120	; 0x78
 8003832:	4680      	mov	r8, r0
 8003834:	460c      	mov	r4, r1
 8003836:	469a      	mov	sl, r3
 8003838:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800383a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800383e:	d807      	bhi.n	8003850 <_printf_i+0x28>
 8003840:	2f62      	cmp	r7, #98	; 0x62
 8003842:	d80a      	bhi.n	800385a <_printf_i+0x32>
 8003844:	2f00      	cmp	r7, #0
 8003846:	f000 80d5 	beq.w	80039f4 <_printf_i+0x1cc>
 800384a:	2f58      	cmp	r7, #88	; 0x58
 800384c:	f000 80c1 	beq.w	80039d2 <_printf_i+0x1aa>
 8003850:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003854:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003858:	e03a      	b.n	80038d0 <_printf_i+0xa8>
 800385a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800385e:	2b15      	cmp	r3, #21
 8003860:	d8f6      	bhi.n	8003850 <_printf_i+0x28>
 8003862:	a101      	add	r1, pc, #4	; (adr r1, 8003868 <_printf_i+0x40>)
 8003864:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003868:	080038c1 	.word	0x080038c1
 800386c:	080038d5 	.word	0x080038d5
 8003870:	08003851 	.word	0x08003851
 8003874:	08003851 	.word	0x08003851
 8003878:	08003851 	.word	0x08003851
 800387c:	08003851 	.word	0x08003851
 8003880:	080038d5 	.word	0x080038d5
 8003884:	08003851 	.word	0x08003851
 8003888:	08003851 	.word	0x08003851
 800388c:	08003851 	.word	0x08003851
 8003890:	08003851 	.word	0x08003851
 8003894:	080039db 	.word	0x080039db
 8003898:	08003901 	.word	0x08003901
 800389c:	08003995 	.word	0x08003995
 80038a0:	08003851 	.word	0x08003851
 80038a4:	08003851 	.word	0x08003851
 80038a8:	080039fd 	.word	0x080039fd
 80038ac:	08003851 	.word	0x08003851
 80038b0:	08003901 	.word	0x08003901
 80038b4:	08003851 	.word	0x08003851
 80038b8:	08003851 	.word	0x08003851
 80038bc:	0800399d 	.word	0x0800399d
 80038c0:	682b      	ldr	r3, [r5, #0]
 80038c2:	1d1a      	adds	r2, r3, #4
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	602a      	str	r2, [r5, #0]
 80038c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0a0      	b.n	8003a16 <_printf_i+0x1ee>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	0607      	lsls	r7, r0, #24
 80038da:	f103 0104 	add.w	r1, r3, #4
 80038de:	6029      	str	r1, [r5, #0]
 80038e0:	d501      	bpl.n	80038e6 <_printf_i+0xbe>
 80038e2:	681e      	ldr	r6, [r3, #0]
 80038e4:	e003      	b.n	80038ee <_printf_i+0xc6>
 80038e6:	0646      	lsls	r6, r0, #25
 80038e8:	d5fb      	bpl.n	80038e2 <_printf_i+0xba>
 80038ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 80038ee:	2e00      	cmp	r6, #0
 80038f0:	da03      	bge.n	80038fa <_printf_i+0xd2>
 80038f2:	232d      	movs	r3, #45	; 0x2d
 80038f4:	4276      	negs	r6, r6
 80038f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80038fa:	230a      	movs	r3, #10
 80038fc:	4859      	ldr	r0, [pc, #356]	; (8003a64 <_printf_i+0x23c>)
 80038fe:	e012      	b.n	8003926 <_printf_i+0xfe>
 8003900:	682b      	ldr	r3, [r5, #0]
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	6029      	str	r1, [r5, #0]
 8003908:	0605      	lsls	r5, r0, #24
 800390a:	d501      	bpl.n	8003910 <_printf_i+0xe8>
 800390c:	681e      	ldr	r6, [r3, #0]
 800390e:	e002      	b.n	8003916 <_printf_i+0xee>
 8003910:	0641      	lsls	r1, r0, #25
 8003912:	d5fb      	bpl.n	800390c <_printf_i+0xe4>
 8003914:	881e      	ldrh	r6, [r3, #0]
 8003916:	2f6f      	cmp	r7, #111	; 0x6f
 8003918:	bf0c      	ite	eq
 800391a:	2308      	moveq	r3, #8
 800391c:	230a      	movne	r3, #10
 800391e:	4851      	ldr	r0, [pc, #324]	; (8003a64 <_printf_i+0x23c>)
 8003920:	2100      	movs	r1, #0
 8003922:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003926:	6865      	ldr	r5, [r4, #4]
 8003928:	2d00      	cmp	r5, #0
 800392a:	bfa8      	it	ge
 800392c:	6821      	ldrge	r1, [r4, #0]
 800392e:	60a5      	str	r5, [r4, #8]
 8003930:	bfa4      	itt	ge
 8003932:	f021 0104 	bicge.w	r1, r1, #4
 8003936:	6021      	strge	r1, [r4, #0]
 8003938:	b90e      	cbnz	r6, 800393e <_printf_i+0x116>
 800393a:	2d00      	cmp	r5, #0
 800393c:	d04b      	beq.n	80039d6 <_printf_i+0x1ae>
 800393e:	4615      	mov	r5, r2
 8003940:	fbb6 f1f3 	udiv	r1, r6, r3
 8003944:	fb03 6711 	mls	r7, r3, r1, r6
 8003948:	5dc7      	ldrb	r7, [r0, r7]
 800394a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800394e:	4637      	mov	r7, r6
 8003950:	42bb      	cmp	r3, r7
 8003952:	460e      	mov	r6, r1
 8003954:	d9f4      	bls.n	8003940 <_printf_i+0x118>
 8003956:	2b08      	cmp	r3, #8
 8003958:	d10b      	bne.n	8003972 <_printf_i+0x14a>
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	07de      	lsls	r6, r3, #31
 800395e:	d508      	bpl.n	8003972 <_printf_i+0x14a>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	6861      	ldr	r1, [r4, #4]
 8003964:	4299      	cmp	r1, r3
 8003966:	bfde      	ittt	le
 8003968:	2330      	movle	r3, #48	; 0x30
 800396a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800396e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003972:	1b52      	subs	r2, r2, r5
 8003974:	6122      	str	r2, [r4, #16]
 8003976:	464b      	mov	r3, r9
 8003978:	4621      	mov	r1, r4
 800397a:	4640      	mov	r0, r8
 800397c:	f8cd a000 	str.w	sl, [sp]
 8003980:	aa03      	add	r2, sp, #12
 8003982:	f7ff fedf 	bl	8003744 <_printf_common>
 8003986:	3001      	adds	r0, #1
 8003988:	d14a      	bne.n	8003a20 <_printf_i+0x1f8>
 800398a:	f04f 30ff 	mov.w	r0, #4294967295
 800398e:	b004      	add	sp, #16
 8003990:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003994:	6823      	ldr	r3, [r4, #0]
 8003996:	f043 0320 	orr.w	r3, r3, #32
 800399a:	6023      	str	r3, [r4, #0]
 800399c:	2778      	movs	r7, #120	; 0x78
 800399e:	4832      	ldr	r0, [pc, #200]	; (8003a68 <_printf_i+0x240>)
 80039a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80039a4:	6823      	ldr	r3, [r4, #0]
 80039a6:	6829      	ldr	r1, [r5, #0]
 80039a8:	061f      	lsls	r7, r3, #24
 80039aa:	f851 6b04 	ldr.w	r6, [r1], #4
 80039ae:	d402      	bmi.n	80039b6 <_printf_i+0x18e>
 80039b0:	065f      	lsls	r7, r3, #25
 80039b2:	bf48      	it	mi
 80039b4:	b2b6      	uxthmi	r6, r6
 80039b6:	07df      	lsls	r7, r3, #31
 80039b8:	bf48      	it	mi
 80039ba:	f043 0320 	orrmi.w	r3, r3, #32
 80039be:	6029      	str	r1, [r5, #0]
 80039c0:	bf48      	it	mi
 80039c2:	6023      	strmi	r3, [r4, #0]
 80039c4:	b91e      	cbnz	r6, 80039ce <_printf_i+0x1a6>
 80039c6:	6823      	ldr	r3, [r4, #0]
 80039c8:	f023 0320 	bic.w	r3, r3, #32
 80039cc:	6023      	str	r3, [r4, #0]
 80039ce:	2310      	movs	r3, #16
 80039d0:	e7a6      	b.n	8003920 <_printf_i+0xf8>
 80039d2:	4824      	ldr	r0, [pc, #144]	; (8003a64 <_printf_i+0x23c>)
 80039d4:	e7e4      	b.n	80039a0 <_printf_i+0x178>
 80039d6:	4615      	mov	r5, r2
 80039d8:	e7bd      	b.n	8003956 <_printf_i+0x12e>
 80039da:	682b      	ldr	r3, [r5, #0]
 80039dc:	6826      	ldr	r6, [r4, #0]
 80039de:	1d18      	adds	r0, r3, #4
 80039e0:	6961      	ldr	r1, [r4, #20]
 80039e2:	6028      	str	r0, [r5, #0]
 80039e4:	0635      	lsls	r5, r6, #24
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	d501      	bpl.n	80039ee <_printf_i+0x1c6>
 80039ea:	6019      	str	r1, [r3, #0]
 80039ec:	e002      	b.n	80039f4 <_printf_i+0x1cc>
 80039ee:	0670      	lsls	r0, r6, #25
 80039f0:	d5fb      	bpl.n	80039ea <_printf_i+0x1c2>
 80039f2:	8019      	strh	r1, [r3, #0]
 80039f4:	2300      	movs	r3, #0
 80039f6:	4615      	mov	r5, r2
 80039f8:	6123      	str	r3, [r4, #16]
 80039fa:	e7bc      	b.n	8003976 <_printf_i+0x14e>
 80039fc:	682b      	ldr	r3, [r5, #0]
 80039fe:	2100      	movs	r1, #0
 8003a00:	1d1a      	adds	r2, r3, #4
 8003a02:	602a      	str	r2, [r5, #0]
 8003a04:	681d      	ldr	r5, [r3, #0]
 8003a06:	6862      	ldr	r2, [r4, #4]
 8003a08:	4628      	mov	r0, r5
 8003a0a:	f000 f9c1 	bl	8003d90 <memchr>
 8003a0e:	b108      	cbz	r0, 8003a14 <_printf_i+0x1ec>
 8003a10:	1b40      	subs	r0, r0, r5
 8003a12:	6060      	str	r0, [r4, #4]
 8003a14:	6863      	ldr	r3, [r4, #4]
 8003a16:	6123      	str	r3, [r4, #16]
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a1e:	e7aa      	b.n	8003976 <_printf_i+0x14e>
 8003a20:	462a      	mov	r2, r5
 8003a22:	4649      	mov	r1, r9
 8003a24:	4640      	mov	r0, r8
 8003a26:	6923      	ldr	r3, [r4, #16]
 8003a28:	47d0      	blx	sl
 8003a2a:	3001      	adds	r0, #1
 8003a2c:	d0ad      	beq.n	800398a <_printf_i+0x162>
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	079b      	lsls	r3, r3, #30
 8003a32:	d413      	bmi.n	8003a5c <_printf_i+0x234>
 8003a34:	68e0      	ldr	r0, [r4, #12]
 8003a36:	9b03      	ldr	r3, [sp, #12]
 8003a38:	4298      	cmp	r0, r3
 8003a3a:	bfb8      	it	lt
 8003a3c:	4618      	movlt	r0, r3
 8003a3e:	e7a6      	b.n	800398e <_printf_i+0x166>
 8003a40:	2301      	movs	r3, #1
 8003a42:	4632      	mov	r2, r6
 8003a44:	4649      	mov	r1, r9
 8003a46:	4640      	mov	r0, r8
 8003a48:	47d0      	blx	sl
 8003a4a:	3001      	adds	r0, #1
 8003a4c:	d09d      	beq.n	800398a <_printf_i+0x162>
 8003a4e:	3501      	adds	r5, #1
 8003a50:	68e3      	ldr	r3, [r4, #12]
 8003a52:	9903      	ldr	r1, [sp, #12]
 8003a54:	1a5b      	subs	r3, r3, r1
 8003a56:	42ab      	cmp	r3, r5
 8003a58:	dcf2      	bgt.n	8003a40 <_printf_i+0x218>
 8003a5a:	e7eb      	b.n	8003a34 <_printf_i+0x20c>
 8003a5c:	2500      	movs	r5, #0
 8003a5e:	f104 0619 	add.w	r6, r4, #25
 8003a62:	e7f5      	b.n	8003a50 <_printf_i+0x228>
 8003a64:	08005ef0 	.word	0x08005ef0
 8003a68:	08005f01 	.word	0x08005f01

08003a6c <std>:
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	b510      	push	{r4, lr}
 8003a70:	4604      	mov	r4, r0
 8003a72:	e9c0 3300 	strd	r3, r3, [r0]
 8003a76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a7a:	6083      	str	r3, [r0, #8]
 8003a7c:	8181      	strh	r1, [r0, #12]
 8003a7e:	6643      	str	r3, [r0, #100]	; 0x64
 8003a80:	81c2      	strh	r2, [r0, #14]
 8003a82:	6183      	str	r3, [r0, #24]
 8003a84:	4619      	mov	r1, r3
 8003a86:	2208      	movs	r2, #8
 8003a88:	305c      	adds	r0, #92	; 0x5c
 8003a8a:	f000 f902 	bl	8003c92 <memset>
 8003a8e:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <std+0x38>)
 8003a90:	6224      	str	r4, [r4, #32]
 8003a92:	6263      	str	r3, [r4, #36]	; 0x24
 8003a94:	4b04      	ldr	r3, [pc, #16]	; (8003aa8 <std+0x3c>)
 8003a96:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a98:	4b04      	ldr	r3, [pc, #16]	; (8003aac <std+0x40>)
 8003a9a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a9c:	4b04      	ldr	r3, [pc, #16]	; (8003ab0 <std+0x44>)
 8003a9e:	6323      	str	r3, [r4, #48]	; 0x30
 8003aa0:	bd10      	pop	{r4, pc}
 8003aa2:	bf00      	nop
 8003aa4:	08003c0d 	.word	0x08003c0d
 8003aa8:	08003c2f 	.word	0x08003c2f
 8003aac:	08003c67 	.word	0x08003c67
 8003ab0:	08003c8b 	.word	0x08003c8b

08003ab4 <stdio_exit_handler>:
 8003ab4:	4a02      	ldr	r2, [pc, #8]	; (8003ac0 <stdio_exit_handler+0xc>)
 8003ab6:	4903      	ldr	r1, [pc, #12]	; (8003ac4 <stdio_exit_handler+0x10>)
 8003ab8:	4803      	ldr	r0, [pc, #12]	; (8003ac8 <stdio_exit_handler+0x14>)
 8003aba:	f000 b869 	b.w	8003b90 <_fwalk_sglue>
 8003abe:	bf00      	nop
 8003ac0:	2000000c 	.word	0x2000000c
 8003ac4:	08005725 	.word	0x08005725
 8003ac8:	20000018 	.word	0x20000018

08003acc <cleanup_stdio>:
 8003acc:	6841      	ldr	r1, [r0, #4]
 8003ace:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <cleanup_stdio+0x34>)
 8003ad0:	b510      	push	{r4, lr}
 8003ad2:	4299      	cmp	r1, r3
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	d001      	beq.n	8003adc <cleanup_stdio+0x10>
 8003ad8:	f001 fe24 	bl	8005724 <_fflush_r>
 8003adc:	68a1      	ldr	r1, [r4, #8]
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <cleanup_stdio+0x38>)
 8003ae0:	4299      	cmp	r1, r3
 8003ae2:	d002      	beq.n	8003aea <cleanup_stdio+0x1e>
 8003ae4:	4620      	mov	r0, r4
 8003ae6:	f001 fe1d 	bl	8005724 <_fflush_r>
 8003aea:	68e1      	ldr	r1, [r4, #12]
 8003aec:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <cleanup_stdio+0x3c>)
 8003aee:	4299      	cmp	r1, r3
 8003af0:	d004      	beq.n	8003afc <cleanup_stdio+0x30>
 8003af2:	4620      	mov	r0, r4
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f001 be14 	b.w	8005724 <_fflush_r>
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	200002a8 	.word	0x200002a8
 8003b04:	20000310 	.word	0x20000310
 8003b08:	20000378 	.word	0x20000378

08003b0c <global_stdio_init.part.0>:
 8003b0c:	b510      	push	{r4, lr}
 8003b0e:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <global_stdio_init.part.0+0x30>)
 8003b10:	4c0b      	ldr	r4, [pc, #44]	; (8003b40 <global_stdio_init.part.0+0x34>)
 8003b12:	4a0c      	ldr	r2, [pc, #48]	; (8003b44 <global_stdio_init.part.0+0x38>)
 8003b14:	4620      	mov	r0, r4
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	2104      	movs	r1, #4
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f7ff ffa6 	bl	8003a6c <std>
 8003b20:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003b24:	2201      	movs	r2, #1
 8003b26:	2109      	movs	r1, #9
 8003b28:	f7ff ffa0 	bl	8003a6c <std>
 8003b2c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8003b30:	2202      	movs	r2, #2
 8003b32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b36:	2112      	movs	r1, #18
 8003b38:	f7ff bf98 	b.w	8003a6c <std>
 8003b3c:	200003e0 	.word	0x200003e0
 8003b40:	200002a8 	.word	0x200002a8
 8003b44:	08003ab5 	.word	0x08003ab5

08003b48 <__sfp_lock_acquire>:
 8003b48:	4801      	ldr	r0, [pc, #4]	; (8003b50 <__sfp_lock_acquire+0x8>)
 8003b4a:	f000 b91f 	b.w	8003d8c <__retarget_lock_acquire_recursive>
 8003b4e:	bf00      	nop
 8003b50:	200003e9 	.word	0x200003e9

08003b54 <__sfp_lock_release>:
 8003b54:	4801      	ldr	r0, [pc, #4]	; (8003b5c <__sfp_lock_release+0x8>)
 8003b56:	f000 b91a 	b.w	8003d8e <__retarget_lock_release_recursive>
 8003b5a:	bf00      	nop
 8003b5c:	200003e9 	.word	0x200003e9

08003b60 <__sinit>:
 8003b60:	b510      	push	{r4, lr}
 8003b62:	4604      	mov	r4, r0
 8003b64:	f7ff fff0 	bl	8003b48 <__sfp_lock_acquire>
 8003b68:	6a23      	ldr	r3, [r4, #32]
 8003b6a:	b11b      	cbz	r3, 8003b74 <__sinit+0x14>
 8003b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b70:	f7ff bff0 	b.w	8003b54 <__sfp_lock_release>
 8003b74:	4b04      	ldr	r3, [pc, #16]	; (8003b88 <__sinit+0x28>)
 8003b76:	6223      	str	r3, [r4, #32]
 8003b78:	4b04      	ldr	r3, [pc, #16]	; (8003b8c <__sinit+0x2c>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1f5      	bne.n	8003b6c <__sinit+0xc>
 8003b80:	f7ff ffc4 	bl	8003b0c <global_stdio_init.part.0>
 8003b84:	e7f2      	b.n	8003b6c <__sinit+0xc>
 8003b86:	bf00      	nop
 8003b88:	08003acd 	.word	0x08003acd
 8003b8c:	200003e0 	.word	0x200003e0

08003b90 <_fwalk_sglue>:
 8003b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b94:	4607      	mov	r7, r0
 8003b96:	4688      	mov	r8, r1
 8003b98:	4614      	mov	r4, r2
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003ba0:	f1b9 0901 	subs.w	r9, r9, #1
 8003ba4:	d505      	bpl.n	8003bb2 <_fwalk_sglue+0x22>
 8003ba6:	6824      	ldr	r4, [r4, #0]
 8003ba8:	2c00      	cmp	r4, #0
 8003baa:	d1f7      	bne.n	8003b9c <_fwalk_sglue+0xc>
 8003bac:	4630      	mov	r0, r6
 8003bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003bb2:	89ab      	ldrh	r3, [r5, #12]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d907      	bls.n	8003bc8 <_fwalk_sglue+0x38>
 8003bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003bbc:	3301      	adds	r3, #1
 8003bbe:	d003      	beq.n	8003bc8 <_fwalk_sglue+0x38>
 8003bc0:	4629      	mov	r1, r5
 8003bc2:	4638      	mov	r0, r7
 8003bc4:	47c0      	blx	r8
 8003bc6:	4306      	orrs	r6, r0
 8003bc8:	3568      	adds	r5, #104	; 0x68
 8003bca:	e7e9      	b.n	8003ba0 <_fwalk_sglue+0x10>

08003bcc <siprintf>:
 8003bcc:	b40e      	push	{r1, r2, r3}
 8003bce:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003bd2:	b500      	push	{lr}
 8003bd4:	b09c      	sub	sp, #112	; 0x70
 8003bd6:	ab1d      	add	r3, sp, #116	; 0x74
 8003bd8:	9002      	str	r0, [sp, #8]
 8003bda:	9006      	str	r0, [sp, #24]
 8003bdc:	9107      	str	r1, [sp, #28]
 8003bde:	9104      	str	r1, [sp, #16]
 8003be0:	4808      	ldr	r0, [pc, #32]	; (8003c04 <siprintf+0x38>)
 8003be2:	4909      	ldr	r1, [pc, #36]	; (8003c08 <siprintf+0x3c>)
 8003be4:	f853 2b04 	ldr.w	r2, [r3], #4
 8003be8:	9105      	str	r1, [sp, #20]
 8003bea:	6800      	ldr	r0, [r0, #0]
 8003bec:	a902      	add	r1, sp, #8
 8003bee:	9301      	str	r3, [sp, #4]
 8003bf0:	f001 fc18 	bl	8005424 <_svfiprintf_r>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	9b02      	ldr	r3, [sp, #8]
 8003bf8:	701a      	strb	r2, [r3, #0]
 8003bfa:	b01c      	add	sp, #112	; 0x70
 8003bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c00:	b003      	add	sp, #12
 8003c02:	4770      	bx	lr
 8003c04:	20000064 	.word	0x20000064
 8003c08:	ffff0208 	.word	0xffff0208

08003c0c <__sread>:
 8003c0c:	b510      	push	{r4, lr}
 8003c0e:	460c      	mov	r4, r1
 8003c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c14:	f000 f86c 	bl	8003cf0 <_read_r>
 8003c18:	2800      	cmp	r0, #0
 8003c1a:	bfab      	itete	ge
 8003c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8003c20:	181b      	addge	r3, r3, r0
 8003c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003c26:	bfac      	ite	ge
 8003c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8003c2a:	81a3      	strhlt	r3, [r4, #12]
 8003c2c:	bd10      	pop	{r4, pc}

08003c2e <__swrite>:
 8003c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c32:	461f      	mov	r7, r3
 8003c34:	898b      	ldrh	r3, [r1, #12]
 8003c36:	4605      	mov	r5, r0
 8003c38:	05db      	lsls	r3, r3, #23
 8003c3a:	460c      	mov	r4, r1
 8003c3c:	4616      	mov	r6, r2
 8003c3e:	d505      	bpl.n	8003c4c <__swrite+0x1e>
 8003c40:	2302      	movs	r3, #2
 8003c42:	2200      	movs	r2, #0
 8003c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c48:	f000 f840 	bl	8003ccc <_lseek_r>
 8003c4c:	89a3      	ldrh	r3, [r4, #12]
 8003c4e:	4632      	mov	r2, r6
 8003c50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c54:	81a3      	strh	r3, [r4, #12]
 8003c56:	4628      	mov	r0, r5
 8003c58:	463b      	mov	r3, r7
 8003c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c62:	f000 b857 	b.w	8003d14 <_write_r>

08003c66 <__sseek>:
 8003c66:	b510      	push	{r4, lr}
 8003c68:	460c      	mov	r4, r1
 8003c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c6e:	f000 f82d 	bl	8003ccc <_lseek_r>
 8003c72:	1c43      	adds	r3, r0, #1
 8003c74:	89a3      	ldrh	r3, [r4, #12]
 8003c76:	bf15      	itete	ne
 8003c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c82:	81a3      	strheq	r3, [r4, #12]
 8003c84:	bf18      	it	ne
 8003c86:	81a3      	strhne	r3, [r4, #12]
 8003c88:	bd10      	pop	{r4, pc}

08003c8a <__sclose>:
 8003c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c8e:	f000 b80d 	b.w	8003cac <_close_r>

08003c92 <memset>:
 8003c92:	4603      	mov	r3, r0
 8003c94:	4402      	add	r2, r0
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d100      	bne.n	8003c9c <memset+0xa>
 8003c9a:	4770      	bx	lr
 8003c9c:	f803 1b01 	strb.w	r1, [r3], #1
 8003ca0:	e7f9      	b.n	8003c96 <memset+0x4>
	...

08003ca4 <_localeconv_r>:
 8003ca4:	4800      	ldr	r0, [pc, #0]	; (8003ca8 <_localeconv_r+0x4>)
 8003ca6:	4770      	bx	lr
 8003ca8:	20000158 	.word	0x20000158

08003cac <_close_r>:
 8003cac:	b538      	push	{r3, r4, r5, lr}
 8003cae:	2300      	movs	r3, #0
 8003cb0:	4d05      	ldr	r5, [pc, #20]	; (8003cc8 <_close_r+0x1c>)
 8003cb2:	4604      	mov	r4, r0
 8003cb4:	4608      	mov	r0, r1
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	f7fd fb53 	bl	8001362 <_close>
 8003cbc:	1c43      	adds	r3, r0, #1
 8003cbe:	d102      	bne.n	8003cc6 <_close_r+0x1a>
 8003cc0:	682b      	ldr	r3, [r5, #0]
 8003cc2:	b103      	cbz	r3, 8003cc6 <_close_r+0x1a>
 8003cc4:	6023      	str	r3, [r4, #0]
 8003cc6:	bd38      	pop	{r3, r4, r5, pc}
 8003cc8:	200003e4 	.word	0x200003e4

08003ccc <_lseek_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4604      	mov	r4, r0
 8003cd0:	4608      	mov	r0, r1
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	4d05      	ldr	r5, [pc, #20]	; (8003cec <_lseek_r+0x20>)
 8003cd8:	602a      	str	r2, [r5, #0]
 8003cda:	461a      	mov	r2, r3
 8003cdc:	f7fd fb65 	bl	80013aa <_lseek>
 8003ce0:	1c43      	adds	r3, r0, #1
 8003ce2:	d102      	bne.n	8003cea <_lseek_r+0x1e>
 8003ce4:	682b      	ldr	r3, [r5, #0]
 8003ce6:	b103      	cbz	r3, 8003cea <_lseek_r+0x1e>
 8003ce8:	6023      	str	r3, [r4, #0]
 8003cea:	bd38      	pop	{r3, r4, r5, pc}
 8003cec:	200003e4 	.word	0x200003e4

08003cf0 <_read_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	4604      	mov	r4, r0
 8003cf4:	4608      	mov	r0, r1
 8003cf6:	4611      	mov	r1, r2
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	4d05      	ldr	r5, [pc, #20]	; (8003d10 <_read_r+0x20>)
 8003cfc:	602a      	str	r2, [r5, #0]
 8003cfe:	461a      	mov	r2, r3
 8003d00:	f7fd faf6 	bl	80012f0 <_read>
 8003d04:	1c43      	adds	r3, r0, #1
 8003d06:	d102      	bne.n	8003d0e <_read_r+0x1e>
 8003d08:	682b      	ldr	r3, [r5, #0]
 8003d0a:	b103      	cbz	r3, 8003d0e <_read_r+0x1e>
 8003d0c:	6023      	str	r3, [r4, #0]
 8003d0e:	bd38      	pop	{r3, r4, r5, pc}
 8003d10:	200003e4 	.word	0x200003e4

08003d14 <_write_r>:
 8003d14:	b538      	push	{r3, r4, r5, lr}
 8003d16:	4604      	mov	r4, r0
 8003d18:	4608      	mov	r0, r1
 8003d1a:	4611      	mov	r1, r2
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	4d05      	ldr	r5, [pc, #20]	; (8003d34 <_write_r+0x20>)
 8003d20:	602a      	str	r2, [r5, #0]
 8003d22:	461a      	mov	r2, r3
 8003d24:	f7fd fb01 	bl	800132a <_write>
 8003d28:	1c43      	adds	r3, r0, #1
 8003d2a:	d102      	bne.n	8003d32 <_write_r+0x1e>
 8003d2c:	682b      	ldr	r3, [r5, #0]
 8003d2e:	b103      	cbz	r3, 8003d32 <_write_r+0x1e>
 8003d30:	6023      	str	r3, [r4, #0]
 8003d32:	bd38      	pop	{r3, r4, r5, pc}
 8003d34:	200003e4 	.word	0x200003e4

08003d38 <__errno>:
 8003d38:	4b01      	ldr	r3, [pc, #4]	; (8003d40 <__errno+0x8>)
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	20000064 	.word	0x20000064

08003d44 <__libc_init_array>:
 8003d44:	b570      	push	{r4, r5, r6, lr}
 8003d46:	2600      	movs	r6, #0
 8003d48:	4d0c      	ldr	r5, [pc, #48]	; (8003d7c <__libc_init_array+0x38>)
 8003d4a:	4c0d      	ldr	r4, [pc, #52]	; (8003d80 <__libc_init_array+0x3c>)
 8003d4c:	1b64      	subs	r4, r4, r5
 8003d4e:	10a4      	asrs	r4, r4, #2
 8003d50:	42a6      	cmp	r6, r4
 8003d52:	d109      	bne.n	8003d68 <__libc_init_array+0x24>
 8003d54:	f002 f886 	bl	8005e64 <_init>
 8003d58:	2600      	movs	r6, #0
 8003d5a:	4d0a      	ldr	r5, [pc, #40]	; (8003d84 <__libc_init_array+0x40>)
 8003d5c:	4c0a      	ldr	r4, [pc, #40]	; (8003d88 <__libc_init_array+0x44>)
 8003d5e:	1b64      	subs	r4, r4, r5
 8003d60:	10a4      	asrs	r4, r4, #2
 8003d62:	42a6      	cmp	r6, r4
 8003d64:	d105      	bne.n	8003d72 <__libc_init_array+0x2e>
 8003d66:	bd70      	pop	{r4, r5, r6, pc}
 8003d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d6c:	4798      	blx	r3
 8003d6e:	3601      	adds	r6, #1
 8003d70:	e7ee      	b.n	8003d50 <__libc_init_array+0xc>
 8003d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d76:	4798      	blx	r3
 8003d78:	3601      	adds	r6, #1
 8003d7a:	e7f2      	b.n	8003d62 <__libc_init_array+0x1e>
 8003d7c:	0800624c 	.word	0x0800624c
 8003d80:	0800624c 	.word	0x0800624c
 8003d84:	0800624c 	.word	0x0800624c
 8003d88:	08006250 	.word	0x08006250

08003d8c <__retarget_lock_acquire_recursive>:
 8003d8c:	4770      	bx	lr

08003d8e <__retarget_lock_release_recursive>:
 8003d8e:	4770      	bx	lr

08003d90 <memchr>:
 8003d90:	4603      	mov	r3, r0
 8003d92:	b510      	push	{r4, lr}
 8003d94:	b2c9      	uxtb	r1, r1
 8003d96:	4402      	add	r2, r0
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	d101      	bne.n	8003da2 <memchr+0x12>
 8003d9e:	2000      	movs	r0, #0
 8003da0:	e003      	b.n	8003daa <memchr+0x1a>
 8003da2:	7804      	ldrb	r4, [r0, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	428c      	cmp	r4, r1
 8003da8:	d1f6      	bne.n	8003d98 <memchr+0x8>
 8003daa:	bd10      	pop	{r4, pc}

08003dac <quorem>:
 8003dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003db0:	6903      	ldr	r3, [r0, #16]
 8003db2:	690c      	ldr	r4, [r1, #16]
 8003db4:	4607      	mov	r7, r0
 8003db6:	42a3      	cmp	r3, r4
 8003db8:	db7f      	blt.n	8003eba <quorem+0x10e>
 8003dba:	3c01      	subs	r4, #1
 8003dbc:	f100 0514 	add.w	r5, r0, #20
 8003dc0:	f101 0814 	add.w	r8, r1, #20
 8003dc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003dc8:	9301      	str	r3, [sp, #4]
 8003dca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003dce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8003dda:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003dde:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003de2:	d331      	bcc.n	8003e48 <quorem+0x9c>
 8003de4:	f04f 0e00 	mov.w	lr, #0
 8003de8:	4640      	mov	r0, r8
 8003dea:	46ac      	mov	ip, r5
 8003dec:	46f2      	mov	sl, lr
 8003dee:	f850 2b04 	ldr.w	r2, [r0], #4
 8003df2:	b293      	uxth	r3, r2
 8003df4:	fb06 e303 	mla	r3, r6, r3, lr
 8003df8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003dfc:	0c1a      	lsrs	r2, r3, #16
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	fb06 220e 	mla	r2, r6, lr, r2
 8003e04:	ebaa 0303 	sub.w	r3, sl, r3
 8003e08:	f8dc a000 	ldr.w	sl, [ip]
 8003e0c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003e10:	fa1f fa8a 	uxth.w	sl, sl
 8003e14:	4453      	add	r3, sl
 8003e16:	f8dc a000 	ldr.w	sl, [ip]
 8003e1a:	b292      	uxth	r2, r2
 8003e1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003e20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e2a:	4581      	cmp	r9, r0
 8003e2c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003e30:	f84c 3b04 	str.w	r3, [ip], #4
 8003e34:	d2db      	bcs.n	8003dee <quorem+0x42>
 8003e36:	f855 300b 	ldr.w	r3, [r5, fp]
 8003e3a:	b92b      	cbnz	r3, 8003e48 <quorem+0x9c>
 8003e3c:	9b01      	ldr	r3, [sp, #4]
 8003e3e:	3b04      	subs	r3, #4
 8003e40:	429d      	cmp	r5, r3
 8003e42:	461a      	mov	r2, r3
 8003e44:	d32d      	bcc.n	8003ea2 <quorem+0xf6>
 8003e46:	613c      	str	r4, [r7, #16]
 8003e48:	4638      	mov	r0, r7
 8003e4a:	f001 f993 	bl	8005174 <__mcmp>
 8003e4e:	2800      	cmp	r0, #0
 8003e50:	db23      	blt.n	8003e9a <quorem+0xee>
 8003e52:	4629      	mov	r1, r5
 8003e54:	2000      	movs	r0, #0
 8003e56:	3601      	adds	r6, #1
 8003e58:	f858 2b04 	ldr.w	r2, [r8], #4
 8003e5c:	f8d1 c000 	ldr.w	ip, [r1]
 8003e60:	b293      	uxth	r3, r2
 8003e62:	1ac3      	subs	r3, r0, r3
 8003e64:	0c12      	lsrs	r2, r2, #16
 8003e66:	fa1f f08c 	uxth.w	r0, ip
 8003e6a:	4403      	add	r3, r0
 8003e6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8003e70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e7a:	45c1      	cmp	r9, r8
 8003e7c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8003e80:	f841 3b04 	str.w	r3, [r1], #4
 8003e84:	d2e8      	bcs.n	8003e58 <quorem+0xac>
 8003e86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e8e:	b922      	cbnz	r2, 8003e9a <quorem+0xee>
 8003e90:	3b04      	subs	r3, #4
 8003e92:	429d      	cmp	r5, r3
 8003e94:	461a      	mov	r2, r3
 8003e96:	d30a      	bcc.n	8003eae <quorem+0x102>
 8003e98:	613c      	str	r4, [r7, #16]
 8003e9a:	4630      	mov	r0, r6
 8003e9c:	b003      	add	sp, #12
 8003e9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ea2:	6812      	ldr	r2, [r2, #0]
 8003ea4:	3b04      	subs	r3, #4
 8003ea6:	2a00      	cmp	r2, #0
 8003ea8:	d1cd      	bne.n	8003e46 <quorem+0x9a>
 8003eaa:	3c01      	subs	r4, #1
 8003eac:	e7c8      	b.n	8003e40 <quorem+0x94>
 8003eae:	6812      	ldr	r2, [r2, #0]
 8003eb0:	3b04      	subs	r3, #4
 8003eb2:	2a00      	cmp	r2, #0
 8003eb4:	d1f0      	bne.n	8003e98 <quorem+0xec>
 8003eb6:	3c01      	subs	r4, #1
 8003eb8:	e7eb      	b.n	8003e92 <quorem+0xe6>
 8003eba:	2000      	movs	r0, #0
 8003ebc:	e7ee      	b.n	8003e9c <quorem+0xf0>
	...

08003ec0 <_dtoa_r>:
 8003ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ec4:	4616      	mov	r6, r2
 8003ec6:	461f      	mov	r7, r3
 8003ec8:	69c4      	ldr	r4, [r0, #28]
 8003eca:	b099      	sub	sp, #100	; 0x64
 8003ecc:	4605      	mov	r5, r0
 8003ece:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003ed2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8003ed6:	b974      	cbnz	r4, 8003ef6 <_dtoa_r+0x36>
 8003ed8:	2010      	movs	r0, #16
 8003eda:	f000 fe1d 	bl	8004b18 <malloc>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	61e8      	str	r0, [r5, #28]
 8003ee2:	b920      	cbnz	r0, 8003eee <_dtoa_r+0x2e>
 8003ee4:	21ef      	movs	r1, #239	; 0xef
 8003ee6:	4bac      	ldr	r3, [pc, #688]	; (8004198 <_dtoa_r+0x2d8>)
 8003ee8:	48ac      	ldr	r0, [pc, #688]	; (800419c <_dtoa_r+0x2dc>)
 8003eea:	f001 fc7b 	bl	80057e4 <__assert_func>
 8003eee:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8003ef2:	6004      	str	r4, [r0, #0]
 8003ef4:	60c4      	str	r4, [r0, #12]
 8003ef6:	69eb      	ldr	r3, [r5, #28]
 8003ef8:	6819      	ldr	r1, [r3, #0]
 8003efa:	b151      	cbz	r1, 8003f12 <_dtoa_r+0x52>
 8003efc:	685a      	ldr	r2, [r3, #4]
 8003efe:	2301      	movs	r3, #1
 8003f00:	4093      	lsls	r3, r2
 8003f02:	604a      	str	r2, [r1, #4]
 8003f04:	608b      	str	r3, [r1, #8]
 8003f06:	4628      	mov	r0, r5
 8003f08:	f000 fefa 	bl	8004d00 <_Bfree>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	69eb      	ldr	r3, [r5, #28]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	1e3b      	subs	r3, r7, #0
 8003f14:	bfaf      	iteee	ge
 8003f16:	2300      	movge	r3, #0
 8003f18:	2201      	movlt	r2, #1
 8003f1a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8003f1e:	9305      	strlt	r3, [sp, #20]
 8003f20:	bfa8      	it	ge
 8003f22:	f8c8 3000 	strge.w	r3, [r8]
 8003f26:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8003f2a:	4b9d      	ldr	r3, [pc, #628]	; (80041a0 <_dtoa_r+0x2e0>)
 8003f2c:	bfb8      	it	lt
 8003f2e:	f8c8 2000 	strlt.w	r2, [r8]
 8003f32:	ea33 0309 	bics.w	r3, r3, r9
 8003f36:	d119      	bne.n	8003f6c <_dtoa_r+0xac>
 8003f38:	f242 730f 	movw	r3, #9999	; 0x270f
 8003f3c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f3e:	6013      	str	r3, [r2, #0]
 8003f40:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8003f44:	4333      	orrs	r3, r6
 8003f46:	f000 8589 	beq.w	8004a5c <_dtoa_r+0xb9c>
 8003f4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f4c:	b953      	cbnz	r3, 8003f64 <_dtoa_r+0xa4>
 8003f4e:	4b95      	ldr	r3, [pc, #596]	; (80041a4 <_dtoa_r+0x2e4>)
 8003f50:	e023      	b.n	8003f9a <_dtoa_r+0xda>
 8003f52:	4b95      	ldr	r3, [pc, #596]	; (80041a8 <_dtoa_r+0x2e8>)
 8003f54:	9303      	str	r3, [sp, #12]
 8003f56:	3308      	adds	r3, #8
 8003f58:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f5a:	6013      	str	r3, [r2, #0]
 8003f5c:	9803      	ldr	r0, [sp, #12]
 8003f5e:	b019      	add	sp, #100	; 0x64
 8003f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f64:	4b8f      	ldr	r3, [pc, #572]	; (80041a4 <_dtoa_r+0x2e4>)
 8003f66:	9303      	str	r3, [sp, #12]
 8003f68:	3303      	adds	r3, #3
 8003f6a:	e7f5      	b.n	8003f58 <_dtoa_r+0x98>
 8003f6c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f70:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8003f74:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f7fc fd14 	bl	80009a8 <__aeabi_dcmpeq>
 8003f80:	4680      	mov	r8, r0
 8003f82:	b160      	cbz	r0, 8003f9e <_dtoa_r+0xde>
 8003f84:	2301      	movs	r3, #1
 8003f86:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8003f88:	6013      	str	r3, [r2, #0]
 8003f8a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 8562 	beq.w	8004a56 <_dtoa_r+0xb96>
 8003f92:	4b86      	ldr	r3, [pc, #536]	; (80041ac <_dtoa_r+0x2ec>)
 8003f94:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8003f96:	6013      	str	r3, [r2, #0]
 8003f98:	3b01      	subs	r3, #1
 8003f9a:	9303      	str	r3, [sp, #12]
 8003f9c:	e7de      	b.n	8003f5c <_dtoa_r+0x9c>
 8003f9e:	ab16      	add	r3, sp, #88	; 0x58
 8003fa0:	9301      	str	r3, [sp, #4]
 8003fa2:	ab17      	add	r3, sp, #92	; 0x5c
 8003fa4:	9300      	str	r3, [sp, #0]
 8003fa6:	4628      	mov	r0, r5
 8003fa8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8003fac:	f001 f98a 	bl	80052c4 <__d2b>
 8003fb0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8003fb4:	4682      	mov	sl, r0
 8003fb6:	2c00      	cmp	r4, #0
 8003fb8:	d07e      	beq.n	80040b8 <_dtoa_r+0x1f8>
 8003fba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8003fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003fc0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8003fc4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fc8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8003fcc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8003fd0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	4b75      	ldr	r3, [pc, #468]	; (80041b0 <_dtoa_r+0x2f0>)
 8003fda:	f7fc f8c5 	bl	8000168 <__aeabi_dsub>
 8003fde:	a368      	add	r3, pc, #416	; (adr r3, 8004180 <_dtoa_r+0x2c0>)
 8003fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe4:	f7fc fa78 	bl	80004d8 <__aeabi_dmul>
 8003fe8:	a367      	add	r3, pc, #412	; (adr r3, 8004188 <_dtoa_r+0x2c8>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc f8bd 	bl	800016c <__adddf3>
 8003ff2:	4606      	mov	r6, r0
 8003ff4:	4620      	mov	r0, r4
 8003ff6:	460f      	mov	r7, r1
 8003ff8:	f7fc fa04 	bl	8000404 <__aeabi_i2d>
 8003ffc:	a364      	add	r3, pc, #400	; (adr r3, 8004190 <_dtoa_r+0x2d0>)
 8003ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004002:	f7fc fa69 	bl	80004d8 <__aeabi_dmul>
 8004006:	4602      	mov	r2, r0
 8004008:	460b      	mov	r3, r1
 800400a:	4630      	mov	r0, r6
 800400c:	4639      	mov	r1, r7
 800400e:	f7fc f8ad 	bl	800016c <__adddf3>
 8004012:	4606      	mov	r6, r0
 8004014:	460f      	mov	r7, r1
 8004016:	f7fc fd0f 	bl	8000a38 <__aeabi_d2iz>
 800401a:	2200      	movs	r2, #0
 800401c:	4683      	mov	fp, r0
 800401e:	2300      	movs	r3, #0
 8004020:	4630      	mov	r0, r6
 8004022:	4639      	mov	r1, r7
 8004024:	f7fc fcca 	bl	80009bc <__aeabi_dcmplt>
 8004028:	b148      	cbz	r0, 800403e <_dtoa_r+0x17e>
 800402a:	4658      	mov	r0, fp
 800402c:	f7fc f9ea 	bl	8000404 <__aeabi_i2d>
 8004030:	4632      	mov	r2, r6
 8004032:	463b      	mov	r3, r7
 8004034:	f7fc fcb8 	bl	80009a8 <__aeabi_dcmpeq>
 8004038:	b908      	cbnz	r0, 800403e <_dtoa_r+0x17e>
 800403a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800403e:	f1bb 0f16 	cmp.w	fp, #22
 8004042:	d857      	bhi.n	80040f4 <_dtoa_r+0x234>
 8004044:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004048:	4b5a      	ldr	r3, [pc, #360]	; (80041b4 <_dtoa_r+0x2f4>)
 800404a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	f7fc fcb3 	bl	80009bc <__aeabi_dcmplt>
 8004056:	2800      	cmp	r0, #0
 8004058:	d04e      	beq.n	80040f8 <_dtoa_r+0x238>
 800405a:	2300      	movs	r3, #0
 800405c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004060:	930f      	str	r3, [sp, #60]	; 0x3c
 8004062:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004064:	1b1b      	subs	r3, r3, r4
 8004066:	1e5a      	subs	r2, r3, #1
 8004068:	bf46      	itte	mi
 800406a:	f1c3 0901 	rsbmi	r9, r3, #1
 800406e:	2300      	movmi	r3, #0
 8004070:	f04f 0900 	movpl.w	r9, #0
 8004074:	9209      	str	r2, [sp, #36]	; 0x24
 8004076:	bf48      	it	mi
 8004078:	9309      	strmi	r3, [sp, #36]	; 0x24
 800407a:	f1bb 0f00 	cmp.w	fp, #0
 800407e:	db3d      	blt.n	80040fc <_dtoa_r+0x23c>
 8004080:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004082:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004086:	445b      	add	r3, fp
 8004088:	9309      	str	r3, [sp, #36]	; 0x24
 800408a:	2300      	movs	r3, #0
 800408c:	930a      	str	r3, [sp, #40]	; 0x28
 800408e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004090:	2b09      	cmp	r3, #9
 8004092:	d867      	bhi.n	8004164 <_dtoa_r+0x2a4>
 8004094:	2b05      	cmp	r3, #5
 8004096:	bfc4      	itt	gt
 8004098:	3b04      	subgt	r3, #4
 800409a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800409c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800409e:	bfc8      	it	gt
 80040a0:	2400      	movgt	r4, #0
 80040a2:	f1a3 0302 	sub.w	r3, r3, #2
 80040a6:	bfd8      	it	le
 80040a8:	2401      	movle	r4, #1
 80040aa:	2b03      	cmp	r3, #3
 80040ac:	f200 8086 	bhi.w	80041bc <_dtoa_r+0x2fc>
 80040b0:	e8df f003 	tbb	[pc, r3]
 80040b4:	5637392c 	.word	0x5637392c
 80040b8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80040bc:	441c      	add	r4, r3
 80040be:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80040c2:	2b20      	cmp	r3, #32
 80040c4:	bfc1      	itttt	gt
 80040c6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80040ca:	fa09 f903 	lslgt.w	r9, r9, r3
 80040ce:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80040d2:	fa26 f303 	lsrgt.w	r3, r6, r3
 80040d6:	bfd6      	itet	le
 80040d8:	f1c3 0320 	rsble	r3, r3, #32
 80040dc:	ea49 0003 	orrgt.w	r0, r9, r3
 80040e0:	fa06 f003 	lslle.w	r0, r6, r3
 80040e4:	f7fc f97e 	bl	80003e4 <__aeabi_ui2d>
 80040e8:	2201      	movs	r2, #1
 80040ea:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80040ee:	3c01      	subs	r4, #1
 80040f0:	9213      	str	r2, [sp, #76]	; 0x4c
 80040f2:	e76f      	b.n	8003fd4 <_dtoa_r+0x114>
 80040f4:	2301      	movs	r3, #1
 80040f6:	e7b3      	b.n	8004060 <_dtoa_r+0x1a0>
 80040f8:	900f      	str	r0, [sp, #60]	; 0x3c
 80040fa:	e7b2      	b.n	8004062 <_dtoa_r+0x1a2>
 80040fc:	f1cb 0300 	rsb	r3, fp, #0
 8004100:	930a      	str	r3, [sp, #40]	; 0x28
 8004102:	2300      	movs	r3, #0
 8004104:	eba9 090b 	sub.w	r9, r9, fp
 8004108:	930e      	str	r3, [sp, #56]	; 0x38
 800410a:	e7c0      	b.n	800408e <_dtoa_r+0x1ce>
 800410c:	2300      	movs	r3, #0
 800410e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004110:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004112:	2b00      	cmp	r3, #0
 8004114:	dc55      	bgt.n	80041c2 <_dtoa_r+0x302>
 8004116:	2301      	movs	r3, #1
 8004118:	461a      	mov	r2, r3
 800411a:	9306      	str	r3, [sp, #24]
 800411c:	9308      	str	r3, [sp, #32]
 800411e:	9223      	str	r2, [sp, #140]	; 0x8c
 8004120:	e00b      	b.n	800413a <_dtoa_r+0x27a>
 8004122:	2301      	movs	r3, #1
 8004124:	e7f3      	b.n	800410e <_dtoa_r+0x24e>
 8004126:	2300      	movs	r3, #0
 8004128:	930b      	str	r3, [sp, #44]	; 0x2c
 800412a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800412c:	445b      	add	r3, fp
 800412e:	9306      	str	r3, [sp, #24]
 8004130:	3301      	adds	r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	9308      	str	r3, [sp, #32]
 8004136:	bfb8      	it	lt
 8004138:	2301      	movlt	r3, #1
 800413a:	2100      	movs	r1, #0
 800413c:	2204      	movs	r2, #4
 800413e:	69e8      	ldr	r0, [r5, #28]
 8004140:	f102 0614 	add.w	r6, r2, #20
 8004144:	429e      	cmp	r6, r3
 8004146:	d940      	bls.n	80041ca <_dtoa_r+0x30a>
 8004148:	6041      	str	r1, [r0, #4]
 800414a:	4628      	mov	r0, r5
 800414c:	f000 fd98 	bl	8004c80 <_Balloc>
 8004150:	9003      	str	r0, [sp, #12]
 8004152:	2800      	cmp	r0, #0
 8004154:	d13c      	bne.n	80041d0 <_dtoa_r+0x310>
 8004156:	4602      	mov	r2, r0
 8004158:	f240 11af 	movw	r1, #431	; 0x1af
 800415c:	4b16      	ldr	r3, [pc, #88]	; (80041b8 <_dtoa_r+0x2f8>)
 800415e:	e6c3      	b.n	8003ee8 <_dtoa_r+0x28>
 8004160:	2301      	movs	r3, #1
 8004162:	e7e1      	b.n	8004128 <_dtoa_r+0x268>
 8004164:	2401      	movs	r4, #1
 8004166:	2300      	movs	r3, #0
 8004168:	940b      	str	r4, [sp, #44]	; 0x2c
 800416a:	9322      	str	r3, [sp, #136]	; 0x88
 800416c:	f04f 33ff 	mov.w	r3, #4294967295
 8004170:	2200      	movs	r2, #0
 8004172:	9306      	str	r3, [sp, #24]
 8004174:	9308      	str	r3, [sp, #32]
 8004176:	2312      	movs	r3, #18
 8004178:	e7d1      	b.n	800411e <_dtoa_r+0x25e>
 800417a:	bf00      	nop
 800417c:	f3af 8000 	nop.w
 8004180:	636f4361 	.word	0x636f4361
 8004184:	3fd287a7 	.word	0x3fd287a7
 8004188:	8b60c8b3 	.word	0x8b60c8b3
 800418c:	3fc68a28 	.word	0x3fc68a28
 8004190:	509f79fb 	.word	0x509f79fb
 8004194:	3fd34413 	.word	0x3fd34413
 8004198:	08005f1f 	.word	0x08005f1f
 800419c:	08005f36 	.word	0x08005f36
 80041a0:	7ff00000 	.word	0x7ff00000
 80041a4:	08005f1b 	.word	0x08005f1b
 80041a8:	08005f12 	.word	0x08005f12
 80041ac:	08005eef 	.word	0x08005eef
 80041b0:	3ff80000 	.word	0x3ff80000
 80041b4:	08006020 	.word	0x08006020
 80041b8:	08005f8e 	.word	0x08005f8e
 80041bc:	2301      	movs	r3, #1
 80041be:	930b      	str	r3, [sp, #44]	; 0x2c
 80041c0:	e7d4      	b.n	800416c <_dtoa_r+0x2ac>
 80041c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80041c4:	9306      	str	r3, [sp, #24]
 80041c6:	9308      	str	r3, [sp, #32]
 80041c8:	e7b7      	b.n	800413a <_dtoa_r+0x27a>
 80041ca:	3101      	adds	r1, #1
 80041cc:	0052      	lsls	r2, r2, #1
 80041ce:	e7b7      	b.n	8004140 <_dtoa_r+0x280>
 80041d0:	69eb      	ldr	r3, [r5, #28]
 80041d2:	9a03      	ldr	r2, [sp, #12]
 80041d4:	601a      	str	r2, [r3, #0]
 80041d6:	9b08      	ldr	r3, [sp, #32]
 80041d8:	2b0e      	cmp	r3, #14
 80041da:	f200 80a8 	bhi.w	800432e <_dtoa_r+0x46e>
 80041de:	2c00      	cmp	r4, #0
 80041e0:	f000 80a5 	beq.w	800432e <_dtoa_r+0x46e>
 80041e4:	f1bb 0f00 	cmp.w	fp, #0
 80041e8:	dd34      	ble.n	8004254 <_dtoa_r+0x394>
 80041ea:	4b9a      	ldr	r3, [pc, #616]	; (8004454 <_dtoa_r+0x594>)
 80041ec:	f00b 020f 	and.w	r2, fp, #15
 80041f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80041f4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80041f8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80041fc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004200:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004204:	d016      	beq.n	8004234 <_dtoa_r+0x374>
 8004206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800420a:	4b93      	ldr	r3, [pc, #588]	; (8004458 <_dtoa_r+0x598>)
 800420c:	2703      	movs	r7, #3
 800420e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004212:	f7fc fa8b 	bl	800072c <__aeabi_ddiv>
 8004216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800421a:	f004 040f 	and.w	r4, r4, #15
 800421e:	4e8e      	ldr	r6, [pc, #568]	; (8004458 <_dtoa_r+0x598>)
 8004220:	b954      	cbnz	r4, 8004238 <_dtoa_r+0x378>
 8004222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004226:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800422a:	f7fc fa7f 	bl	800072c <__aeabi_ddiv>
 800422e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004232:	e029      	b.n	8004288 <_dtoa_r+0x3c8>
 8004234:	2702      	movs	r7, #2
 8004236:	e7f2      	b.n	800421e <_dtoa_r+0x35e>
 8004238:	07e1      	lsls	r1, r4, #31
 800423a:	d508      	bpl.n	800424e <_dtoa_r+0x38e>
 800423c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004240:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004244:	f7fc f948 	bl	80004d8 <__aeabi_dmul>
 8004248:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800424c:	3701      	adds	r7, #1
 800424e:	1064      	asrs	r4, r4, #1
 8004250:	3608      	adds	r6, #8
 8004252:	e7e5      	b.n	8004220 <_dtoa_r+0x360>
 8004254:	f000 80a5 	beq.w	80043a2 <_dtoa_r+0x4e2>
 8004258:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800425c:	f1cb 0400 	rsb	r4, fp, #0
 8004260:	4b7c      	ldr	r3, [pc, #496]	; (8004454 <_dtoa_r+0x594>)
 8004262:	f004 020f 	and.w	r2, r4, #15
 8004266:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fc f933 	bl	80004d8 <__aeabi_dmul>
 8004272:	2702      	movs	r7, #2
 8004274:	2300      	movs	r3, #0
 8004276:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800427a:	4e77      	ldr	r6, [pc, #476]	; (8004458 <_dtoa_r+0x598>)
 800427c:	1124      	asrs	r4, r4, #4
 800427e:	2c00      	cmp	r4, #0
 8004280:	f040 8084 	bne.w	800438c <_dtoa_r+0x4cc>
 8004284:	2b00      	cmp	r3, #0
 8004286:	d1d2      	bne.n	800422e <_dtoa_r+0x36e>
 8004288:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800428c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004290:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004292:	2b00      	cmp	r3, #0
 8004294:	f000 8087 	beq.w	80043a6 <_dtoa_r+0x4e6>
 8004298:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800429c:	2200      	movs	r2, #0
 800429e:	4b6f      	ldr	r3, [pc, #444]	; (800445c <_dtoa_r+0x59c>)
 80042a0:	f7fc fb8c 	bl	80009bc <__aeabi_dcmplt>
 80042a4:	2800      	cmp	r0, #0
 80042a6:	d07e      	beq.n	80043a6 <_dtoa_r+0x4e6>
 80042a8:	9b08      	ldr	r3, [sp, #32]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d07b      	beq.n	80043a6 <_dtoa_r+0x4e6>
 80042ae:	9b06      	ldr	r3, [sp, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	dd38      	ble.n	8004326 <_dtoa_r+0x466>
 80042b4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80042b8:	2200      	movs	r2, #0
 80042ba:	4b69      	ldr	r3, [pc, #420]	; (8004460 <_dtoa_r+0x5a0>)
 80042bc:	f7fc f90c 	bl	80004d8 <__aeabi_dmul>
 80042c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80042c4:	9c06      	ldr	r4, [sp, #24]
 80042c6:	f10b 38ff 	add.w	r8, fp, #4294967295
 80042ca:	3701      	adds	r7, #1
 80042cc:	4638      	mov	r0, r7
 80042ce:	f7fc f899 	bl	8000404 <__aeabi_i2d>
 80042d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80042d6:	f7fc f8ff 	bl	80004d8 <__aeabi_dmul>
 80042da:	2200      	movs	r2, #0
 80042dc:	4b61      	ldr	r3, [pc, #388]	; (8004464 <_dtoa_r+0x5a4>)
 80042de:	f7fb ff45 	bl	800016c <__adddf3>
 80042e2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80042e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80042ea:	9611      	str	r6, [sp, #68]	; 0x44
 80042ec:	2c00      	cmp	r4, #0
 80042ee:	d15d      	bne.n	80043ac <_dtoa_r+0x4ec>
 80042f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042f4:	2200      	movs	r2, #0
 80042f6:	4b5c      	ldr	r3, [pc, #368]	; (8004468 <_dtoa_r+0x5a8>)
 80042f8:	f7fb ff36 	bl	8000168 <__aeabi_dsub>
 80042fc:	4602      	mov	r2, r0
 80042fe:	460b      	mov	r3, r1
 8004300:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004304:	4633      	mov	r3, r6
 8004306:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004308:	f7fc fb76 	bl	80009f8 <__aeabi_dcmpgt>
 800430c:	2800      	cmp	r0, #0
 800430e:	f040 8295 	bne.w	800483c <_dtoa_r+0x97c>
 8004312:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004316:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004318:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800431c:	f7fc fb4e 	bl	80009bc <__aeabi_dcmplt>
 8004320:	2800      	cmp	r0, #0
 8004322:	f040 8289 	bne.w	8004838 <_dtoa_r+0x978>
 8004326:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800432a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800432e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004330:	2b00      	cmp	r3, #0
 8004332:	f2c0 8151 	blt.w	80045d8 <_dtoa_r+0x718>
 8004336:	f1bb 0f0e 	cmp.w	fp, #14
 800433a:	f300 814d 	bgt.w	80045d8 <_dtoa_r+0x718>
 800433e:	4b45      	ldr	r3, [pc, #276]	; (8004454 <_dtoa_r+0x594>)
 8004340:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004344:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004348:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800434c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800434e:	2b00      	cmp	r3, #0
 8004350:	f280 80da 	bge.w	8004508 <_dtoa_r+0x648>
 8004354:	9b08      	ldr	r3, [sp, #32]
 8004356:	2b00      	cmp	r3, #0
 8004358:	f300 80d6 	bgt.w	8004508 <_dtoa_r+0x648>
 800435c:	f040 826b 	bne.w	8004836 <_dtoa_r+0x976>
 8004360:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004364:	2200      	movs	r2, #0
 8004366:	4b40      	ldr	r3, [pc, #256]	; (8004468 <_dtoa_r+0x5a8>)
 8004368:	f7fc f8b6 	bl	80004d8 <__aeabi_dmul>
 800436c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004370:	f7fc fb38 	bl	80009e4 <__aeabi_dcmpge>
 8004374:	9c08      	ldr	r4, [sp, #32]
 8004376:	4626      	mov	r6, r4
 8004378:	2800      	cmp	r0, #0
 800437a:	f040 8241 	bne.w	8004800 <_dtoa_r+0x940>
 800437e:	2331      	movs	r3, #49	; 0x31
 8004380:	9f03      	ldr	r7, [sp, #12]
 8004382:	f10b 0b01 	add.w	fp, fp, #1
 8004386:	f807 3b01 	strb.w	r3, [r7], #1
 800438a:	e23d      	b.n	8004808 <_dtoa_r+0x948>
 800438c:	07e2      	lsls	r2, r4, #31
 800438e:	d505      	bpl.n	800439c <_dtoa_r+0x4dc>
 8004390:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004394:	f7fc f8a0 	bl	80004d8 <__aeabi_dmul>
 8004398:	2301      	movs	r3, #1
 800439a:	3701      	adds	r7, #1
 800439c:	1064      	asrs	r4, r4, #1
 800439e:	3608      	adds	r6, #8
 80043a0:	e76d      	b.n	800427e <_dtoa_r+0x3be>
 80043a2:	2702      	movs	r7, #2
 80043a4:	e770      	b.n	8004288 <_dtoa_r+0x3c8>
 80043a6:	46d8      	mov	r8, fp
 80043a8:	9c08      	ldr	r4, [sp, #32]
 80043aa:	e78f      	b.n	80042cc <_dtoa_r+0x40c>
 80043ac:	9903      	ldr	r1, [sp, #12]
 80043ae:	4b29      	ldr	r3, [pc, #164]	; (8004454 <_dtoa_r+0x594>)
 80043b0:	4421      	add	r1, r4
 80043b2:	9112      	str	r1, [sp, #72]	; 0x48
 80043b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80043b6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80043ba:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80043be:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80043c2:	2900      	cmp	r1, #0
 80043c4:	d054      	beq.n	8004470 <_dtoa_r+0x5b0>
 80043c6:	2000      	movs	r0, #0
 80043c8:	4928      	ldr	r1, [pc, #160]	; (800446c <_dtoa_r+0x5ac>)
 80043ca:	f7fc f9af 	bl	800072c <__aeabi_ddiv>
 80043ce:	463b      	mov	r3, r7
 80043d0:	4632      	mov	r2, r6
 80043d2:	f7fb fec9 	bl	8000168 <__aeabi_dsub>
 80043d6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80043da:	9f03      	ldr	r7, [sp, #12]
 80043dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043e0:	f7fc fb2a 	bl	8000a38 <__aeabi_d2iz>
 80043e4:	4604      	mov	r4, r0
 80043e6:	f7fc f80d 	bl	8000404 <__aeabi_i2d>
 80043ea:	4602      	mov	r2, r0
 80043ec:	460b      	mov	r3, r1
 80043ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80043f2:	f7fb feb9 	bl	8000168 <__aeabi_dsub>
 80043f6:	4602      	mov	r2, r0
 80043f8:	460b      	mov	r3, r1
 80043fa:	3430      	adds	r4, #48	; 0x30
 80043fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004400:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004404:	f807 4b01 	strb.w	r4, [r7], #1
 8004408:	f7fc fad8 	bl	80009bc <__aeabi_dcmplt>
 800440c:	2800      	cmp	r0, #0
 800440e:	d173      	bne.n	80044f8 <_dtoa_r+0x638>
 8004410:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004414:	2000      	movs	r0, #0
 8004416:	4911      	ldr	r1, [pc, #68]	; (800445c <_dtoa_r+0x59c>)
 8004418:	f7fb fea6 	bl	8000168 <__aeabi_dsub>
 800441c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004420:	f7fc facc 	bl	80009bc <__aeabi_dcmplt>
 8004424:	2800      	cmp	r0, #0
 8004426:	f040 80b6 	bne.w	8004596 <_dtoa_r+0x6d6>
 800442a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800442c:	429f      	cmp	r7, r3
 800442e:	f43f af7a 	beq.w	8004326 <_dtoa_r+0x466>
 8004432:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004436:	2200      	movs	r2, #0
 8004438:	4b09      	ldr	r3, [pc, #36]	; (8004460 <_dtoa_r+0x5a0>)
 800443a:	f7fc f84d 	bl	80004d8 <__aeabi_dmul>
 800443e:	2200      	movs	r2, #0
 8004440:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004444:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <_dtoa_r+0x5a0>)
 800444a:	f7fc f845 	bl	80004d8 <__aeabi_dmul>
 800444e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004452:	e7c3      	b.n	80043dc <_dtoa_r+0x51c>
 8004454:	08006020 	.word	0x08006020
 8004458:	08005ff8 	.word	0x08005ff8
 800445c:	3ff00000 	.word	0x3ff00000
 8004460:	40240000 	.word	0x40240000
 8004464:	401c0000 	.word	0x401c0000
 8004468:	40140000 	.word	0x40140000
 800446c:	3fe00000 	.word	0x3fe00000
 8004470:	4630      	mov	r0, r6
 8004472:	4639      	mov	r1, r7
 8004474:	f7fc f830 	bl	80004d8 <__aeabi_dmul>
 8004478:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800447a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800447e:	9c03      	ldr	r4, [sp, #12]
 8004480:	9314      	str	r3, [sp, #80]	; 0x50
 8004482:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004486:	f7fc fad7 	bl	8000a38 <__aeabi_d2iz>
 800448a:	9015      	str	r0, [sp, #84]	; 0x54
 800448c:	f7fb ffba 	bl	8000404 <__aeabi_i2d>
 8004490:	4602      	mov	r2, r0
 8004492:	460b      	mov	r3, r1
 8004494:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004498:	f7fb fe66 	bl	8000168 <__aeabi_dsub>
 800449c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800449e:	4606      	mov	r6, r0
 80044a0:	3330      	adds	r3, #48	; 0x30
 80044a2:	f804 3b01 	strb.w	r3, [r4], #1
 80044a6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80044a8:	460f      	mov	r7, r1
 80044aa:	429c      	cmp	r4, r3
 80044ac:	f04f 0200 	mov.w	r2, #0
 80044b0:	d124      	bne.n	80044fc <_dtoa_r+0x63c>
 80044b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80044b6:	4baf      	ldr	r3, [pc, #700]	; (8004774 <_dtoa_r+0x8b4>)
 80044b8:	f7fb fe58 	bl	800016c <__adddf3>
 80044bc:	4602      	mov	r2, r0
 80044be:	460b      	mov	r3, r1
 80044c0:	4630      	mov	r0, r6
 80044c2:	4639      	mov	r1, r7
 80044c4:	f7fc fa98 	bl	80009f8 <__aeabi_dcmpgt>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d163      	bne.n	8004594 <_dtoa_r+0x6d4>
 80044cc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80044d0:	2000      	movs	r0, #0
 80044d2:	49a8      	ldr	r1, [pc, #672]	; (8004774 <_dtoa_r+0x8b4>)
 80044d4:	f7fb fe48 	bl	8000168 <__aeabi_dsub>
 80044d8:	4602      	mov	r2, r0
 80044da:	460b      	mov	r3, r1
 80044dc:	4630      	mov	r0, r6
 80044de:	4639      	mov	r1, r7
 80044e0:	f7fc fa6c 	bl	80009bc <__aeabi_dcmplt>
 80044e4:	2800      	cmp	r0, #0
 80044e6:	f43f af1e 	beq.w	8004326 <_dtoa_r+0x466>
 80044ea:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80044ec:	1e7b      	subs	r3, r7, #1
 80044ee:	9314      	str	r3, [sp, #80]	; 0x50
 80044f0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80044f4:	2b30      	cmp	r3, #48	; 0x30
 80044f6:	d0f8      	beq.n	80044ea <_dtoa_r+0x62a>
 80044f8:	46c3      	mov	fp, r8
 80044fa:	e03b      	b.n	8004574 <_dtoa_r+0x6b4>
 80044fc:	4b9e      	ldr	r3, [pc, #632]	; (8004778 <_dtoa_r+0x8b8>)
 80044fe:	f7fb ffeb 	bl	80004d8 <__aeabi_dmul>
 8004502:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004506:	e7bc      	b.n	8004482 <_dtoa_r+0x5c2>
 8004508:	9f03      	ldr	r7, [sp, #12]
 800450a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800450e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004512:	4640      	mov	r0, r8
 8004514:	4649      	mov	r1, r9
 8004516:	f7fc f909 	bl	800072c <__aeabi_ddiv>
 800451a:	f7fc fa8d 	bl	8000a38 <__aeabi_d2iz>
 800451e:	4604      	mov	r4, r0
 8004520:	f7fb ff70 	bl	8000404 <__aeabi_i2d>
 8004524:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004528:	f7fb ffd6 	bl	80004d8 <__aeabi_dmul>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4640      	mov	r0, r8
 8004532:	4649      	mov	r1, r9
 8004534:	f7fb fe18 	bl	8000168 <__aeabi_dsub>
 8004538:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800453c:	f807 6b01 	strb.w	r6, [r7], #1
 8004540:	9e03      	ldr	r6, [sp, #12]
 8004542:	f8dd c020 	ldr.w	ip, [sp, #32]
 8004546:	1bbe      	subs	r6, r7, r6
 8004548:	45b4      	cmp	ip, r6
 800454a:	4602      	mov	r2, r0
 800454c:	460b      	mov	r3, r1
 800454e:	d136      	bne.n	80045be <_dtoa_r+0x6fe>
 8004550:	f7fb fe0c 	bl	800016c <__adddf3>
 8004554:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004558:	4680      	mov	r8, r0
 800455a:	4689      	mov	r9, r1
 800455c:	f7fc fa4c 	bl	80009f8 <__aeabi_dcmpgt>
 8004560:	bb58      	cbnz	r0, 80045ba <_dtoa_r+0x6fa>
 8004562:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004566:	4640      	mov	r0, r8
 8004568:	4649      	mov	r1, r9
 800456a:	f7fc fa1d 	bl	80009a8 <__aeabi_dcmpeq>
 800456e:	b108      	cbz	r0, 8004574 <_dtoa_r+0x6b4>
 8004570:	07e3      	lsls	r3, r4, #31
 8004572:	d422      	bmi.n	80045ba <_dtoa_r+0x6fa>
 8004574:	4651      	mov	r1, sl
 8004576:	4628      	mov	r0, r5
 8004578:	f000 fbc2 	bl	8004d00 <_Bfree>
 800457c:	2300      	movs	r3, #0
 800457e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004580:	703b      	strb	r3, [r7, #0]
 8004582:	f10b 0301 	add.w	r3, fp, #1
 8004586:	6013      	str	r3, [r2, #0]
 8004588:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800458a:	2b00      	cmp	r3, #0
 800458c:	f43f ace6 	beq.w	8003f5c <_dtoa_r+0x9c>
 8004590:	601f      	str	r7, [r3, #0]
 8004592:	e4e3      	b.n	8003f5c <_dtoa_r+0x9c>
 8004594:	4627      	mov	r7, r4
 8004596:	463b      	mov	r3, r7
 8004598:	461f      	mov	r7, r3
 800459a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800459e:	2a39      	cmp	r2, #57	; 0x39
 80045a0:	d107      	bne.n	80045b2 <_dtoa_r+0x6f2>
 80045a2:	9a03      	ldr	r2, [sp, #12]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d1f7      	bne.n	8004598 <_dtoa_r+0x6d8>
 80045a8:	2230      	movs	r2, #48	; 0x30
 80045aa:	9903      	ldr	r1, [sp, #12]
 80045ac:	f108 0801 	add.w	r8, r8, #1
 80045b0:	700a      	strb	r2, [r1, #0]
 80045b2:	781a      	ldrb	r2, [r3, #0]
 80045b4:	3201      	adds	r2, #1
 80045b6:	701a      	strb	r2, [r3, #0]
 80045b8:	e79e      	b.n	80044f8 <_dtoa_r+0x638>
 80045ba:	46d8      	mov	r8, fp
 80045bc:	e7eb      	b.n	8004596 <_dtoa_r+0x6d6>
 80045be:	2200      	movs	r2, #0
 80045c0:	4b6d      	ldr	r3, [pc, #436]	; (8004778 <_dtoa_r+0x8b8>)
 80045c2:	f7fb ff89 	bl	80004d8 <__aeabi_dmul>
 80045c6:	2200      	movs	r2, #0
 80045c8:	2300      	movs	r3, #0
 80045ca:	4680      	mov	r8, r0
 80045cc:	4689      	mov	r9, r1
 80045ce:	f7fc f9eb 	bl	80009a8 <__aeabi_dcmpeq>
 80045d2:	2800      	cmp	r0, #0
 80045d4:	d09b      	beq.n	800450e <_dtoa_r+0x64e>
 80045d6:	e7cd      	b.n	8004574 <_dtoa_r+0x6b4>
 80045d8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80045da:	2a00      	cmp	r2, #0
 80045dc:	f000 80c4 	beq.w	8004768 <_dtoa_r+0x8a8>
 80045e0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80045e2:	2a01      	cmp	r2, #1
 80045e4:	f300 80a8 	bgt.w	8004738 <_dtoa_r+0x878>
 80045e8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	f000 80a0 	beq.w	8004730 <_dtoa_r+0x870>
 80045f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80045f4:	464f      	mov	r7, r9
 80045f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80045f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80045fa:	2101      	movs	r1, #1
 80045fc:	441a      	add	r2, r3
 80045fe:	4628      	mov	r0, r5
 8004600:	4499      	add	r9, r3
 8004602:	9209      	str	r2, [sp, #36]	; 0x24
 8004604:	f000 fc32 	bl	8004e6c <__i2b>
 8004608:	4606      	mov	r6, r0
 800460a:	b15f      	cbz	r7, 8004624 <_dtoa_r+0x764>
 800460c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800460e:	2b00      	cmp	r3, #0
 8004610:	dd08      	ble.n	8004624 <_dtoa_r+0x764>
 8004612:	42bb      	cmp	r3, r7
 8004614:	bfa8      	it	ge
 8004616:	463b      	movge	r3, r7
 8004618:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800461a:	eba9 0903 	sub.w	r9, r9, r3
 800461e:	1aff      	subs	r7, r7, r3
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	9309      	str	r3, [sp, #36]	; 0x24
 8004624:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004626:	b1f3      	cbz	r3, 8004666 <_dtoa_r+0x7a6>
 8004628:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800462a:	2b00      	cmp	r3, #0
 800462c:	f000 80a0 	beq.w	8004770 <_dtoa_r+0x8b0>
 8004630:	2c00      	cmp	r4, #0
 8004632:	dd10      	ble.n	8004656 <_dtoa_r+0x796>
 8004634:	4631      	mov	r1, r6
 8004636:	4622      	mov	r2, r4
 8004638:	4628      	mov	r0, r5
 800463a:	f000 fcd5 	bl	8004fe8 <__pow5mult>
 800463e:	4652      	mov	r2, sl
 8004640:	4601      	mov	r1, r0
 8004642:	4606      	mov	r6, r0
 8004644:	4628      	mov	r0, r5
 8004646:	f000 fc27 	bl	8004e98 <__multiply>
 800464a:	4680      	mov	r8, r0
 800464c:	4651      	mov	r1, sl
 800464e:	4628      	mov	r0, r5
 8004650:	f000 fb56 	bl	8004d00 <_Bfree>
 8004654:	46c2      	mov	sl, r8
 8004656:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004658:	1b1a      	subs	r2, r3, r4
 800465a:	d004      	beq.n	8004666 <_dtoa_r+0x7a6>
 800465c:	4651      	mov	r1, sl
 800465e:	4628      	mov	r0, r5
 8004660:	f000 fcc2 	bl	8004fe8 <__pow5mult>
 8004664:	4682      	mov	sl, r0
 8004666:	2101      	movs	r1, #1
 8004668:	4628      	mov	r0, r5
 800466a:	f000 fbff 	bl	8004e6c <__i2b>
 800466e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004670:	4604      	mov	r4, r0
 8004672:	2b00      	cmp	r3, #0
 8004674:	f340 8082 	ble.w	800477c <_dtoa_r+0x8bc>
 8004678:	461a      	mov	r2, r3
 800467a:	4601      	mov	r1, r0
 800467c:	4628      	mov	r0, r5
 800467e:	f000 fcb3 	bl	8004fe8 <__pow5mult>
 8004682:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004684:	4604      	mov	r4, r0
 8004686:	2b01      	cmp	r3, #1
 8004688:	dd7b      	ble.n	8004782 <_dtoa_r+0x8c2>
 800468a:	f04f 0800 	mov.w	r8, #0
 800468e:	6923      	ldr	r3, [r4, #16]
 8004690:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004694:	6918      	ldr	r0, [r3, #16]
 8004696:	f000 fb9b 	bl	8004dd0 <__hi0bits>
 800469a:	f1c0 0020 	rsb	r0, r0, #32
 800469e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046a0:	4418      	add	r0, r3
 80046a2:	f010 001f 	ands.w	r0, r0, #31
 80046a6:	f000 8092 	beq.w	80047ce <_dtoa_r+0x90e>
 80046aa:	f1c0 0320 	rsb	r3, r0, #32
 80046ae:	2b04      	cmp	r3, #4
 80046b0:	f340 8085 	ble.w	80047be <_dtoa_r+0x8fe>
 80046b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046b6:	f1c0 001c 	rsb	r0, r0, #28
 80046ba:	4403      	add	r3, r0
 80046bc:	4481      	add	r9, r0
 80046be:	4407      	add	r7, r0
 80046c0:	9309      	str	r3, [sp, #36]	; 0x24
 80046c2:	f1b9 0f00 	cmp.w	r9, #0
 80046c6:	dd05      	ble.n	80046d4 <_dtoa_r+0x814>
 80046c8:	4651      	mov	r1, sl
 80046ca:	464a      	mov	r2, r9
 80046cc:	4628      	mov	r0, r5
 80046ce:	f000 fce5 	bl	800509c <__lshift>
 80046d2:	4682      	mov	sl, r0
 80046d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dd05      	ble.n	80046e6 <_dtoa_r+0x826>
 80046da:	4621      	mov	r1, r4
 80046dc:	461a      	mov	r2, r3
 80046de:	4628      	mov	r0, r5
 80046e0:	f000 fcdc 	bl	800509c <__lshift>
 80046e4:	4604      	mov	r4, r0
 80046e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d072      	beq.n	80047d2 <_dtoa_r+0x912>
 80046ec:	4621      	mov	r1, r4
 80046ee:	4650      	mov	r0, sl
 80046f0:	f000 fd40 	bl	8005174 <__mcmp>
 80046f4:	2800      	cmp	r0, #0
 80046f6:	da6c      	bge.n	80047d2 <_dtoa_r+0x912>
 80046f8:	2300      	movs	r3, #0
 80046fa:	4651      	mov	r1, sl
 80046fc:	220a      	movs	r2, #10
 80046fe:	4628      	mov	r0, r5
 8004700:	f000 fb20 	bl	8004d44 <__multadd>
 8004704:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004706:	4682      	mov	sl, r0
 8004708:	f10b 3bff 	add.w	fp, fp, #4294967295
 800470c:	2b00      	cmp	r3, #0
 800470e:	f000 81ac 	beq.w	8004a6a <_dtoa_r+0xbaa>
 8004712:	2300      	movs	r3, #0
 8004714:	4631      	mov	r1, r6
 8004716:	220a      	movs	r2, #10
 8004718:	4628      	mov	r0, r5
 800471a:	f000 fb13 	bl	8004d44 <__multadd>
 800471e:	9b06      	ldr	r3, [sp, #24]
 8004720:	4606      	mov	r6, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	f300 8093 	bgt.w	800484e <_dtoa_r+0x98e>
 8004728:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800472a:	2b02      	cmp	r3, #2
 800472c:	dc59      	bgt.n	80047e2 <_dtoa_r+0x922>
 800472e:	e08e      	b.n	800484e <_dtoa_r+0x98e>
 8004730:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004732:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004736:	e75d      	b.n	80045f4 <_dtoa_r+0x734>
 8004738:	9b08      	ldr	r3, [sp, #32]
 800473a:	1e5c      	subs	r4, r3, #1
 800473c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800473e:	42a3      	cmp	r3, r4
 8004740:	bfbf      	itttt	lt
 8004742:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8004744:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8004746:	1ae3      	sublt	r3, r4, r3
 8004748:	18d2      	addlt	r2, r2, r3
 800474a:	bfa8      	it	ge
 800474c:	1b1c      	subge	r4, r3, r4
 800474e:	9b08      	ldr	r3, [sp, #32]
 8004750:	bfbe      	ittt	lt
 8004752:	940a      	strlt	r4, [sp, #40]	; 0x28
 8004754:	920e      	strlt	r2, [sp, #56]	; 0x38
 8004756:	2400      	movlt	r4, #0
 8004758:	2b00      	cmp	r3, #0
 800475a:	bfb5      	itete	lt
 800475c:	eba9 0703 	sublt.w	r7, r9, r3
 8004760:	464f      	movge	r7, r9
 8004762:	2300      	movlt	r3, #0
 8004764:	9b08      	ldrge	r3, [sp, #32]
 8004766:	e747      	b.n	80045f8 <_dtoa_r+0x738>
 8004768:	464f      	mov	r7, r9
 800476a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800476c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800476e:	e74c      	b.n	800460a <_dtoa_r+0x74a>
 8004770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004772:	e773      	b.n	800465c <_dtoa_r+0x79c>
 8004774:	3fe00000 	.word	0x3fe00000
 8004778:	40240000 	.word	0x40240000
 800477c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800477e:	2b01      	cmp	r3, #1
 8004780:	dc18      	bgt.n	80047b4 <_dtoa_r+0x8f4>
 8004782:	9b04      	ldr	r3, [sp, #16]
 8004784:	b9b3      	cbnz	r3, 80047b4 <_dtoa_r+0x8f4>
 8004786:	9b05      	ldr	r3, [sp, #20]
 8004788:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800478c:	b993      	cbnz	r3, 80047b4 <_dtoa_r+0x8f4>
 800478e:	9b05      	ldr	r3, [sp, #20]
 8004790:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004794:	0d1b      	lsrs	r3, r3, #20
 8004796:	051b      	lsls	r3, r3, #20
 8004798:	b17b      	cbz	r3, 80047ba <_dtoa_r+0x8fa>
 800479a:	f04f 0801 	mov.w	r8, #1
 800479e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a0:	f109 0901 	add.w	r9, r9, #1
 80047a4:	3301      	adds	r3, #1
 80047a6:	9309      	str	r3, [sp, #36]	; 0x24
 80047a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f47f af6f 	bne.w	800468e <_dtoa_r+0x7ce>
 80047b0:	2001      	movs	r0, #1
 80047b2:	e774      	b.n	800469e <_dtoa_r+0x7de>
 80047b4:	f04f 0800 	mov.w	r8, #0
 80047b8:	e7f6      	b.n	80047a8 <_dtoa_r+0x8e8>
 80047ba:	4698      	mov	r8, r3
 80047bc:	e7f4      	b.n	80047a8 <_dtoa_r+0x8e8>
 80047be:	d080      	beq.n	80046c2 <_dtoa_r+0x802>
 80047c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80047c2:	331c      	adds	r3, #28
 80047c4:	441a      	add	r2, r3
 80047c6:	4499      	add	r9, r3
 80047c8:	441f      	add	r7, r3
 80047ca:	9209      	str	r2, [sp, #36]	; 0x24
 80047cc:	e779      	b.n	80046c2 <_dtoa_r+0x802>
 80047ce:	4603      	mov	r3, r0
 80047d0:	e7f6      	b.n	80047c0 <_dtoa_r+0x900>
 80047d2:	9b08      	ldr	r3, [sp, #32]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	dc34      	bgt.n	8004842 <_dtoa_r+0x982>
 80047d8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80047da:	2b02      	cmp	r3, #2
 80047dc:	dd31      	ble.n	8004842 <_dtoa_r+0x982>
 80047de:	9b08      	ldr	r3, [sp, #32]
 80047e0:	9306      	str	r3, [sp, #24]
 80047e2:	9b06      	ldr	r3, [sp, #24]
 80047e4:	b963      	cbnz	r3, 8004800 <_dtoa_r+0x940>
 80047e6:	4621      	mov	r1, r4
 80047e8:	2205      	movs	r2, #5
 80047ea:	4628      	mov	r0, r5
 80047ec:	f000 faaa 	bl	8004d44 <__multadd>
 80047f0:	4601      	mov	r1, r0
 80047f2:	4604      	mov	r4, r0
 80047f4:	4650      	mov	r0, sl
 80047f6:	f000 fcbd 	bl	8005174 <__mcmp>
 80047fa:	2800      	cmp	r0, #0
 80047fc:	f73f adbf 	bgt.w	800437e <_dtoa_r+0x4be>
 8004800:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004802:	9f03      	ldr	r7, [sp, #12]
 8004804:	ea6f 0b03 	mvn.w	fp, r3
 8004808:	f04f 0800 	mov.w	r8, #0
 800480c:	4621      	mov	r1, r4
 800480e:	4628      	mov	r0, r5
 8004810:	f000 fa76 	bl	8004d00 <_Bfree>
 8004814:	2e00      	cmp	r6, #0
 8004816:	f43f aead 	beq.w	8004574 <_dtoa_r+0x6b4>
 800481a:	f1b8 0f00 	cmp.w	r8, #0
 800481e:	d005      	beq.n	800482c <_dtoa_r+0x96c>
 8004820:	45b0      	cmp	r8, r6
 8004822:	d003      	beq.n	800482c <_dtoa_r+0x96c>
 8004824:	4641      	mov	r1, r8
 8004826:	4628      	mov	r0, r5
 8004828:	f000 fa6a 	bl	8004d00 <_Bfree>
 800482c:	4631      	mov	r1, r6
 800482e:	4628      	mov	r0, r5
 8004830:	f000 fa66 	bl	8004d00 <_Bfree>
 8004834:	e69e      	b.n	8004574 <_dtoa_r+0x6b4>
 8004836:	2400      	movs	r4, #0
 8004838:	4626      	mov	r6, r4
 800483a:	e7e1      	b.n	8004800 <_dtoa_r+0x940>
 800483c:	46c3      	mov	fp, r8
 800483e:	4626      	mov	r6, r4
 8004840:	e59d      	b.n	800437e <_dtoa_r+0x4be>
 8004842:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004844:	2b00      	cmp	r3, #0
 8004846:	f000 80c8 	beq.w	80049da <_dtoa_r+0xb1a>
 800484a:	9b08      	ldr	r3, [sp, #32]
 800484c:	9306      	str	r3, [sp, #24]
 800484e:	2f00      	cmp	r7, #0
 8004850:	dd05      	ble.n	800485e <_dtoa_r+0x99e>
 8004852:	4631      	mov	r1, r6
 8004854:	463a      	mov	r2, r7
 8004856:	4628      	mov	r0, r5
 8004858:	f000 fc20 	bl	800509c <__lshift>
 800485c:	4606      	mov	r6, r0
 800485e:	f1b8 0f00 	cmp.w	r8, #0
 8004862:	d05b      	beq.n	800491c <_dtoa_r+0xa5c>
 8004864:	4628      	mov	r0, r5
 8004866:	6871      	ldr	r1, [r6, #4]
 8004868:	f000 fa0a 	bl	8004c80 <_Balloc>
 800486c:	4607      	mov	r7, r0
 800486e:	b928      	cbnz	r0, 800487c <_dtoa_r+0x9bc>
 8004870:	4602      	mov	r2, r0
 8004872:	f240 21ef 	movw	r1, #751	; 0x2ef
 8004876:	4b81      	ldr	r3, [pc, #516]	; (8004a7c <_dtoa_r+0xbbc>)
 8004878:	f7ff bb36 	b.w	8003ee8 <_dtoa_r+0x28>
 800487c:	6932      	ldr	r2, [r6, #16]
 800487e:	f106 010c 	add.w	r1, r6, #12
 8004882:	3202      	adds	r2, #2
 8004884:	0092      	lsls	r2, r2, #2
 8004886:	300c      	adds	r0, #12
 8004888:	f000 ff9e 	bl	80057c8 <memcpy>
 800488c:	2201      	movs	r2, #1
 800488e:	4639      	mov	r1, r7
 8004890:	4628      	mov	r0, r5
 8004892:	f000 fc03 	bl	800509c <__lshift>
 8004896:	46b0      	mov	r8, r6
 8004898:	4606      	mov	r6, r0
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	9a03      	ldr	r2, [sp, #12]
 800489e:	3301      	adds	r3, #1
 80048a0:	9308      	str	r3, [sp, #32]
 80048a2:	9b06      	ldr	r3, [sp, #24]
 80048a4:	4413      	add	r3, r2
 80048a6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048a8:	9b04      	ldr	r3, [sp, #16]
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	930a      	str	r3, [sp, #40]	; 0x28
 80048b0:	9b08      	ldr	r3, [sp, #32]
 80048b2:	4621      	mov	r1, r4
 80048b4:	3b01      	subs	r3, #1
 80048b6:	4650      	mov	r0, sl
 80048b8:	9304      	str	r3, [sp, #16]
 80048ba:	f7ff fa77 	bl	8003dac <quorem>
 80048be:	4641      	mov	r1, r8
 80048c0:	9006      	str	r0, [sp, #24]
 80048c2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80048c6:	4650      	mov	r0, sl
 80048c8:	f000 fc54 	bl	8005174 <__mcmp>
 80048cc:	4632      	mov	r2, r6
 80048ce:	9009      	str	r0, [sp, #36]	; 0x24
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	f000 fc6a 	bl	80051ac <__mdiff>
 80048d8:	68c2      	ldr	r2, [r0, #12]
 80048da:	4607      	mov	r7, r0
 80048dc:	bb02      	cbnz	r2, 8004920 <_dtoa_r+0xa60>
 80048de:	4601      	mov	r1, r0
 80048e0:	4650      	mov	r0, sl
 80048e2:	f000 fc47 	bl	8005174 <__mcmp>
 80048e6:	4602      	mov	r2, r0
 80048e8:	4639      	mov	r1, r7
 80048ea:	4628      	mov	r0, r5
 80048ec:	920c      	str	r2, [sp, #48]	; 0x30
 80048ee:	f000 fa07 	bl	8004d00 <_Bfree>
 80048f2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80048f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80048f6:	9f08      	ldr	r7, [sp, #32]
 80048f8:	ea43 0102 	orr.w	r1, r3, r2
 80048fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048fe:	4319      	orrs	r1, r3
 8004900:	d110      	bne.n	8004924 <_dtoa_r+0xa64>
 8004902:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8004906:	d029      	beq.n	800495c <_dtoa_r+0xa9c>
 8004908:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	dd02      	ble.n	8004914 <_dtoa_r+0xa54>
 800490e:	9b06      	ldr	r3, [sp, #24]
 8004910:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8004914:	9b04      	ldr	r3, [sp, #16]
 8004916:	f883 9000 	strb.w	r9, [r3]
 800491a:	e777      	b.n	800480c <_dtoa_r+0x94c>
 800491c:	4630      	mov	r0, r6
 800491e:	e7ba      	b.n	8004896 <_dtoa_r+0x9d6>
 8004920:	2201      	movs	r2, #1
 8004922:	e7e1      	b.n	80048e8 <_dtoa_r+0xa28>
 8004924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004926:	2b00      	cmp	r3, #0
 8004928:	db04      	blt.n	8004934 <_dtoa_r+0xa74>
 800492a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800492c:	430b      	orrs	r3, r1
 800492e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004930:	430b      	orrs	r3, r1
 8004932:	d120      	bne.n	8004976 <_dtoa_r+0xab6>
 8004934:	2a00      	cmp	r2, #0
 8004936:	dded      	ble.n	8004914 <_dtoa_r+0xa54>
 8004938:	4651      	mov	r1, sl
 800493a:	2201      	movs	r2, #1
 800493c:	4628      	mov	r0, r5
 800493e:	f000 fbad 	bl	800509c <__lshift>
 8004942:	4621      	mov	r1, r4
 8004944:	4682      	mov	sl, r0
 8004946:	f000 fc15 	bl	8005174 <__mcmp>
 800494a:	2800      	cmp	r0, #0
 800494c:	dc03      	bgt.n	8004956 <_dtoa_r+0xa96>
 800494e:	d1e1      	bne.n	8004914 <_dtoa_r+0xa54>
 8004950:	f019 0f01 	tst.w	r9, #1
 8004954:	d0de      	beq.n	8004914 <_dtoa_r+0xa54>
 8004956:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800495a:	d1d8      	bne.n	800490e <_dtoa_r+0xa4e>
 800495c:	2339      	movs	r3, #57	; 0x39
 800495e:	9a04      	ldr	r2, [sp, #16]
 8004960:	7013      	strb	r3, [r2, #0]
 8004962:	463b      	mov	r3, r7
 8004964:	461f      	mov	r7, r3
 8004966:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800496a:	3b01      	subs	r3, #1
 800496c:	2a39      	cmp	r2, #57	; 0x39
 800496e:	d06b      	beq.n	8004a48 <_dtoa_r+0xb88>
 8004970:	3201      	adds	r2, #1
 8004972:	701a      	strb	r2, [r3, #0]
 8004974:	e74a      	b.n	800480c <_dtoa_r+0x94c>
 8004976:	2a00      	cmp	r2, #0
 8004978:	dd07      	ble.n	800498a <_dtoa_r+0xaca>
 800497a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800497e:	d0ed      	beq.n	800495c <_dtoa_r+0xa9c>
 8004980:	9a04      	ldr	r2, [sp, #16]
 8004982:	f109 0301 	add.w	r3, r9, #1
 8004986:	7013      	strb	r3, [r2, #0]
 8004988:	e740      	b.n	800480c <_dtoa_r+0x94c>
 800498a:	9b08      	ldr	r3, [sp, #32]
 800498c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800498e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8004992:	4293      	cmp	r3, r2
 8004994:	d042      	beq.n	8004a1c <_dtoa_r+0xb5c>
 8004996:	4651      	mov	r1, sl
 8004998:	2300      	movs	r3, #0
 800499a:	220a      	movs	r2, #10
 800499c:	4628      	mov	r0, r5
 800499e:	f000 f9d1 	bl	8004d44 <__multadd>
 80049a2:	45b0      	cmp	r8, r6
 80049a4:	4682      	mov	sl, r0
 80049a6:	f04f 0300 	mov.w	r3, #0
 80049aa:	f04f 020a 	mov.w	r2, #10
 80049ae:	4641      	mov	r1, r8
 80049b0:	4628      	mov	r0, r5
 80049b2:	d107      	bne.n	80049c4 <_dtoa_r+0xb04>
 80049b4:	f000 f9c6 	bl	8004d44 <__multadd>
 80049b8:	4680      	mov	r8, r0
 80049ba:	4606      	mov	r6, r0
 80049bc:	9b08      	ldr	r3, [sp, #32]
 80049be:	3301      	adds	r3, #1
 80049c0:	9308      	str	r3, [sp, #32]
 80049c2:	e775      	b.n	80048b0 <_dtoa_r+0x9f0>
 80049c4:	f000 f9be 	bl	8004d44 <__multadd>
 80049c8:	4631      	mov	r1, r6
 80049ca:	4680      	mov	r8, r0
 80049cc:	2300      	movs	r3, #0
 80049ce:	220a      	movs	r2, #10
 80049d0:	4628      	mov	r0, r5
 80049d2:	f000 f9b7 	bl	8004d44 <__multadd>
 80049d6:	4606      	mov	r6, r0
 80049d8:	e7f0      	b.n	80049bc <_dtoa_r+0xafc>
 80049da:	9b08      	ldr	r3, [sp, #32]
 80049dc:	9306      	str	r3, [sp, #24]
 80049de:	9f03      	ldr	r7, [sp, #12]
 80049e0:	4621      	mov	r1, r4
 80049e2:	4650      	mov	r0, sl
 80049e4:	f7ff f9e2 	bl	8003dac <quorem>
 80049e8:	9b03      	ldr	r3, [sp, #12]
 80049ea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80049ee:	f807 9b01 	strb.w	r9, [r7], #1
 80049f2:	1afa      	subs	r2, r7, r3
 80049f4:	9b06      	ldr	r3, [sp, #24]
 80049f6:	4293      	cmp	r3, r2
 80049f8:	dd07      	ble.n	8004a0a <_dtoa_r+0xb4a>
 80049fa:	4651      	mov	r1, sl
 80049fc:	2300      	movs	r3, #0
 80049fe:	220a      	movs	r2, #10
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f99f 	bl	8004d44 <__multadd>
 8004a06:	4682      	mov	sl, r0
 8004a08:	e7ea      	b.n	80049e0 <_dtoa_r+0xb20>
 8004a0a:	9b06      	ldr	r3, [sp, #24]
 8004a0c:	f04f 0800 	mov.w	r8, #0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	bfcc      	ite	gt
 8004a14:	461f      	movgt	r7, r3
 8004a16:	2701      	movle	r7, #1
 8004a18:	9b03      	ldr	r3, [sp, #12]
 8004a1a:	441f      	add	r7, r3
 8004a1c:	4651      	mov	r1, sl
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fb3b 	bl	800509c <__lshift>
 8004a26:	4621      	mov	r1, r4
 8004a28:	4682      	mov	sl, r0
 8004a2a:	f000 fba3 	bl	8005174 <__mcmp>
 8004a2e:	2800      	cmp	r0, #0
 8004a30:	dc97      	bgt.n	8004962 <_dtoa_r+0xaa2>
 8004a32:	d102      	bne.n	8004a3a <_dtoa_r+0xb7a>
 8004a34:	f019 0f01 	tst.w	r9, #1
 8004a38:	d193      	bne.n	8004962 <_dtoa_r+0xaa2>
 8004a3a:	463b      	mov	r3, r7
 8004a3c:	461f      	mov	r7, r3
 8004a3e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004a42:	2a30      	cmp	r2, #48	; 0x30
 8004a44:	d0fa      	beq.n	8004a3c <_dtoa_r+0xb7c>
 8004a46:	e6e1      	b.n	800480c <_dtoa_r+0x94c>
 8004a48:	9a03      	ldr	r2, [sp, #12]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d18a      	bne.n	8004964 <_dtoa_r+0xaa4>
 8004a4e:	2331      	movs	r3, #49	; 0x31
 8004a50:	f10b 0b01 	add.w	fp, fp, #1
 8004a54:	e797      	b.n	8004986 <_dtoa_r+0xac6>
 8004a56:	4b0a      	ldr	r3, [pc, #40]	; (8004a80 <_dtoa_r+0xbc0>)
 8004a58:	f7ff ba9f 	b.w	8003f9a <_dtoa_r+0xda>
 8004a5c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f47f aa77 	bne.w	8003f52 <_dtoa_r+0x92>
 8004a64:	4b07      	ldr	r3, [pc, #28]	; (8004a84 <_dtoa_r+0xbc4>)
 8004a66:	f7ff ba98 	b.w	8003f9a <_dtoa_r+0xda>
 8004a6a:	9b06      	ldr	r3, [sp, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	dcb6      	bgt.n	80049de <_dtoa_r+0xb1e>
 8004a70:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004a72:	2b02      	cmp	r3, #2
 8004a74:	f73f aeb5 	bgt.w	80047e2 <_dtoa_r+0x922>
 8004a78:	e7b1      	b.n	80049de <_dtoa_r+0xb1e>
 8004a7a:	bf00      	nop
 8004a7c:	08005f8e 	.word	0x08005f8e
 8004a80:	08005eee 	.word	0x08005eee
 8004a84:	08005f12 	.word	0x08005f12

08004a88 <_free_r>:
 8004a88:	b538      	push	{r3, r4, r5, lr}
 8004a8a:	4605      	mov	r5, r0
 8004a8c:	2900      	cmp	r1, #0
 8004a8e:	d040      	beq.n	8004b12 <_free_r+0x8a>
 8004a90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a94:	1f0c      	subs	r4, r1, #4
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	bfb8      	it	lt
 8004a9a:	18e4      	addlt	r4, r4, r3
 8004a9c:	f000 f8e4 	bl	8004c68 <__malloc_lock>
 8004aa0:	4a1c      	ldr	r2, [pc, #112]	; (8004b14 <_free_r+0x8c>)
 8004aa2:	6813      	ldr	r3, [r2, #0]
 8004aa4:	b933      	cbnz	r3, 8004ab4 <_free_r+0x2c>
 8004aa6:	6063      	str	r3, [r4, #4]
 8004aa8:	6014      	str	r4, [r2, #0]
 8004aaa:	4628      	mov	r0, r5
 8004aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ab0:	f000 b8e0 	b.w	8004c74 <__malloc_unlock>
 8004ab4:	42a3      	cmp	r3, r4
 8004ab6:	d908      	bls.n	8004aca <_free_r+0x42>
 8004ab8:	6820      	ldr	r0, [r4, #0]
 8004aba:	1821      	adds	r1, r4, r0
 8004abc:	428b      	cmp	r3, r1
 8004abe:	bf01      	itttt	eq
 8004ac0:	6819      	ldreq	r1, [r3, #0]
 8004ac2:	685b      	ldreq	r3, [r3, #4]
 8004ac4:	1809      	addeq	r1, r1, r0
 8004ac6:	6021      	streq	r1, [r4, #0]
 8004ac8:	e7ed      	b.n	8004aa6 <_free_r+0x1e>
 8004aca:	461a      	mov	r2, r3
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	b10b      	cbz	r3, 8004ad4 <_free_r+0x4c>
 8004ad0:	42a3      	cmp	r3, r4
 8004ad2:	d9fa      	bls.n	8004aca <_free_r+0x42>
 8004ad4:	6811      	ldr	r1, [r2, #0]
 8004ad6:	1850      	adds	r0, r2, r1
 8004ad8:	42a0      	cmp	r0, r4
 8004ada:	d10b      	bne.n	8004af4 <_free_r+0x6c>
 8004adc:	6820      	ldr	r0, [r4, #0]
 8004ade:	4401      	add	r1, r0
 8004ae0:	1850      	adds	r0, r2, r1
 8004ae2:	4283      	cmp	r3, r0
 8004ae4:	6011      	str	r1, [r2, #0]
 8004ae6:	d1e0      	bne.n	8004aaa <_free_r+0x22>
 8004ae8:	6818      	ldr	r0, [r3, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	4408      	add	r0, r1
 8004aee:	6010      	str	r0, [r2, #0]
 8004af0:	6053      	str	r3, [r2, #4]
 8004af2:	e7da      	b.n	8004aaa <_free_r+0x22>
 8004af4:	d902      	bls.n	8004afc <_free_r+0x74>
 8004af6:	230c      	movs	r3, #12
 8004af8:	602b      	str	r3, [r5, #0]
 8004afa:	e7d6      	b.n	8004aaa <_free_r+0x22>
 8004afc:	6820      	ldr	r0, [r4, #0]
 8004afe:	1821      	adds	r1, r4, r0
 8004b00:	428b      	cmp	r3, r1
 8004b02:	bf01      	itttt	eq
 8004b04:	6819      	ldreq	r1, [r3, #0]
 8004b06:	685b      	ldreq	r3, [r3, #4]
 8004b08:	1809      	addeq	r1, r1, r0
 8004b0a:	6021      	streq	r1, [r4, #0]
 8004b0c:	6063      	str	r3, [r4, #4]
 8004b0e:	6054      	str	r4, [r2, #4]
 8004b10:	e7cb      	b.n	8004aaa <_free_r+0x22>
 8004b12:	bd38      	pop	{r3, r4, r5, pc}
 8004b14:	200003ec 	.word	0x200003ec

08004b18 <malloc>:
 8004b18:	4b02      	ldr	r3, [pc, #8]	; (8004b24 <malloc+0xc>)
 8004b1a:	4601      	mov	r1, r0
 8004b1c:	6818      	ldr	r0, [r3, #0]
 8004b1e:	f000 b823 	b.w	8004b68 <_malloc_r>
 8004b22:	bf00      	nop
 8004b24:	20000064 	.word	0x20000064

08004b28 <sbrk_aligned>:
 8004b28:	b570      	push	{r4, r5, r6, lr}
 8004b2a:	4e0e      	ldr	r6, [pc, #56]	; (8004b64 <sbrk_aligned+0x3c>)
 8004b2c:	460c      	mov	r4, r1
 8004b2e:	6831      	ldr	r1, [r6, #0]
 8004b30:	4605      	mov	r5, r0
 8004b32:	b911      	cbnz	r1, 8004b3a <sbrk_aligned+0x12>
 8004b34:	f000 fe38 	bl	80057a8 <_sbrk_r>
 8004b38:	6030      	str	r0, [r6, #0]
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	4628      	mov	r0, r5
 8004b3e:	f000 fe33 	bl	80057a8 <_sbrk_r>
 8004b42:	1c43      	adds	r3, r0, #1
 8004b44:	d00a      	beq.n	8004b5c <sbrk_aligned+0x34>
 8004b46:	1cc4      	adds	r4, r0, #3
 8004b48:	f024 0403 	bic.w	r4, r4, #3
 8004b4c:	42a0      	cmp	r0, r4
 8004b4e:	d007      	beq.n	8004b60 <sbrk_aligned+0x38>
 8004b50:	1a21      	subs	r1, r4, r0
 8004b52:	4628      	mov	r0, r5
 8004b54:	f000 fe28 	bl	80057a8 <_sbrk_r>
 8004b58:	3001      	adds	r0, #1
 8004b5a:	d101      	bne.n	8004b60 <sbrk_aligned+0x38>
 8004b5c:	f04f 34ff 	mov.w	r4, #4294967295
 8004b60:	4620      	mov	r0, r4
 8004b62:	bd70      	pop	{r4, r5, r6, pc}
 8004b64:	200003f0 	.word	0x200003f0

08004b68 <_malloc_r>:
 8004b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b6c:	1ccd      	adds	r5, r1, #3
 8004b6e:	f025 0503 	bic.w	r5, r5, #3
 8004b72:	3508      	adds	r5, #8
 8004b74:	2d0c      	cmp	r5, #12
 8004b76:	bf38      	it	cc
 8004b78:	250c      	movcc	r5, #12
 8004b7a:	2d00      	cmp	r5, #0
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	db01      	blt.n	8004b84 <_malloc_r+0x1c>
 8004b80:	42a9      	cmp	r1, r5
 8004b82:	d905      	bls.n	8004b90 <_malloc_r+0x28>
 8004b84:	230c      	movs	r3, #12
 8004b86:	2600      	movs	r6, #0
 8004b88:	603b      	str	r3, [r7, #0]
 8004b8a:	4630      	mov	r0, r6
 8004b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b90:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004c64 <_malloc_r+0xfc>
 8004b94:	f000 f868 	bl	8004c68 <__malloc_lock>
 8004b98:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9c:	461c      	mov	r4, r3
 8004b9e:	bb5c      	cbnz	r4, 8004bf8 <_malloc_r+0x90>
 8004ba0:	4629      	mov	r1, r5
 8004ba2:	4638      	mov	r0, r7
 8004ba4:	f7ff ffc0 	bl	8004b28 <sbrk_aligned>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	4604      	mov	r4, r0
 8004bac:	d155      	bne.n	8004c5a <_malloc_r+0xf2>
 8004bae:	f8d8 4000 	ldr.w	r4, [r8]
 8004bb2:	4626      	mov	r6, r4
 8004bb4:	2e00      	cmp	r6, #0
 8004bb6:	d145      	bne.n	8004c44 <_malloc_r+0xdc>
 8004bb8:	2c00      	cmp	r4, #0
 8004bba:	d048      	beq.n	8004c4e <_malloc_r+0xe6>
 8004bbc:	6823      	ldr	r3, [r4, #0]
 8004bbe:	4631      	mov	r1, r6
 8004bc0:	4638      	mov	r0, r7
 8004bc2:	eb04 0903 	add.w	r9, r4, r3
 8004bc6:	f000 fdef 	bl	80057a8 <_sbrk_r>
 8004bca:	4581      	cmp	r9, r0
 8004bcc:	d13f      	bne.n	8004c4e <_malloc_r+0xe6>
 8004bce:	6821      	ldr	r1, [r4, #0]
 8004bd0:	4638      	mov	r0, r7
 8004bd2:	1a6d      	subs	r5, r5, r1
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	f7ff ffa7 	bl	8004b28 <sbrk_aligned>
 8004bda:	3001      	adds	r0, #1
 8004bdc:	d037      	beq.n	8004c4e <_malloc_r+0xe6>
 8004bde:	6823      	ldr	r3, [r4, #0]
 8004be0:	442b      	add	r3, r5
 8004be2:	6023      	str	r3, [r4, #0]
 8004be4:	f8d8 3000 	ldr.w	r3, [r8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d038      	beq.n	8004c5e <_malloc_r+0xf6>
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	42a2      	cmp	r2, r4
 8004bf0:	d12b      	bne.n	8004c4a <_malloc_r+0xe2>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	605a      	str	r2, [r3, #4]
 8004bf6:	e00f      	b.n	8004c18 <_malloc_r+0xb0>
 8004bf8:	6822      	ldr	r2, [r4, #0]
 8004bfa:	1b52      	subs	r2, r2, r5
 8004bfc:	d41f      	bmi.n	8004c3e <_malloc_r+0xd6>
 8004bfe:	2a0b      	cmp	r2, #11
 8004c00:	d917      	bls.n	8004c32 <_malloc_r+0xca>
 8004c02:	1961      	adds	r1, r4, r5
 8004c04:	42a3      	cmp	r3, r4
 8004c06:	6025      	str	r5, [r4, #0]
 8004c08:	bf18      	it	ne
 8004c0a:	6059      	strne	r1, [r3, #4]
 8004c0c:	6863      	ldr	r3, [r4, #4]
 8004c0e:	bf08      	it	eq
 8004c10:	f8c8 1000 	streq.w	r1, [r8]
 8004c14:	5162      	str	r2, [r4, r5]
 8004c16:	604b      	str	r3, [r1, #4]
 8004c18:	4638      	mov	r0, r7
 8004c1a:	f104 060b 	add.w	r6, r4, #11
 8004c1e:	f000 f829 	bl	8004c74 <__malloc_unlock>
 8004c22:	f026 0607 	bic.w	r6, r6, #7
 8004c26:	1d23      	adds	r3, r4, #4
 8004c28:	1af2      	subs	r2, r6, r3
 8004c2a:	d0ae      	beq.n	8004b8a <_malloc_r+0x22>
 8004c2c:	1b9b      	subs	r3, r3, r6
 8004c2e:	50a3      	str	r3, [r4, r2]
 8004c30:	e7ab      	b.n	8004b8a <_malloc_r+0x22>
 8004c32:	42a3      	cmp	r3, r4
 8004c34:	6862      	ldr	r2, [r4, #4]
 8004c36:	d1dd      	bne.n	8004bf4 <_malloc_r+0x8c>
 8004c38:	f8c8 2000 	str.w	r2, [r8]
 8004c3c:	e7ec      	b.n	8004c18 <_malloc_r+0xb0>
 8004c3e:	4623      	mov	r3, r4
 8004c40:	6864      	ldr	r4, [r4, #4]
 8004c42:	e7ac      	b.n	8004b9e <_malloc_r+0x36>
 8004c44:	4634      	mov	r4, r6
 8004c46:	6876      	ldr	r6, [r6, #4]
 8004c48:	e7b4      	b.n	8004bb4 <_malloc_r+0x4c>
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	e7cc      	b.n	8004be8 <_malloc_r+0x80>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	4638      	mov	r0, r7
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	f000 f80e 	bl	8004c74 <__malloc_unlock>
 8004c58:	e797      	b.n	8004b8a <_malloc_r+0x22>
 8004c5a:	6025      	str	r5, [r4, #0]
 8004c5c:	e7dc      	b.n	8004c18 <_malloc_r+0xb0>
 8004c5e:	605b      	str	r3, [r3, #4]
 8004c60:	deff      	udf	#255	; 0xff
 8004c62:	bf00      	nop
 8004c64:	200003ec 	.word	0x200003ec

08004c68 <__malloc_lock>:
 8004c68:	4801      	ldr	r0, [pc, #4]	; (8004c70 <__malloc_lock+0x8>)
 8004c6a:	f7ff b88f 	b.w	8003d8c <__retarget_lock_acquire_recursive>
 8004c6e:	bf00      	nop
 8004c70:	200003e8 	.word	0x200003e8

08004c74 <__malloc_unlock>:
 8004c74:	4801      	ldr	r0, [pc, #4]	; (8004c7c <__malloc_unlock+0x8>)
 8004c76:	f7ff b88a 	b.w	8003d8e <__retarget_lock_release_recursive>
 8004c7a:	bf00      	nop
 8004c7c:	200003e8 	.word	0x200003e8

08004c80 <_Balloc>:
 8004c80:	b570      	push	{r4, r5, r6, lr}
 8004c82:	69c6      	ldr	r6, [r0, #28]
 8004c84:	4604      	mov	r4, r0
 8004c86:	460d      	mov	r5, r1
 8004c88:	b976      	cbnz	r6, 8004ca8 <_Balloc+0x28>
 8004c8a:	2010      	movs	r0, #16
 8004c8c:	f7ff ff44 	bl	8004b18 <malloc>
 8004c90:	4602      	mov	r2, r0
 8004c92:	61e0      	str	r0, [r4, #28]
 8004c94:	b920      	cbnz	r0, 8004ca0 <_Balloc+0x20>
 8004c96:	216b      	movs	r1, #107	; 0x6b
 8004c98:	4b17      	ldr	r3, [pc, #92]	; (8004cf8 <_Balloc+0x78>)
 8004c9a:	4818      	ldr	r0, [pc, #96]	; (8004cfc <_Balloc+0x7c>)
 8004c9c:	f000 fda2 	bl	80057e4 <__assert_func>
 8004ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004ca4:	6006      	str	r6, [r0, #0]
 8004ca6:	60c6      	str	r6, [r0, #12]
 8004ca8:	69e6      	ldr	r6, [r4, #28]
 8004caa:	68f3      	ldr	r3, [r6, #12]
 8004cac:	b183      	cbz	r3, 8004cd0 <_Balloc+0x50>
 8004cae:	69e3      	ldr	r3, [r4, #28]
 8004cb0:	68db      	ldr	r3, [r3, #12]
 8004cb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004cb6:	b9b8      	cbnz	r0, 8004ce8 <_Balloc+0x68>
 8004cb8:	2101      	movs	r1, #1
 8004cba:	fa01 f605 	lsl.w	r6, r1, r5
 8004cbe:	1d72      	adds	r2, r6, #5
 8004cc0:	4620      	mov	r0, r4
 8004cc2:	0092      	lsls	r2, r2, #2
 8004cc4:	f000 fdac 	bl	8005820 <_calloc_r>
 8004cc8:	b160      	cbz	r0, 8004ce4 <_Balloc+0x64>
 8004cca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004cce:	e00e      	b.n	8004cee <_Balloc+0x6e>
 8004cd0:	2221      	movs	r2, #33	; 0x21
 8004cd2:	2104      	movs	r1, #4
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	f000 fda3 	bl	8005820 <_calloc_r>
 8004cda:	69e3      	ldr	r3, [r4, #28]
 8004cdc:	60f0      	str	r0, [r6, #12]
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d1e4      	bne.n	8004cae <_Balloc+0x2e>
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	bd70      	pop	{r4, r5, r6, pc}
 8004ce8:	6802      	ldr	r2, [r0, #0]
 8004cea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004cee:	2300      	movs	r3, #0
 8004cf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004cf4:	e7f7      	b.n	8004ce6 <_Balloc+0x66>
 8004cf6:	bf00      	nop
 8004cf8:	08005f1f 	.word	0x08005f1f
 8004cfc:	08005f9f 	.word	0x08005f9f

08004d00 <_Bfree>:
 8004d00:	b570      	push	{r4, r5, r6, lr}
 8004d02:	69c6      	ldr	r6, [r0, #28]
 8004d04:	4605      	mov	r5, r0
 8004d06:	460c      	mov	r4, r1
 8004d08:	b976      	cbnz	r6, 8004d28 <_Bfree+0x28>
 8004d0a:	2010      	movs	r0, #16
 8004d0c:	f7ff ff04 	bl	8004b18 <malloc>
 8004d10:	4602      	mov	r2, r0
 8004d12:	61e8      	str	r0, [r5, #28]
 8004d14:	b920      	cbnz	r0, 8004d20 <_Bfree+0x20>
 8004d16:	218f      	movs	r1, #143	; 0x8f
 8004d18:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <_Bfree+0x3c>)
 8004d1a:	4809      	ldr	r0, [pc, #36]	; (8004d40 <_Bfree+0x40>)
 8004d1c:	f000 fd62 	bl	80057e4 <__assert_func>
 8004d20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004d24:	6006      	str	r6, [r0, #0]
 8004d26:	60c6      	str	r6, [r0, #12]
 8004d28:	b13c      	cbz	r4, 8004d3a <_Bfree+0x3a>
 8004d2a:	69eb      	ldr	r3, [r5, #28]
 8004d2c:	6862      	ldr	r2, [r4, #4]
 8004d2e:	68db      	ldr	r3, [r3, #12]
 8004d30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004d34:	6021      	str	r1, [r4, #0]
 8004d36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	08005f1f 	.word	0x08005f1f
 8004d40:	08005f9f 	.word	0x08005f9f

08004d44 <__multadd>:
 8004d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d48:	4607      	mov	r7, r0
 8004d4a:	460c      	mov	r4, r1
 8004d4c:	461e      	mov	r6, r3
 8004d4e:	2000      	movs	r0, #0
 8004d50:	690d      	ldr	r5, [r1, #16]
 8004d52:	f101 0c14 	add.w	ip, r1, #20
 8004d56:	f8dc 3000 	ldr.w	r3, [ip]
 8004d5a:	3001      	adds	r0, #1
 8004d5c:	b299      	uxth	r1, r3
 8004d5e:	fb02 6101 	mla	r1, r2, r1, r6
 8004d62:	0c1e      	lsrs	r6, r3, #16
 8004d64:	0c0b      	lsrs	r3, r1, #16
 8004d66:	fb02 3306 	mla	r3, r2, r6, r3
 8004d6a:	b289      	uxth	r1, r1
 8004d6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004d70:	4285      	cmp	r5, r0
 8004d72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004d76:	f84c 1b04 	str.w	r1, [ip], #4
 8004d7a:	dcec      	bgt.n	8004d56 <__multadd+0x12>
 8004d7c:	b30e      	cbz	r6, 8004dc2 <__multadd+0x7e>
 8004d7e:	68a3      	ldr	r3, [r4, #8]
 8004d80:	42ab      	cmp	r3, r5
 8004d82:	dc19      	bgt.n	8004db8 <__multadd+0x74>
 8004d84:	6861      	ldr	r1, [r4, #4]
 8004d86:	4638      	mov	r0, r7
 8004d88:	3101      	adds	r1, #1
 8004d8a:	f7ff ff79 	bl	8004c80 <_Balloc>
 8004d8e:	4680      	mov	r8, r0
 8004d90:	b928      	cbnz	r0, 8004d9e <__multadd+0x5a>
 8004d92:	4602      	mov	r2, r0
 8004d94:	21ba      	movs	r1, #186	; 0xba
 8004d96:	4b0c      	ldr	r3, [pc, #48]	; (8004dc8 <__multadd+0x84>)
 8004d98:	480c      	ldr	r0, [pc, #48]	; (8004dcc <__multadd+0x88>)
 8004d9a:	f000 fd23 	bl	80057e4 <__assert_func>
 8004d9e:	6922      	ldr	r2, [r4, #16]
 8004da0:	f104 010c 	add.w	r1, r4, #12
 8004da4:	3202      	adds	r2, #2
 8004da6:	0092      	lsls	r2, r2, #2
 8004da8:	300c      	adds	r0, #12
 8004daa:	f000 fd0d 	bl	80057c8 <memcpy>
 8004dae:	4621      	mov	r1, r4
 8004db0:	4638      	mov	r0, r7
 8004db2:	f7ff ffa5 	bl	8004d00 <_Bfree>
 8004db6:	4644      	mov	r4, r8
 8004db8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004dbc:	3501      	adds	r5, #1
 8004dbe:	615e      	str	r6, [r3, #20]
 8004dc0:	6125      	str	r5, [r4, #16]
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004dc8:	08005f8e 	.word	0x08005f8e
 8004dcc:	08005f9f 	.word	0x08005f9f

08004dd0 <__hi0bits>:
 8004dd0:	0c02      	lsrs	r2, r0, #16
 8004dd2:	0412      	lsls	r2, r2, #16
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	b9ca      	cbnz	r2, 8004e0c <__hi0bits+0x3c>
 8004dd8:	0403      	lsls	r3, r0, #16
 8004dda:	2010      	movs	r0, #16
 8004ddc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8004de0:	bf04      	itt	eq
 8004de2:	021b      	lsleq	r3, r3, #8
 8004de4:	3008      	addeq	r0, #8
 8004de6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8004dea:	bf04      	itt	eq
 8004dec:	011b      	lsleq	r3, r3, #4
 8004dee:	3004      	addeq	r0, #4
 8004df0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8004df4:	bf04      	itt	eq
 8004df6:	009b      	lsleq	r3, r3, #2
 8004df8:	3002      	addeq	r0, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	db05      	blt.n	8004e0a <__hi0bits+0x3a>
 8004dfe:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8004e02:	f100 0001 	add.w	r0, r0, #1
 8004e06:	bf08      	it	eq
 8004e08:	2020      	moveq	r0, #32
 8004e0a:	4770      	bx	lr
 8004e0c:	2000      	movs	r0, #0
 8004e0e:	e7e5      	b.n	8004ddc <__hi0bits+0xc>

08004e10 <__lo0bits>:
 8004e10:	6803      	ldr	r3, [r0, #0]
 8004e12:	4602      	mov	r2, r0
 8004e14:	f013 0007 	ands.w	r0, r3, #7
 8004e18:	d00b      	beq.n	8004e32 <__lo0bits+0x22>
 8004e1a:	07d9      	lsls	r1, r3, #31
 8004e1c:	d421      	bmi.n	8004e62 <__lo0bits+0x52>
 8004e1e:	0798      	lsls	r0, r3, #30
 8004e20:	bf49      	itett	mi
 8004e22:	085b      	lsrmi	r3, r3, #1
 8004e24:	089b      	lsrpl	r3, r3, #2
 8004e26:	2001      	movmi	r0, #1
 8004e28:	6013      	strmi	r3, [r2, #0]
 8004e2a:	bf5c      	itt	pl
 8004e2c:	2002      	movpl	r0, #2
 8004e2e:	6013      	strpl	r3, [r2, #0]
 8004e30:	4770      	bx	lr
 8004e32:	b299      	uxth	r1, r3
 8004e34:	b909      	cbnz	r1, 8004e3a <__lo0bits+0x2a>
 8004e36:	2010      	movs	r0, #16
 8004e38:	0c1b      	lsrs	r3, r3, #16
 8004e3a:	b2d9      	uxtb	r1, r3
 8004e3c:	b909      	cbnz	r1, 8004e42 <__lo0bits+0x32>
 8004e3e:	3008      	adds	r0, #8
 8004e40:	0a1b      	lsrs	r3, r3, #8
 8004e42:	0719      	lsls	r1, r3, #28
 8004e44:	bf04      	itt	eq
 8004e46:	091b      	lsreq	r3, r3, #4
 8004e48:	3004      	addeq	r0, #4
 8004e4a:	0799      	lsls	r1, r3, #30
 8004e4c:	bf04      	itt	eq
 8004e4e:	089b      	lsreq	r3, r3, #2
 8004e50:	3002      	addeq	r0, #2
 8004e52:	07d9      	lsls	r1, r3, #31
 8004e54:	d403      	bmi.n	8004e5e <__lo0bits+0x4e>
 8004e56:	085b      	lsrs	r3, r3, #1
 8004e58:	f100 0001 	add.w	r0, r0, #1
 8004e5c:	d003      	beq.n	8004e66 <__lo0bits+0x56>
 8004e5e:	6013      	str	r3, [r2, #0]
 8004e60:	4770      	bx	lr
 8004e62:	2000      	movs	r0, #0
 8004e64:	4770      	bx	lr
 8004e66:	2020      	movs	r0, #32
 8004e68:	4770      	bx	lr
	...

08004e6c <__i2b>:
 8004e6c:	b510      	push	{r4, lr}
 8004e6e:	460c      	mov	r4, r1
 8004e70:	2101      	movs	r1, #1
 8004e72:	f7ff ff05 	bl	8004c80 <_Balloc>
 8004e76:	4602      	mov	r2, r0
 8004e78:	b928      	cbnz	r0, 8004e86 <__i2b+0x1a>
 8004e7a:	f240 1145 	movw	r1, #325	; 0x145
 8004e7e:	4b04      	ldr	r3, [pc, #16]	; (8004e90 <__i2b+0x24>)
 8004e80:	4804      	ldr	r0, [pc, #16]	; (8004e94 <__i2b+0x28>)
 8004e82:	f000 fcaf 	bl	80057e4 <__assert_func>
 8004e86:	2301      	movs	r3, #1
 8004e88:	6144      	str	r4, [r0, #20]
 8004e8a:	6103      	str	r3, [r0, #16]
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	08005f8e 	.word	0x08005f8e
 8004e94:	08005f9f 	.word	0x08005f9f

08004e98 <__multiply>:
 8004e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e9c:	4691      	mov	r9, r2
 8004e9e:	690a      	ldr	r2, [r1, #16]
 8004ea0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004ea4:	460c      	mov	r4, r1
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	bfbe      	ittt	lt
 8004eaa:	460b      	movlt	r3, r1
 8004eac:	464c      	movlt	r4, r9
 8004eae:	4699      	movlt	r9, r3
 8004eb0:	6927      	ldr	r7, [r4, #16]
 8004eb2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004eb6:	68a3      	ldr	r3, [r4, #8]
 8004eb8:	6861      	ldr	r1, [r4, #4]
 8004eba:	eb07 060a 	add.w	r6, r7, sl
 8004ebe:	42b3      	cmp	r3, r6
 8004ec0:	b085      	sub	sp, #20
 8004ec2:	bfb8      	it	lt
 8004ec4:	3101      	addlt	r1, #1
 8004ec6:	f7ff fedb 	bl	8004c80 <_Balloc>
 8004eca:	b930      	cbnz	r0, 8004eda <__multiply+0x42>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8004ed2:	4b43      	ldr	r3, [pc, #268]	; (8004fe0 <__multiply+0x148>)
 8004ed4:	4843      	ldr	r0, [pc, #268]	; (8004fe4 <__multiply+0x14c>)
 8004ed6:	f000 fc85 	bl	80057e4 <__assert_func>
 8004eda:	f100 0514 	add.w	r5, r0, #20
 8004ede:	462b      	mov	r3, r5
 8004ee0:	2200      	movs	r2, #0
 8004ee2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004ee6:	4543      	cmp	r3, r8
 8004ee8:	d321      	bcc.n	8004f2e <__multiply+0x96>
 8004eea:	f104 0314 	add.w	r3, r4, #20
 8004eee:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ef2:	f109 0314 	add.w	r3, r9, #20
 8004ef6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004efa:	9202      	str	r2, [sp, #8]
 8004efc:	1b3a      	subs	r2, r7, r4
 8004efe:	3a15      	subs	r2, #21
 8004f00:	f022 0203 	bic.w	r2, r2, #3
 8004f04:	3204      	adds	r2, #4
 8004f06:	f104 0115 	add.w	r1, r4, #21
 8004f0a:	428f      	cmp	r7, r1
 8004f0c:	bf38      	it	cc
 8004f0e:	2204      	movcc	r2, #4
 8004f10:	9201      	str	r2, [sp, #4]
 8004f12:	9a02      	ldr	r2, [sp, #8]
 8004f14:	9303      	str	r3, [sp, #12]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d80c      	bhi.n	8004f34 <__multiply+0x9c>
 8004f1a:	2e00      	cmp	r6, #0
 8004f1c:	dd03      	ble.n	8004f26 <__multiply+0x8e>
 8004f1e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d05a      	beq.n	8004fdc <__multiply+0x144>
 8004f26:	6106      	str	r6, [r0, #16]
 8004f28:	b005      	add	sp, #20
 8004f2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f2e:	f843 2b04 	str.w	r2, [r3], #4
 8004f32:	e7d8      	b.n	8004ee6 <__multiply+0x4e>
 8004f34:	f8b3 a000 	ldrh.w	sl, [r3]
 8004f38:	f1ba 0f00 	cmp.w	sl, #0
 8004f3c:	d023      	beq.n	8004f86 <__multiply+0xee>
 8004f3e:	46a9      	mov	r9, r5
 8004f40:	f04f 0c00 	mov.w	ip, #0
 8004f44:	f104 0e14 	add.w	lr, r4, #20
 8004f48:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004f4c:	f8d9 1000 	ldr.w	r1, [r9]
 8004f50:	fa1f fb82 	uxth.w	fp, r2
 8004f54:	b289      	uxth	r1, r1
 8004f56:	fb0a 110b 	mla	r1, sl, fp, r1
 8004f5a:	4461      	add	r1, ip
 8004f5c:	f8d9 c000 	ldr.w	ip, [r9]
 8004f60:	0c12      	lsrs	r2, r2, #16
 8004f62:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8004f66:	fb0a c202 	mla	r2, sl, r2, ip
 8004f6a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004f6e:	b289      	uxth	r1, r1
 8004f70:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004f74:	4577      	cmp	r7, lr
 8004f76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004f7a:	f849 1b04 	str.w	r1, [r9], #4
 8004f7e:	d8e3      	bhi.n	8004f48 <__multiply+0xb0>
 8004f80:	9a01      	ldr	r2, [sp, #4]
 8004f82:	f845 c002 	str.w	ip, [r5, r2]
 8004f86:	9a03      	ldr	r2, [sp, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004f8e:	f1b9 0f00 	cmp.w	r9, #0
 8004f92:	d021      	beq.n	8004fd8 <__multiply+0x140>
 8004f94:	46ae      	mov	lr, r5
 8004f96:	f04f 0a00 	mov.w	sl, #0
 8004f9a:	6829      	ldr	r1, [r5, #0]
 8004f9c:	f104 0c14 	add.w	ip, r4, #20
 8004fa0:	f8bc b000 	ldrh.w	fp, [ip]
 8004fa4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004fa8:	b289      	uxth	r1, r1
 8004faa:	fb09 220b 	mla	r2, r9, fp, r2
 8004fae:	4452      	add	r2, sl
 8004fb0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004fb4:	f84e 1b04 	str.w	r1, [lr], #4
 8004fb8:	f85c 1b04 	ldr.w	r1, [ip], #4
 8004fbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004fc0:	f8be 1000 	ldrh.w	r1, [lr]
 8004fc4:	4567      	cmp	r7, ip
 8004fc6:	fb09 110a 	mla	r1, r9, sl, r1
 8004fca:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8004fce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004fd2:	d8e5      	bhi.n	8004fa0 <__multiply+0x108>
 8004fd4:	9a01      	ldr	r2, [sp, #4]
 8004fd6:	50a9      	str	r1, [r5, r2]
 8004fd8:	3504      	adds	r5, #4
 8004fda:	e79a      	b.n	8004f12 <__multiply+0x7a>
 8004fdc:	3e01      	subs	r6, #1
 8004fde:	e79c      	b.n	8004f1a <__multiply+0x82>
 8004fe0:	08005f8e 	.word	0x08005f8e
 8004fe4:	08005f9f 	.word	0x08005f9f

08004fe8 <__pow5mult>:
 8004fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fec:	4615      	mov	r5, r2
 8004fee:	f012 0203 	ands.w	r2, r2, #3
 8004ff2:	4606      	mov	r6, r0
 8004ff4:	460f      	mov	r7, r1
 8004ff6:	d007      	beq.n	8005008 <__pow5mult+0x20>
 8004ff8:	4c25      	ldr	r4, [pc, #148]	; (8005090 <__pow5mult+0xa8>)
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005002:	f7ff fe9f 	bl	8004d44 <__multadd>
 8005006:	4607      	mov	r7, r0
 8005008:	10ad      	asrs	r5, r5, #2
 800500a:	d03d      	beq.n	8005088 <__pow5mult+0xa0>
 800500c:	69f4      	ldr	r4, [r6, #28]
 800500e:	b97c      	cbnz	r4, 8005030 <__pow5mult+0x48>
 8005010:	2010      	movs	r0, #16
 8005012:	f7ff fd81 	bl	8004b18 <malloc>
 8005016:	4602      	mov	r2, r0
 8005018:	61f0      	str	r0, [r6, #28]
 800501a:	b928      	cbnz	r0, 8005028 <__pow5mult+0x40>
 800501c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005020:	4b1c      	ldr	r3, [pc, #112]	; (8005094 <__pow5mult+0xac>)
 8005022:	481d      	ldr	r0, [pc, #116]	; (8005098 <__pow5mult+0xb0>)
 8005024:	f000 fbde 	bl	80057e4 <__assert_func>
 8005028:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800502c:	6004      	str	r4, [r0, #0]
 800502e:	60c4      	str	r4, [r0, #12]
 8005030:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005034:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005038:	b94c      	cbnz	r4, 800504e <__pow5mult+0x66>
 800503a:	f240 2171 	movw	r1, #625	; 0x271
 800503e:	4630      	mov	r0, r6
 8005040:	f7ff ff14 	bl	8004e6c <__i2b>
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	f8c8 0008 	str.w	r0, [r8, #8]
 800504c:	6003      	str	r3, [r0, #0]
 800504e:	f04f 0900 	mov.w	r9, #0
 8005052:	07eb      	lsls	r3, r5, #31
 8005054:	d50a      	bpl.n	800506c <__pow5mult+0x84>
 8005056:	4639      	mov	r1, r7
 8005058:	4622      	mov	r2, r4
 800505a:	4630      	mov	r0, r6
 800505c:	f7ff ff1c 	bl	8004e98 <__multiply>
 8005060:	4680      	mov	r8, r0
 8005062:	4639      	mov	r1, r7
 8005064:	4630      	mov	r0, r6
 8005066:	f7ff fe4b 	bl	8004d00 <_Bfree>
 800506a:	4647      	mov	r7, r8
 800506c:	106d      	asrs	r5, r5, #1
 800506e:	d00b      	beq.n	8005088 <__pow5mult+0xa0>
 8005070:	6820      	ldr	r0, [r4, #0]
 8005072:	b938      	cbnz	r0, 8005084 <__pow5mult+0x9c>
 8005074:	4622      	mov	r2, r4
 8005076:	4621      	mov	r1, r4
 8005078:	4630      	mov	r0, r6
 800507a:	f7ff ff0d 	bl	8004e98 <__multiply>
 800507e:	6020      	str	r0, [r4, #0]
 8005080:	f8c0 9000 	str.w	r9, [r0]
 8005084:	4604      	mov	r4, r0
 8005086:	e7e4      	b.n	8005052 <__pow5mult+0x6a>
 8005088:	4638      	mov	r0, r7
 800508a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800508e:	bf00      	nop
 8005090:	080060e8 	.word	0x080060e8
 8005094:	08005f1f 	.word	0x08005f1f
 8005098:	08005f9f 	.word	0x08005f9f

0800509c <__lshift>:
 800509c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a0:	460c      	mov	r4, r1
 80050a2:	4607      	mov	r7, r0
 80050a4:	4691      	mov	r9, r2
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	6849      	ldr	r1, [r1, #4]
 80050aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80050ae:	68a3      	ldr	r3, [r4, #8]
 80050b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80050b4:	f108 0601 	add.w	r6, r8, #1
 80050b8:	42b3      	cmp	r3, r6
 80050ba:	db0b      	blt.n	80050d4 <__lshift+0x38>
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff fddf 	bl	8004c80 <_Balloc>
 80050c2:	4605      	mov	r5, r0
 80050c4:	b948      	cbnz	r0, 80050da <__lshift+0x3e>
 80050c6:	4602      	mov	r2, r0
 80050c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80050cc:	4b27      	ldr	r3, [pc, #156]	; (800516c <__lshift+0xd0>)
 80050ce:	4828      	ldr	r0, [pc, #160]	; (8005170 <__lshift+0xd4>)
 80050d0:	f000 fb88 	bl	80057e4 <__assert_func>
 80050d4:	3101      	adds	r1, #1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	e7ee      	b.n	80050b8 <__lshift+0x1c>
 80050da:	2300      	movs	r3, #0
 80050dc:	f100 0114 	add.w	r1, r0, #20
 80050e0:	f100 0210 	add.w	r2, r0, #16
 80050e4:	4618      	mov	r0, r3
 80050e6:	4553      	cmp	r3, sl
 80050e8:	db33      	blt.n	8005152 <__lshift+0xb6>
 80050ea:	6920      	ldr	r0, [r4, #16]
 80050ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80050f0:	f104 0314 	add.w	r3, r4, #20
 80050f4:	f019 091f 	ands.w	r9, r9, #31
 80050f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80050fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005100:	d02b      	beq.n	800515a <__lshift+0xbe>
 8005102:	468a      	mov	sl, r1
 8005104:	2200      	movs	r2, #0
 8005106:	f1c9 0e20 	rsb	lr, r9, #32
 800510a:	6818      	ldr	r0, [r3, #0]
 800510c:	fa00 f009 	lsl.w	r0, r0, r9
 8005110:	4310      	orrs	r0, r2
 8005112:	f84a 0b04 	str.w	r0, [sl], #4
 8005116:	f853 2b04 	ldr.w	r2, [r3], #4
 800511a:	459c      	cmp	ip, r3
 800511c:	fa22 f20e 	lsr.w	r2, r2, lr
 8005120:	d8f3      	bhi.n	800510a <__lshift+0x6e>
 8005122:	ebac 0304 	sub.w	r3, ip, r4
 8005126:	3b15      	subs	r3, #21
 8005128:	f023 0303 	bic.w	r3, r3, #3
 800512c:	3304      	adds	r3, #4
 800512e:	f104 0015 	add.w	r0, r4, #21
 8005132:	4584      	cmp	ip, r0
 8005134:	bf38      	it	cc
 8005136:	2304      	movcc	r3, #4
 8005138:	50ca      	str	r2, [r1, r3]
 800513a:	b10a      	cbz	r2, 8005140 <__lshift+0xa4>
 800513c:	f108 0602 	add.w	r6, r8, #2
 8005140:	3e01      	subs	r6, #1
 8005142:	4638      	mov	r0, r7
 8005144:	4621      	mov	r1, r4
 8005146:	612e      	str	r6, [r5, #16]
 8005148:	f7ff fdda 	bl	8004d00 <_Bfree>
 800514c:	4628      	mov	r0, r5
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005152:	f842 0f04 	str.w	r0, [r2, #4]!
 8005156:	3301      	adds	r3, #1
 8005158:	e7c5      	b.n	80050e6 <__lshift+0x4a>
 800515a:	3904      	subs	r1, #4
 800515c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005160:	459c      	cmp	ip, r3
 8005162:	f841 2f04 	str.w	r2, [r1, #4]!
 8005166:	d8f9      	bhi.n	800515c <__lshift+0xc0>
 8005168:	e7ea      	b.n	8005140 <__lshift+0xa4>
 800516a:	bf00      	nop
 800516c:	08005f8e 	.word	0x08005f8e
 8005170:	08005f9f 	.word	0x08005f9f

08005174 <__mcmp>:
 8005174:	4603      	mov	r3, r0
 8005176:	690a      	ldr	r2, [r1, #16]
 8005178:	6900      	ldr	r0, [r0, #16]
 800517a:	b530      	push	{r4, r5, lr}
 800517c:	1a80      	subs	r0, r0, r2
 800517e:	d10d      	bne.n	800519c <__mcmp+0x28>
 8005180:	3314      	adds	r3, #20
 8005182:	3114      	adds	r1, #20
 8005184:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005188:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800518c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005190:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005194:	4295      	cmp	r5, r2
 8005196:	d002      	beq.n	800519e <__mcmp+0x2a>
 8005198:	d304      	bcc.n	80051a4 <__mcmp+0x30>
 800519a:	2001      	movs	r0, #1
 800519c:	bd30      	pop	{r4, r5, pc}
 800519e:	42a3      	cmp	r3, r4
 80051a0:	d3f4      	bcc.n	800518c <__mcmp+0x18>
 80051a2:	e7fb      	b.n	800519c <__mcmp+0x28>
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	e7f8      	b.n	800519c <__mcmp+0x28>
	...

080051ac <__mdiff>:
 80051ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051b0:	460d      	mov	r5, r1
 80051b2:	4607      	mov	r7, r0
 80051b4:	4611      	mov	r1, r2
 80051b6:	4628      	mov	r0, r5
 80051b8:	4614      	mov	r4, r2
 80051ba:	f7ff ffdb 	bl	8005174 <__mcmp>
 80051be:	1e06      	subs	r6, r0, #0
 80051c0:	d111      	bne.n	80051e6 <__mdiff+0x3a>
 80051c2:	4631      	mov	r1, r6
 80051c4:	4638      	mov	r0, r7
 80051c6:	f7ff fd5b 	bl	8004c80 <_Balloc>
 80051ca:	4602      	mov	r2, r0
 80051cc:	b928      	cbnz	r0, 80051da <__mdiff+0x2e>
 80051ce:	f240 2137 	movw	r1, #567	; 0x237
 80051d2:	4b3a      	ldr	r3, [pc, #232]	; (80052bc <__mdiff+0x110>)
 80051d4:	483a      	ldr	r0, [pc, #232]	; (80052c0 <__mdiff+0x114>)
 80051d6:	f000 fb05 	bl	80057e4 <__assert_func>
 80051da:	2301      	movs	r3, #1
 80051dc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80051e0:	4610      	mov	r0, r2
 80051e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051e6:	bfa4      	itt	ge
 80051e8:	4623      	movge	r3, r4
 80051ea:	462c      	movge	r4, r5
 80051ec:	4638      	mov	r0, r7
 80051ee:	6861      	ldr	r1, [r4, #4]
 80051f0:	bfa6      	itte	ge
 80051f2:	461d      	movge	r5, r3
 80051f4:	2600      	movge	r6, #0
 80051f6:	2601      	movlt	r6, #1
 80051f8:	f7ff fd42 	bl	8004c80 <_Balloc>
 80051fc:	4602      	mov	r2, r0
 80051fe:	b918      	cbnz	r0, 8005208 <__mdiff+0x5c>
 8005200:	f240 2145 	movw	r1, #581	; 0x245
 8005204:	4b2d      	ldr	r3, [pc, #180]	; (80052bc <__mdiff+0x110>)
 8005206:	e7e5      	b.n	80051d4 <__mdiff+0x28>
 8005208:	f102 0814 	add.w	r8, r2, #20
 800520c:	46c2      	mov	sl, r8
 800520e:	f04f 0c00 	mov.w	ip, #0
 8005212:	6927      	ldr	r7, [r4, #16]
 8005214:	60c6      	str	r6, [r0, #12]
 8005216:	692e      	ldr	r6, [r5, #16]
 8005218:	f104 0014 	add.w	r0, r4, #20
 800521c:	f105 0914 	add.w	r9, r5, #20
 8005220:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005224:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005228:	3410      	adds	r4, #16
 800522a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800522e:	f859 3b04 	ldr.w	r3, [r9], #4
 8005232:	fa1f f18b 	uxth.w	r1, fp
 8005236:	4461      	add	r1, ip
 8005238:	fa1f fc83 	uxth.w	ip, r3
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	eba1 010c 	sub.w	r1, r1, ip
 8005242:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005246:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800524a:	b289      	uxth	r1, r1
 800524c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005250:	454e      	cmp	r6, r9
 8005252:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005256:	f84a 1b04 	str.w	r1, [sl], #4
 800525a:	d8e6      	bhi.n	800522a <__mdiff+0x7e>
 800525c:	1b73      	subs	r3, r6, r5
 800525e:	3b15      	subs	r3, #21
 8005260:	f023 0303 	bic.w	r3, r3, #3
 8005264:	3515      	adds	r5, #21
 8005266:	3304      	adds	r3, #4
 8005268:	42ae      	cmp	r6, r5
 800526a:	bf38      	it	cc
 800526c:	2304      	movcc	r3, #4
 800526e:	4418      	add	r0, r3
 8005270:	4443      	add	r3, r8
 8005272:	461e      	mov	r6, r3
 8005274:	4605      	mov	r5, r0
 8005276:	4575      	cmp	r5, lr
 8005278:	d30e      	bcc.n	8005298 <__mdiff+0xec>
 800527a:	f10e 0103 	add.w	r1, lr, #3
 800527e:	1a09      	subs	r1, r1, r0
 8005280:	f021 0103 	bic.w	r1, r1, #3
 8005284:	3803      	subs	r0, #3
 8005286:	4586      	cmp	lr, r0
 8005288:	bf38      	it	cc
 800528a:	2100      	movcc	r1, #0
 800528c:	440b      	add	r3, r1
 800528e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005292:	b189      	cbz	r1, 80052b8 <__mdiff+0x10c>
 8005294:	6117      	str	r7, [r2, #16]
 8005296:	e7a3      	b.n	80051e0 <__mdiff+0x34>
 8005298:	f855 8b04 	ldr.w	r8, [r5], #4
 800529c:	fa1f f188 	uxth.w	r1, r8
 80052a0:	4461      	add	r1, ip
 80052a2:	140c      	asrs	r4, r1, #16
 80052a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80052a8:	b289      	uxth	r1, r1
 80052aa:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80052ae:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80052b2:	f846 1b04 	str.w	r1, [r6], #4
 80052b6:	e7de      	b.n	8005276 <__mdiff+0xca>
 80052b8:	3f01      	subs	r7, #1
 80052ba:	e7e8      	b.n	800528e <__mdiff+0xe2>
 80052bc:	08005f8e 	.word	0x08005f8e
 80052c0:	08005f9f 	.word	0x08005f9f

080052c4 <__d2b>:
 80052c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052c6:	2101      	movs	r1, #1
 80052c8:	4617      	mov	r7, r2
 80052ca:	461c      	mov	r4, r3
 80052cc:	9e08      	ldr	r6, [sp, #32]
 80052ce:	f7ff fcd7 	bl	8004c80 <_Balloc>
 80052d2:	4605      	mov	r5, r0
 80052d4:	b930      	cbnz	r0, 80052e4 <__d2b+0x20>
 80052d6:	4602      	mov	r2, r0
 80052d8:	f240 310f 	movw	r1, #783	; 0x30f
 80052dc:	4b22      	ldr	r3, [pc, #136]	; (8005368 <__d2b+0xa4>)
 80052de:	4823      	ldr	r0, [pc, #140]	; (800536c <__d2b+0xa8>)
 80052e0:	f000 fa80 	bl	80057e4 <__assert_func>
 80052e4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80052e8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 80052ec:	bb24      	cbnz	r4, 8005338 <__d2b+0x74>
 80052ee:	2f00      	cmp	r7, #0
 80052f0:	9301      	str	r3, [sp, #4]
 80052f2:	d026      	beq.n	8005342 <__d2b+0x7e>
 80052f4:	4668      	mov	r0, sp
 80052f6:	9700      	str	r7, [sp, #0]
 80052f8:	f7ff fd8a 	bl	8004e10 <__lo0bits>
 80052fc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005300:	b1e8      	cbz	r0, 800533e <__d2b+0x7a>
 8005302:	f1c0 0320 	rsb	r3, r0, #32
 8005306:	fa02 f303 	lsl.w	r3, r2, r3
 800530a:	430b      	orrs	r3, r1
 800530c:	40c2      	lsrs	r2, r0
 800530e:	616b      	str	r3, [r5, #20]
 8005310:	9201      	str	r2, [sp, #4]
 8005312:	9b01      	ldr	r3, [sp, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf14      	ite	ne
 8005318:	2102      	movne	r1, #2
 800531a:	2101      	moveq	r1, #1
 800531c:	61ab      	str	r3, [r5, #24]
 800531e:	6129      	str	r1, [r5, #16]
 8005320:	b1bc      	cbz	r4, 8005352 <__d2b+0x8e>
 8005322:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005326:	4404      	add	r4, r0
 8005328:	6034      	str	r4, [r6, #0]
 800532a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800532e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005330:	6018      	str	r0, [r3, #0]
 8005332:	4628      	mov	r0, r5
 8005334:	b003      	add	sp, #12
 8005336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533c:	e7d7      	b.n	80052ee <__d2b+0x2a>
 800533e:	6169      	str	r1, [r5, #20]
 8005340:	e7e7      	b.n	8005312 <__d2b+0x4e>
 8005342:	a801      	add	r0, sp, #4
 8005344:	f7ff fd64 	bl	8004e10 <__lo0bits>
 8005348:	9b01      	ldr	r3, [sp, #4]
 800534a:	2101      	movs	r1, #1
 800534c:	616b      	str	r3, [r5, #20]
 800534e:	3020      	adds	r0, #32
 8005350:	e7e5      	b.n	800531e <__d2b+0x5a>
 8005352:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005356:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800535a:	6030      	str	r0, [r6, #0]
 800535c:	6918      	ldr	r0, [r3, #16]
 800535e:	f7ff fd37 	bl	8004dd0 <__hi0bits>
 8005362:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005366:	e7e2      	b.n	800532e <__d2b+0x6a>
 8005368:	08005f8e 	.word	0x08005f8e
 800536c:	08005f9f 	.word	0x08005f9f

08005370 <__ssputs_r>:
 8005370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005374:	461f      	mov	r7, r3
 8005376:	688e      	ldr	r6, [r1, #8]
 8005378:	4682      	mov	sl, r0
 800537a:	42be      	cmp	r6, r7
 800537c:	460c      	mov	r4, r1
 800537e:	4690      	mov	r8, r2
 8005380:	680b      	ldr	r3, [r1, #0]
 8005382:	d82c      	bhi.n	80053de <__ssputs_r+0x6e>
 8005384:	898a      	ldrh	r2, [r1, #12]
 8005386:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800538a:	d026      	beq.n	80053da <__ssputs_r+0x6a>
 800538c:	6965      	ldr	r5, [r4, #20]
 800538e:	6909      	ldr	r1, [r1, #16]
 8005390:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005394:	eba3 0901 	sub.w	r9, r3, r1
 8005398:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800539c:	1c7b      	adds	r3, r7, #1
 800539e:	444b      	add	r3, r9
 80053a0:	106d      	asrs	r5, r5, #1
 80053a2:	429d      	cmp	r5, r3
 80053a4:	bf38      	it	cc
 80053a6:	461d      	movcc	r5, r3
 80053a8:	0553      	lsls	r3, r2, #21
 80053aa:	d527      	bpl.n	80053fc <__ssputs_r+0x8c>
 80053ac:	4629      	mov	r1, r5
 80053ae:	f7ff fbdb 	bl	8004b68 <_malloc_r>
 80053b2:	4606      	mov	r6, r0
 80053b4:	b360      	cbz	r0, 8005410 <__ssputs_r+0xa0>
 80053b6:	464a      	mov	r2, r9
 80053b8:	6921      	ldr	r1, [r4, #16]
 80053ba:	f000 fa05 	bl	80057c8 <memcpy>
 80053be:	89a3      	ldrh	r3, [r4, #12]
 80053c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053c8:	81a3      	strh	r3, [r4, #12]
 80053ca:	6126      	str	r6, [r4, #16]
 80053cc:	444e      	add	r6, r9
 80053ce:	6026      	str	r6, [r4, #0]
 80053d0:	463e      	mov	r6, r7
 80053d2:	6165      	str	r5, [r4, #20]
 80053d4:	eba5 0509 	sub.w	r5, r5, r9
 80053d8:	60a5      	str	r5, [r4, #8]
 80053da:	42be      	cmp	r6, r7
 80053dc:	d900      	bls.n	80053e0 <__ssputs_r+0x70>
 80053de:	463e      	mov	r6, r7
 80053e0:	4632      	mov	r2, r6
 80053e2:	4641      	mov	r1, r8
 80053e4:	6820      	ldr	r0, [r4, #0]
 80053e6:	f000 f9c5 	bl	8005774 <memmove>
 80053ea:	2000      	movs	r0, #0
 80053ec:	68a3      	ldr	r3, [r4, #8]
 80053ee:	1b9b      	subs	r3, r3, r6
 80053f0:	60a3      	str	r3, [r4, #8]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	4433      	add	r3, r6
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053fc:	462a      	mov	r2, r5
 80053fe:	f000 fa35 	bl	800586c <_realloc_r>
 8005402:	4606      	mov	r6, r0
 8005404:	2800      	cmp	r0, #0
 8005406:	d1e0      	bne.n	80053ca <__ssputs_r+0x5a>
 8005408:	4650      	mov	r0, sl
 800540a:	6921      	ldr	r1, [r4, #16]
 800540c:	f7ff fb3c 	bl	8004a88 <_free_r>
 8005410:	230c      	movs	r3, #12
 8005412:	f8ca 3000 	str.w	r3, [sl]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f04f 30ff 	mov.w	r0, #4294967295
 800541c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	e7e9      	b.n	80053f8 <__ssputs_r+0x88>

08005424 <_svfiprintf_r>:
 8005424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005428:	4698      	mov	r8, r3
 800542a:	898b      	ldrh	r3, [r1, #12]
 800542c:	4607      	mov	r7, r0
 800542e:	061b      	lsls	r3, r3, #24
 8005430:	460d      	mov	r5, r1
 8005432:	4614      	mov	r4, r2
 8005434:	b09d      	sub	sp, #116	; 0x74
 8005436:	d50e      	bpl.n	8005456 <_svfiprintf_r+0x32>
 8005438:	690b      	ldr	r3, [r1, #16]
 800543a:	b963      	cbnz	r3, 8005456 <_svfiprintf_r+0x32>
 800543c:	2140      	movs	r1, #64	; 0x40
 800543e:	f7ff fb93 	bl	8004b68 <_malloc_r>
 8005442:	6028      	str	r0, [r5, #0]
 8005444:	6128      	str	r0, [r5, #16]
 8005446:	b920      	cbnz	r0, 8005452 <_svfiprintf_r+0x2e>
 8005448:	230c      	movs	r3, #12
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	f04f 30ff 	mov.w	r0, #4294967295
 8005450:	e0d0      	b.n	80055f4 <_svfiprintf_r+0x1d0>
 8005452:	2340      	movs	r3, #64	; 0x40
 8005454:	616b      	str	r3, [r5, #20]
 8005456:	2300      	movs	r3, #0
 8005458:	9309      	str	r3, [sp, #36]	; 0x24
 800545a:	2320      	movs	r3, #32
 800545c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005460:	2330      	movs	r3, #48	; 0x30
 8005462:	f04f 0901 	mov.w	r9, #1
 8005466:	f8cd 800c 	str.w	r8, [sp, #12]
 800546a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800560c <_svfiprintf_r+0x1e8>
 800546e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005472:	4623      	mov	r3, r4
 8005474:	469a      	mov	sl, r3
 8005476:	f813 2b01 	ldrb.w	r2, [r3], #1
 800547a:	b10a      	cbz	r2, 8005480 <_svfiprintf_r+0x5c>
 800547c:	2a25      	cmp	r2, #37	; 0x25
 800547e:	d1f9      	bne.n	8005474 <_svfiprintf_r+0x50>
 8005480:	ebba 0b04 	subs.w	fp, sl, r4
 8005484:	d00b      	beq.n	800549e <_svfiprintf_r+0x7a>
 8005486:	465b      	mov	r3, fp
 8005488:	4622      	mov	r2, r4
 800548a:	4629      	mov	r1, r5
 800548c:	4638      	mov	r0, r7
 800548e:	f7ff ff6f 	bl	8005370 <__ssputs_r>
 8005492:	3001      	adds	r0, #1
 8005494:	f000 80a9 	beq.w	80055ea <_svfiprintf_r+0x1c6>
 8005498:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800549a:	445a      	add	r2, fp
 800549c:	9209      	str	r2, [sp, #36]	; 0x24
 800549e:	f89a 3000 	ldrb.w	r3, [sl]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	f000 80a1 	beq.w	80055ea <_svfiprintf_r+0x1c6>
 80054a8:	2300      	movs	r3, #0
 80054aa:	f04f 32ff 	mov.w	r2, #4294967295
 80054ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054b2:	f10a 0a01 	add.w	sl, sl, #1
 80054b6:	9304      	str	r3, [sp, #16]
 80054b8:	9307      	str	r3, [sp, #28]
 80054ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054be:	931a      	str	r3, [sp, #104]	; 0x68
 80054c0:	4654      	mov	r4, sl
 80054c2:	2205      	movs	r2, #5
 80054c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054c8:	4850      	ldr	r0, [pc, #320]	; (800560c <_svfiprintf_r+0x1e8>)
 80054ca:	f7fe fc61 	bl	8003d90 <memchr>
 80054ce:	9a04      	ldr	r2, [sp, #16]
 80054d0:	b9d8      	cbnz	r0, 800550a <_svfiprintf_r+0xe6>
 80054d2:	06d0      	lsls	r0, r2, #27
 80054d4:	bf44      	itt	mi
 80054d6:	2320      	movmi	r3, #32
 80054d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054dc:	0711      	lsls	r1, r2, #28
 80054de:	bf44      	itt	mi
 80054e0:	232b      	movmi	r3, #43	; 0x2b
 80054e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054e6:	f89a 3000 	ldrb.w	r3, [sl]
 80054ea:	2b2a      	cmp	r3, #42	; 0x2a
 80054ec:	d015      	beq.n	800551a <_svfiprintf_r+0xf6>
 80054ee:	4654      	mov	r4, sl
 80054f0:	2000      	movs	r0, #0
 80054f2:	f04f 0c0a 	mov.w	ip, #10
 80054f6:	9a07      	ldr	r2, [sp, #28]
 80054f8:	4621      	mov	r1, r4
 80054fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054fe:	3b30      	subs	r3, #48	; 0x30
 8005500:	2b09      	cmp	r3, #9
 8005502:	d94d      	bls.n	80055a0 <_svfiprintf_r+0x17c>
 8005504:	b1b0      	cbz	r0, 8005534 <_svfiprintf_r+0x110>
 8005506:	9207      	str	r2, [sp, #28]
 8005508:	e014      	b.n	8005534 <_svfiprintf_r+0x110>
 800550a:	eba0 0308 	sub.w	r3, r0, r8
 800550e:	fa09 f303 	lsl.w	r3, r9, r3
 8005512:	4313      	orrs	r3, r2
 8005514:	46a2      	mov	sl, r4
 8005516:	9304      	str	r3, [sp, #16]
 8005518:	e7d2      	b.n	80054c0 <_svfiprintf_r+0x9c>
 800551a:	9b03      	ldr	r3, [sp, #12]
 800551c:	1d19      	adds	r1, r3, #4
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	9103      	str	r1, [sp, #12]
 8005522:	2b00      	cmp	r3, #0
 8005524:	bfbb      	ittet	lt
 8005526:	425b      	neglt	r3, r3
 8005528:	f042 0202 	orrlt.w	r2, r2, #2
 800552c:	9307      	strge	r3, [sp, #28]
 800552e:	9307      	strlt	r3, [sp, #28]
 8005530:	bfb8      	it	lt
 8005532:	9204      	strlt	r2, [sp, #16]
 8005534:	7823      	ldrb	r3, [r4, #0]
 8005536:	2b2e      	cmp	r3, #46	; 0x2e
 8005538:	d10c      	bne.n	8005554 <_svfiprintf_r+0x130>
 800553a:	7863      	ldrb	r3, [r4, #1]
 800553c:	2b2a      	cmp	r3, #42	; 0x2a
 800553e:	d134      	bne.n	80055aa <_svfiprintf_r+0x186>
 8005540:	9b03      	ldr	r3, [sp, #12]
 8005542:	3402      	adds	r4, #2
 8005544:	1d1a      	adds	r2, r3, #4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	9203      	str	r2, [sp, #12]
 800554a:	2b00      	cmp	r3, #0
 800554c:	bfb8      	it	lt
 800554e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005552:	9305      	str	r3, [sp, #20]
 8005554:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8005610 <_svfiprintf_r+0x1ec>
 8005558:	2203      	movs	r2, #3
 800555a:	4650      	mov	r0, sl
 800555c:	7821      	ldrb	r1, [r4, #0]
 800555e:	f7fe fc17 	bl	8003d90 <memchr>
 8005562:	b138      	cbz	r0, 8005574 <_svfiprintf_r+0x150>
 8005564:	2240      	movs	r2, #64	; 0x40
 8005566:	9b04      	ldr	r3, [sp, #16]
 8005568:	eba0 000a 	sub.w	r0, r0, sl
 800556c:	4082      	lsls	r2, r0
 800556e:	4313      	orrs	r3, r2
 8005570:	3401      	adds	r4, #1
 8005572:	9304      	str	r3, [sp, #16]
 8005574:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005578:	2206      	movs	r2, #6
 800557a:	4826      	ldr	r0, [pc, #152]	; (8005614 <_svfiprintf_r+0x1f0>)
 800557c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005580:	f7fe fc06 	bl	8003d90 <memchr>
 8005584:	2800      	cmp	r0, #0
 8005586:	d038      	beq.n	80055fa <_svfiprintf_r+0x1d6>
 8005588:	4b23      	ldr	r3, [pc, #140]	; (8005618 <_svfiprintf_r+0x1f4>)
 800558a:	bb1b      	cbnz	r3, 80055d4 <_svfiprintf_r+0x1b0>
 800558c:	9b03      	ldr	r3, [sp, #12]
 800558e:	3307      	adds	r3, #7
 8005590:	f023 0307 	bic.w	r3, r3, #7
 8005594:	3308      	adds	r3, #8
 8005596:	9303      	str	r3, [sp, #12]
 8005598:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800559a:	4433      	add	r3, r6
 800559c:	9309      	str	r3, [sp, #36]	; 0x24
 800559e:	e768      	b.n	8005472 <_svfiprintf_r+0x4e>
 80055a0:	460c      	mov	r4, r1
 80055a2:	2001      	movs	r0, #1
 80055a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80055a8:	e7a6      	b.n	80054f8 <_svfiprintf_r+0xd4>
 80055aa:	2300      	movs	r3, #0
 80055ac:	f04f 0c0a 	mov.w	ip, #10
 80055b0:	4619      	mov	r1, r3
 80055b2:	3401      	adds	r4, #1
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	4620      	mov	r0, r4
 80055b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055bc:	3a30      	subs	r2, #48	; 0x30
 80055be:	2a09      	cmp	r2, #9
 80055c0:	d903      	bls.n	80055ca <_svfiprintf_r+0x1a6>
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0c6      	beq.n	8005554 <_svfiprintf_r+0x130>
 80055c6:	9105      	str	r1, [sp, #20]
 80055c8:	e7c4      	b.n	8005554 <_svfiprintf_r+0x130>
 80055ca:	4604      	mov	r4, r0
 80055cc:	2301      	movs	r3, #1
 80055ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80055d2:	e7f0      	b.n	80055b6 <_svfiprintf_r+0x192>
 80055d4:	ab03      	add	r3, sp, #12
 80055d6:	9300      	str	r3, [sp, #0]
 80055d8:	462a      	mov	r2, r5
 80055da:	4638      	mov	r0, r7
 80055dc:	4b0f      	ldr	r3, [pc, #60]	; (800561c <_svfiprintf_r+0x1f8>)
 80055de:	a904      	add	r1, sp, #16
 80055e0:	f7fd fe82 	bl	80032e8 <_printf_float>
 80055e4:	1c42      	adds	r2, r0, #1
 80055e6:	4606      	mov	r6, r0
 80055e8:	d1d6      	bne.n	8005598 <_svfiprintf_r+0x174>
 80055ea:	89ab      	ldrh	r3, [r5, #12]
 80055ec:	065b      	lsls	r3, r3, #25
 80055ee:	f53f af2d 	bmi.w	800544c <_svfiprintf_r+0x28>
 80055f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055f4:	b01d      	add	sp, #116	; 0x74
 80055f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055fa:	ab03      	add	r3, sp, #12
 80055fc:	9300      	str	r3, [sp, #0]
 80055fe:	462a      	mov	r2, r5
 8005600:	4638      	mov	r0, r7
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <_svfiprintf_r+0x1f8>)
 8005604:	a904      	add	r1, sp, #16
 8005606:	f7fe f90f 	bl	8003828 <_printf_i>
 800560a:	e7eb      	b.n	80055e4 <_svfiprintf_r+0x1c0>
 800560c:	080060f4 	.word	0x080060f4
 8005610:	080060fa 	.word	0x080060fa
 8005614:	080060fe 	.word	0x080060fe
 8005618:	080032e9 	.word	0x080032e9
 800561c:	08005371 	.word	0x08005371

08005620 <__sflush_r>:
 8005620:	898a      	ldrh	r2, [r1, #12]
 8005622:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005624:	4605      	mov	r5, r0
 8005626:	0710      	lsls	r0, r2, #28
 8005628:	460c      	mov	r4, r1
 800562a:	d457      	bmi.n	80056dc <__sflush_r+0xbc>
 800562c:	684b      	ldr	r3, [r1, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	dc04      	bgt.n	800563c <__sflush_r+0x1c>
 8005632:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005634:	2b00      	cmp	r3, #0
 8005636:	dc01      	bgt.n	800563c <__sflush_r+0x1c>
 8005638:	2000      	movs	r0, #0
 800563a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	2e00      	cmp	r6, #0
 8005640:	d0fa      	beq.n	8005638 <__sflush_r+0x18>
 8005642:	2300      	movs	r3, #0
 8005644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005648:	682f      	ldr	r7, [r5, #0]
 800564a:	6a21      	ldr	r1, [r4, #32]
 800564c:	602b      	str	r3, [r5, #0]
 800564e:	d032      	beq.n	80056b6 <__sflush_r+0x96>
 8005650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005652:	89a3      	ldrh	r3, [r4, #12]
 8005654:	075a      	lsls	r2, r3, #29
 8005656:	d505      	bpl.n	8005664 <__sflush_r+0x44>
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	1ac0      	subs	r0, r0, r3
 800565c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800565e:	b10b      	cbz	r3, 8005664 <__sflush_r+0x44>
 8005660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005662:	1ac0      	subs	r0, r0, r3
 8005664:	2300      	movs	r3, #0
 8005666:	4602      	mov	r2, r0
 8005668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800566a:	4628      	mov	r0, r5
 800566c:	6a21      	ldr	r1, [r4, #32]
 800566e:	47b0      	blx	r6
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	d106      	bne.n	8005684 <__sflush_r+0x64>
 8005676:	6829      	ldr	r1, [r5, #0]
 8005678:	291d      	cmp	r1, #29
 800567a:	d82b      	bhi.n	80056d4 <__sflush_r+0xb4>
 800567c:	4a28      	ldr	r2, [pc, #160]	; (8005720 <__sflush_r+0x100>)
 800567e:	410a      	asrs	r2, r1
 8005680:	07d6      	lsls	r6, r2, #31
 8005682:	d427      	bmi.n	80056d4 <__sflush_r+0xb4>
 8005684:	2200      	movs	r2, #0
 8005686:	6062      	str	r2, [r4, #4]
 8005688:	6922      	ldr	r2, [r4, #16]
 800568a:	04d9      	lsls	r1, r3, #19
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	d504      	bpl.n	800569a <__sflush_r+0x7a>
 8005690:	1c42      	adds	r2, r0, #1
 8005692:	d101      	bne.n	8005698 <__sflush_r+0x78>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b903      	cbnz	r3, 800569a <__sflush_r+0x7a>
 8005698:	6560      	str	r0, [r4, #84]	; 0x54
 800569a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800569c:	602f      	str	r7, [r5, #0]
 800569e:	2900      	cmp	r1, #0
 80056a0:	d0ca      	beq.n	8005638 <__sflush_r+0x18>
 80056a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80056a6:	4299      	cmp	r1, r3
 80056a8:	d002      	beq.n	80056b0 <__sflush_r+0x90>
 80056aa:	4628      	mov	r0, r5
 80056ac:	f7ff f9ec 	bl	8004a88 <_free_r>
 80056b0:	2000      	movs	r0, #0
 80056b2:	6360      	str	r0, [r4, #52]	; 0x34
 80056b4:	e7c1      	b.n	800563a <__sflush_r+0x1a>
 80056b6:	2301      	movs	r3, #1
 80056b8:	4628      	mov	r0, r5
 80056ba:	47b0      	blx	r6
 80056bc:	1c41      	adds	r1, r0, #1
 80056be:	d1c8      	bne.n	8005652 <__sflush_r+0x32>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d0c5      	beq.n	8005652 <__sflush_r+0x32>
 80056c6:	2b1d      	cmp	r3, #29
 80056c8:	d001      	beq.n	80056ce <__sflush_r+0xae>
 80056ca:	2b16      	cmp	r3, #22
 80056cc:	d101      	bne.n	80056d2 <__sflush_r+0xb2>
 80056ce:	602f      	str	r7, [r5, #0]
 80056d0:	e7b2      	b.n	8005638 <__sflush_r+0x18>
 80056d2:	89a3      	ldrh	r3, [r4, #12]
 80056d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d8:	81a3      	strh	r3, [r4, #12]
 80056da:	e7ae      	b.n	800563a <__sflush_r+0x1a>
 80056dc:	690f      	ldr	r7, [r1, #16]
 80056de:	2f00      	cmp	r7, #0
 80056e0:	d0aa      	beq.n	8005638 <__sflush_r+0x18>
 80056e2:	0793      	lsls	r3, r2, #30
 80056e4:	bf18      	it	ne
 80056e6:	2300      	movne	r3, #0
 80056e8:	680e      	ldr	r6, [r1, #0]
 80056ea:	bf08      	it	eq
 80056ec:	694b      	ldreq	r3, [r1, #20]
 80056ee:	1bf6      	subs	r6, r6, r7
 80056f0:	600f      	str	r7, [r1, #0]
 80056f2:	608b      	str	r3, [r1, #8]
 80056f4:	2e00      	cmp	r6, #0
 80056f6:	dd9f      	ble.n	8005638 <__sflush_r+0x18>
 80056f8:	4633      	mov	r3, r6
 80056fa:	463a      	mov	r2, r7
 80056fc:	4628      	mov	r0, r5
 80056fe:	6a21      	ldr	r1, [r4, #32]
 8005700:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8005704:	47e0      	blx	ip
 8005706:	2800      	cmp	r0, #0
 8005708:	dc06      	bgt.n	8005718 <__sflush_r+0xf8>
 800570a:	89a3      	ldrh	r3, [r4, #12]
 800570c:	f04f 30ff 	mov.w	r0, #4294967295
 8005710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005714:	81a3      	strh	r3, [r4, #12]
 8005716:	e790      	b.n	800563a <__sflush_r+0x1a>
 8005718:	4407      	add	r7, r0
 800571a:	1a36      	subs	r6, r6, r0
 800571c:	e7ea      	b.n	80056f4 <__sflush_r+0xd4>
 800571e:	bf00      	nop
 8005720:	dfbffffe 	.word	0xdfbffffe

08005724 <_fflush_r>:
 8005724:	b538      	push	{r3, r4, r5, lr}
 8005726:	690b      	ldr	r3, [r1, #16]
 8005728:	4605      	mov	r5, r0
 800572a:	460c      	mov	r4, r1
 800572c:	b913      	cbnz	r3, 8005734 <_fflush_r+0x10>
 800572e:	2500      	movs	r5, #0
 8005730:	4628      	mov	r0, r5
 8005732:	bd38      	pop	{r3, r4, r5, pc}
 8005734:	b118      	cbz	r0, 800573e <_fflush_r+0x1a>
 8005736:	6a03      	ldr	r3, [r0, #32]
 8005738:	b90b      	cbnz	r3, 800573e <_fflush_r+0x1a>
 800573a:	f7fe fa11 	bl	8003b60 <__sinit>
 800573e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f3      	beq.n	800572e <_fflush_r+0xa>
 8005746:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005748:	07d0      	lsls	r0, r2, #31
 800574a:	d404      	bmi.n	8005756 <_fflush_r+0x32>
 800574c:	0599      	lsls	r1, r3, #22
 800574e:	d402      	bmi.n	8005756 <_fflush_r+0x32>
 8005750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005752:	f7fe fb1b 	bl	8003d8c <__retarget_lock_acquire_recursive>
 8005756:	4628      	mov	r0, r5
 8005758:	4621      	mov	r1, r4
 800575a:	f7ff ff61 	bl	8005620 <__sflush_r>
 800575e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005760:	4605      	mov	r5, r0
 8005762:	07da      	lsls	r2, r3, #31
 8005764:	d4e4      	bmi.n	8005730 <_fflush_r+0xc>
 8005766:	89a3      	ldrh	r3, [r4, #12]
 8005768:	059b      	lsls	r3, r3, #22
 800576a:	d4e1      	bmi.n	8005730 <_fflush_r+0xc>
 800576c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800576e:	f7fe fb0e 	bl	8003d8e <__retarget_lock_release_recursive>
 8005772:	e7dd      	b.n	8005730 <_fflush_r+0xc>

08005774 <memmove>:
 8005774:	4288      	cmp	r0, r1
 8005776:	b510      	push	{r4, lr}
 8005778:	eb01 0402 	add.w	r4, r1, r2
 800577c:	d902      	bls.n	8005784 <memmove+0x10>
 800577e:	4284      	cmp	r4, r0
 8005780:	4623      	mov	r3, r4
 8005782:	d807      	bhi.n	8005794 <memmove+0x20>
 8005784:	1e43      	subs	r3, r0, #1
 8005786:	42a1      	cmp	r1, r4
 8005788:	d008      	beq.n	800579c <memmove+0x28>
 800578a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800578e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005792:	e7f8      	b.n	8005786 <memmove+0x12>
 8005794:	4601      	mov	r1, r0
 8005796:	4402      	add	r2, r0
 8005798:	428a      	cmp	r2, r1
 800579a:	d100      	bne.n	800579e <memmove+0x2a>
 800579c:	bd10      	pop	{r4, pc}
 800579e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80057a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80057a6:	e7f7      	b.n	8005798 <memmove+0x24>

080057a8 <_sbrk_r>:
 80057a8:	b538      	push	{r3, r4, r5, lr}
 80057aa:	2300      	movs	r3, #0
 80057ac:	4d05      	ldr	r5, [pc, #20]	; (80057c4 <_sbrk_r+0x1c>)
 80057ae:	4604      	mov	r4, r0
 80057b0:	4608      	mov	r0, r1
 80057b2:	602b      	str	r3, [r5, #0]
 80057b4:	f7fb fe06 	bl	80013c4 <_sbrk>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d102      	bne.n	80057c2 <_sbrk_r+0x1a>
 80057bc:	682b      	ldr	r3, [r5, #0]
 80057be:	b103      	cbz	r3, 80057c2 <_sbrk_r+0x1a>
 80057c0:	6023      	str	r3, [r4, #0]
 80057c2:	bd38      	pop	{r3, r4, r5, pc}
 80057c4:	200003e4 	.word	0x200003e4

080057c8 <memcpy>:
 80057c8:	440a      	add	r2, r1
 80057ca:	4291      	cmp	r1, r2
 80057cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80057d0:	d100      	bne.n	80057d4 <memcpy+0xc>
 80057d2:	4770      	bx	lr
 80057d4:	b510      	push	{r4, lr}
 80057d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057da:	4291      	cmp	r1, r2
 80057dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e0:	d1f9      	bne.n	80057d6 <memcpy+0xe>
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <__assert_func>:
 80057e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80057e6:	4614      	mov	r4, r2
 80057e8:	461a      	mov	r2, r3
 80057ea:	4b09      	ldr	r3, [pc, #36]	; (8005810 <__assert_func+0x2c>)
 80057ec:	4605      	mov	r5, r0
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68d8      	ldr	r0, [r3, #12]
 80057f2:	b14c      	cbz	r4, 8005808 <__assert_func+0x24>
 80057f4:	4b07      	ldr	r3, [pc, #28]	; (8005814 <__assert_func+0x30>)
 80057f6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80057fa:	9100      	str	r1, [sp, #0]
 80057fc:	462b      	mov	r3, r5
 80057fe:	4906      	ldr	r1, [pc, #24]	; (8005818 <__assert_func+0x34>)
 8005800:	f000 f870 	bl	80058e4 <fiprintf>
 8005804:	f000 f880 	bl	8005908 <abort>
 8005808:	4b04      	ldr	r3, [pc, #16]	; (800581c <__assert_func+0x38>)
 800580a:	461c      	mov	r4, r3
 800580c:	e7f3      	b.n	80057f6 <__assert_func+0x12>
 800580e:	bf00      	nop
 8005810:	20000064 	.word	0x20000064
 8005814:	0800610f 	.word	0x0800610f
 8005818:	0800611c 	.word	0x0800611c
 800581c:	0800614a 	.word	0x0800614a

08005820 <_calloc_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	fba1 5402 	umull	r5, r4, r1, r2
 8005826:	b934      	cbnz	r4, 8005836 <_calloc_r+0x16>
 8005828:	4629      	mov	r1, r5
 800582a:	f7ff f99d 	bl	8004b68 <_malloc_r>
 800582e:	4606      	mov	r6, r0
 8005830:	b928      	cbnz	r0, 800583e <_calloc_r+0x1e>
 8005832:	4630      	mov	r0, r6
 8005834:	bd70      	pop	{r4, r5, r6, pc}
 8005836:	220c      	movs	r2, #12
 8005838:	2600      	movs	r6, #0
 800583a:	6002      	str	r2, [r0, #0]
 800583c:	e7f9      	b.n	8005832 <_calloc_r+0x12>
 800583e:	462a      	mov	r2, r5
 8005840:	4621      	mov	r1, r4
 8005842:	f7fe fa26 	bl	8003c92 <memset>
 8005846:	e7f4      	b.n	8005832 <_calloc_r+0x12>

08005848 <__ascii_mbtowc>:
 8005848:	b082      	sub	sp, #8
 800584a:	b901      	cbnz	r1, 800584e <__ascii_mbtowc+0x6>
 800584c:	a901      	add	r1, sp, #4
 800584e:	b142      	cbz	r2, 8005862 <__ascii_mbtowc+0x1a>
 8005850:	b14b      	cbz	r3, 8005866 <__ascii_mbtowc+0x1e>
 8005852:	7813      	ldrb	r3, [r2, #0]
 8005854:	600b      	str	r3, [r1, #0]
 8005856:	7812      	ldrb	r2, [r2, #0]
 8005858:	1e10      	subs	r0, r2, #0
 800585a:	bf18      	it	ne
 800585c:	2001      	movne	r0, #1
 800585e:	b002      	add	sp, #8
 8005860:	4770      	bx	lr
 8005862:	4610      	mov	r0, r2
 8005864:	e7fb      	b.n	800585e <__ascii_mbtowc+0x16>
 8005866:	f06f 0001 	mvn.w	r0, #1
 800586a:	e7f8      	b.n	800585e <__ascii_mbtowc+0x16>

0800586c <_realloc_r>:
 800586c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005870:	4680      	mov	r8, r0
 8005872:	4614      	mov	r4, r2
 8005874:	460e      	mov	r6, r1
 8005876:	b921      	cbnz	r1, 8005882 <_realloc_r+0x16>
 8005878:	4611      	mov	r1, r2
 800587a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800587e:	f7ff b973 	b.w	8004b68 <_malloc_r>
 8005882:	b92a      	cbnz	r2, 8005890 <_realloc_r+0x24>
 8005884:	f7ff f900 	bl	8004a88 <_free_r>
 8005888:	4625      	mov	r5, r4
 800588a:	4628      	mov	r0, r5
 800588c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005890:	f000 f841 	bl	8005916 <_malloc_usable_size_r>
 8005894:	4284      	cmp	r4, r0
 8005896:	4607      	mov	r7, r0
 8005898:	d802      	bhi.n	80058a0 <_realloc_r+0x34>
 800589a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800589e:	d812      	bhi.n	80058c6 <_realloc_r+0x5a>
 80058a0:	4621      	mov	r1, r4
 80058a2:	4640      	mov	r0, r8
 80058a4:	f7ff f960 	bl	8004b68 <_malloc_r>
 80058a8:	4605      	mov	r5, r0
 80058aa:	2800      	cmp	r0, #0
 80058ac:	d0ed      	beq.n	800588a <_realloc_r+0x1e>
 80058ae:	42bc      	cmp	r4, r7
 80058b0:	4622      	mov	r2, r4
 80058b2:	4631      	mov	r1, r6
 80058b4:	bf28      	it	cs
 80058b6:	463a      	movcs	r2, r7
 80058b8:	f7ff ff86 	bl	80057c8 <memcpy>
 80058bc:	4631      	mov	r1, r6
 80058be:	4640      	mov	r0, r8
 80058c0:	f7ff f8e2 	bl	8004a88 <_free_r>
 80058c4:	e7e1      	b.n	800588a <_realloc_r+0x1e>
 80058c6:	4635      	mov	r5, r6
 80058c8:	e7df      	b.n	800588a <_realloc_r+0x1e>

080058ca <__ascii_wctomb>:
 80058ca:	4603      	mov	r3, r0
 80058cc:	4608      	mov	r0, r1
 80058ce:	b141      	cbz	r1, 80058e2 <__ascii_wctomb+0x18>
 80058d0:	2aff      	cmp	r2, #255	; 0xff
 80058d2:	d904      	bls.n	80058de <__ascii_wctomb+0x14>
 80058d4:	228a      	movs	r2, #138	; 0x8a
 80058d6:	f04f 30ff 	mov.w	r0, #4294967295
 80058da:	601a      	str	r2, [r3, #0]
 80058dc:	4770      	bx	lr
 80058de:	2001      	movs	r0, #1
 80058e0:	700a      	strb	r2, [r1, #0]
 80058e2:	4770      	bx	lr

080058e4 <fiprintf>:
 80058e4:	b40e      	push	{r1, r2, r3}
 80058e6:	b503      	push	{r0, r1, lr}
 80058e8:	4601      	mov	r1, r0
 80058ea:	ab03      	add	r3, sp, #12
 80058ec:	4805      	ldr	r0, [pc, #20]	; (8005904 <fiprintf+0x20>)
 80058ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f2:	6800      	ldr	r0, [r0, #0]
 80058f4:	9301      	str	r3, [sp, #4]
 80058f6:	f000 f83d 	bl	8005974 <_vfiprintf_r>
 80058fa:	b002      	add	sp, #8
 80058fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8005900:	b003      	add	sp, #12
 8005902:	4770      	bx	lr
 8005904:	20000064 	.word	0x20000064

08005908 <abort>:
 8005908:	2006      	movs	r0, #6
 800590a:	b508      	push	{r3, lr}
 800590c:	f000 fa0a 	bl	8005d24 <raise>
 8005910:	2001      	movs	r0, #1
 8005912:	f7fb fce3 	bl	80012dc <_exit>

08005916 <_malloc_usable_size_r>:
 8005916:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800591a:	1f18      	subs	r0, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	bfbc      	itt	lt
 8005920:	580b      	ldrlt	r3, [r1, r0]
 8005922:	18c0      	addlt	r0, r0, r3
 8005924:	4770      	bx	lr

08005926 <__sfputc_r>:
 8005926:	6893      	ldr	r3, [r2, #8]
 8005928:	b410      	push	{r4}
 800592a:	3b01      	subs	r3, #1
 800592c:	2b00      	cmp	r3, #0
 800592e:	6093      	str	r3, [r2, #8]
 8005930:	da07      	bge.n	8005942 <__sfputc_r+0x1c>
 8005932:	6994      	ldr	r4, [r2, #24]
 8005934:	42a3      	cmp	r3, r4
 8005936:	db01      	blt.n	800593c <__sfputc_r+0x16>
 8005938:	290a      	cmp	r1, #10
 800593a:	d102      	bne.n	8005942 <__sfputc_r+0x1c>
 800593c:	bc10      	pop	{r4}
 800593e:	f000 b933 	b.w	8005ba8 <__swbuf_r>
 8005942:	6813      	ldr	r3, [r2, #0]
 8005944:	1c58      	adds	r0, r3, #1
 8005946:	6010      	str	r0, [r2, #0]
 8005948:	7019      	strb	r1, [r3, #0]
 800594a:	4608      	mov	r0, r1
 800594c:	bc10      	pop	{r4}
 800594e:	4770      	bx	lr

08005950 <__sfputs_r>:
 8005950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005952:	4606      	mov	r6, r0
 8005954:	460f      	mov	r7, r1
 8005956:	4614      	mov	r4, r2
 8005958:	18d5      	adds	r5, r2, r3
 800595a:	42ac      	cmp	r4, r5
 800595c:	d101      	bne.n	8005962 <__sfputs_r+0x12>
 800595e:	2000      	movs	r0, #0
 8005960:	e007      	b.n	8005972 <__sfputs_r+0x22>
 8005962:	463a      	mov	r2, r7
 8005964:	4630      	mov	r0, r6
 8005966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800596a:	f7ff ffdc 	bl	8005926 <__sfputc_r>
 800596e:	1c43      	adds	r3, r0, #1
 8005970:	d1f3      	bne.n	800595a <__sfputs_r+0xa>
 8005972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005974 <_vfiprintf_r>:
 8005974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005978:	460d      	mov	r5, r1
 800597a:	4614      	mov	r4, r2
 800597c:	4698      	mov	r8, r3
 800597e:	4606      	mov	r6, r0
 8005980:	b09d      	sub	sp, #116	; 0x74
 8005982:	b118      	cbz	r0, 800598c <_vfiprintf_r+0x18>
 8005984:	6a03      	ldr	r3, [r0, #32]
 8005986:	b90b      	cbnz	r3, 800598c <_vfiprintf_r+0x18>
 8005988:	f7fe f8ea 	bl	8003b60 <__sinit>
 800598c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800598e:	07d9      	lsls	r1, r3, #31
 8005990:	d405      	bmi.n	800599e <_vfiprintf_r+0x2a>
 8005992:	89ab      	ldrh	r3, [r5, #12]
 8005994:	059a      	lsls	r2, r3, #22
 8005996:	d402      	bmi.n	800599e <_vfiprintf_r+0x2a>
 8005998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800599a:	f7fe f9f7 	bl	8003d8c <__retarget_lock_acquire_recursive>
 800599e:	89ab      	ldrh	r3, [r5, #12]
 80059a0:	071b      	lsls	r3, r3, #28
 80059a2:	d501      	bpl.n	80059a8 <_vfiprintf_r+0x34>
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	b99b      	cbnz	r3, 80059d0 <_vfiprintf_r+0x5c>
 80059a8:	4629      	mov	r1, r5
 80059aa:	4630      	mov	r0, r6
 80059ac:	f000 f93a 	bl	8005c24 <__swsetup_r>
 80059b0:	b170      	cbz	r0, 80059d0 <_vfiprintf_r+0x5c>
 80059b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059b4:	07dc      	lsls	r4, r3, #31
 80059b6:	d504      	bpl.n	80059c2 <_vfiprintf_r+0x4e>
 80059b8:	f04f 30ff 	mov.w	r0, #4294967295
 80059bc:	b01d      	add	sp, #116	; 0x74
 80059be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059c2:	89ab      	ldrh	r3, [r5, #12]
 80059c4:	0598      	lsls	r0, r3, #22
 80059c6:	d4f7      	bmi.n	80059b8 <_vfiprintf_r+0x44>
 80059c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ca:	f7fe f9e0 	bl	8003d8e <__retarget_lock_release_recursive>
 80059ce:	e7f3      	b.n	80059b8 <_vfiprintf_r+0x44>
 80059d0:	2300      	movs	r3, #0
 80059d2:	9309      	str	r3, [sp, #36]	; 0x24
 80059d4:	2320      	movs	r3, #32
 80059d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80059da:	2330      	movs	r3, #48	; 0x30
 80059dc:	f04f 0901 	mov.w	r9, #1
 80059e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80059e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8005b94 <_vfiprintf_r+0x220>
 80059e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80059ec:	4623      	mov	r3, r4
 80059ee:	469a      	mov	sl, r3
 80059f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80059f4:	b10a      	cbz	r2, 80059fa <_vfiprintf_r+0x86>
 80059f6:	2a25      	cmp	r2, #37	; 0x25
 80059f8:	d1f9      	bne.n	80059ee <_vfiprintf_r+0x7a>
 80059fa:	ebba 0b04 	subs.w	fp, sl, r4
 80059fe:	d00b      	beq.n	8005a18 <_vfiprintf_r+0xa4>
 8005a00:	465b      	mov	r3, fp
 8005a02:	4622      	mov	r2, r4
 8005a04:	4629      	mov	r1, r5
 8005a06:	4630      	mov	r0, r6
 8005a08:	f7ff ffa2 	bl	8005950 <__sfputs_r>
 8005a0c:	3001      	adds	r0, #1
 8005a0e:	f000 80a9 	beq.w	8005b64 <_vfiprintf_r+0x1f0>
 8005a12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a14:	445a      	add	r2, fp
 8005a16:	9209      	str	r2, [sp, #36]	; 0x24
 8005a18:	f89a 3000 	ldrb.w	r3, [sl]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	f000 80a1 	beq.w	8005b64 <_vfiprintf_r+0x1f0>
 8005a22:	2300      	movs	r3, #0
 8005a24:	f04f 32ff 	mov.w	r2, #4294967295
 8005a28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a2c:	f10a 0a01 	add.w	sl, sl, #1
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	9307      	str	r3, [sp, #28]
 8005a34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a38:	931a      	str	r3, [sp, #104]	; 0x68
 8005a3a:	4654      	mov	r4, sl
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a42:	4854      	ldr	r0, [pc, #336]	; (8005b94 <_vfiprintf_r+0x220>)
 8005a44:	f7fe f9a4 	bl	8003d90 <memchr>
 8005a48:	9a04      	ldr	r2, [sp, #16]
 8005a4a:	b9d8      	cbnz	r0, 8005a84 <_vfiprintf_r+0x110>
 8005a4c:	06d1      	lsls	r1, r2, #27
 8005a4e:	bf44      	itt	mi
 8005a50:	2320      	movmi	r3, #32
 8005a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a56:	0713      	lsls	r3, r2, #28
 8005a58:	bf44      	itt	mi
 8005a5a:	232b      	movmi	r3, #43	; 0x2b
 8005a5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005a60:	f89a 3000 	ldrb.w	r3, [sl]
 8005a64:	2b2a      	cmp	r3, #42	; 0x2a
 8005a66:	d015      	beq.n	8005a94 <_vfiprintf_r+0x120>
 8005a68:	4654      	mov	r4, sl
 8005a6a:	2000      	movs	r0, #0
 8005a6c:	f04f 0c0a 	mov.w	ip, #10
 8005a70:	9a07      	ldr	r2, [sp, #28]
 8005a72:	4621      	mov	r1, r4
 8005a74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005a78:	3b30      	subs	r3, #48	; 0x30
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d94d      	bls.n	8005b1a <_vfiprintf_r+0x1a6>
 8005a7e:	b1b0      	cbz	r0, 8005aae <_vfiprintf_r+0x13a>
 8005a80:	9207      	str	r2, [sp, #28]
 8005a82:	e014      	b.n	8005aae <_vfiprintf_r+0x13a>
 8005a84:	eba0 0308 	sub.w	r3, r0, r8
 8005a88:	fa09 f303 	lsl.w	r3, r9, r3
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	46a2      	mov	sl, r4
 8005a90:	9304      	str	r3, [sp, #16]
 8005a92:	e7d2      	b.n	8005a3a <_vfiprintf_r+0xc6>
 8005a94:	9b03      	ldr	r3, [sp, #12]
 8005a96:	1d19      	adds	r1, r3, #4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	9103      	str	r1, [sp, #12]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bfbb      	ittet	lt
 8005aa0:	425b      	neglt	r3, r3
 8005aa2:	f042 0202 	orrlt.w	r2, r2, #2
 8005aa6:	9307      	strge	r3, [sp, #28]
 8005aa8:	9307      	strlt	r3, [sp, #28]
 8005aaa:	bfb8      	it	lt
 8005aac:	9204      	strlt	r2, [sp, #16]
 8005aae:	7823      	ldrb	r3, [r4, #0]
 8005ab0:	2b2e      	cmp	r3, #46	; 0x2e
 8005ab2:	d10c      	bne.n	8005ace <_vfiprintf_r+0x15a>
 8005ab4:	7863      	ldrb	r3, [r4, #1]
 8005ab6:	2b2a      	cmp	r3, #42	; 0x2a
 8005ab8:	d134      	bne.n	8005b24 <_vfiprintf_r+0x1b0>
 8005aba:	9b03      	ldr	r3, [sp, #12]
 8005abc:	3402      	adds	r4, #2
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	9203      	str	r2, [sp, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	bfb8      	it	lt
 8005ac8:	f04f 33ff 	movlt.w	r3, #4294967295
 8005acc:	9305      	str	r3, [sp, #20]
 8005ace:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005b98 <_vfiprintf_r+0x224>
 8005ad2:	2203      	movs	r2, #3
 8005ad4:	4650      	mov	r0, sl
 8005ad6:	7821      	ldrb	r1, [r4, #0]
 8005ad8:	f7fe f95a 	bl	8003d90 <memchr>
 8005adc:	b138      	cbz	r0, 8005aee <_vfiprintf_r+0x17a>
 8005ade:	2240      	movs	r2, #64	; 0x40
 8005ae0:	9b04      	ldr	r3, [sp, #16]
 8005ae2:	eba0 000a 	sub.w	r0, r0, sl
 8005ae6:	4082      	lsls	r2, r0
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	3401      	adds	r4, #1
 8005aec:	9304      	str	r3, [sp, #16]
 8005aee:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af2:	2206      	movs	r2, #6
 8005af4:	4829      	ldr	r0, [pc, #164]	; (8005b9c <_vfiprintf_r+0x228>)
 8005af6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005afa:	f7fe f949 	bl	8003d90 <memchr>
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d03f      	beq.n	8005b82 <_vfiprintf_r+0x20e>
 8005b02:	4b27      	ldr	r3, [pc, #156]	; (8005ba0 <_vfiprintf_r+0x22c>)
 8005b04:	bb1b      	cbnz	r3, 8005b4e <_vfiprintf_r+0x1da>
 8005b06:	9b03      	ldr	r3, [sp, #12]
 8005b08:	3307      	adds	r3, #7
 8005b0a:	f023 0307 	bic.w	r3, r3, #7
 8005b0e:	3308      	adds	r3, #8
 8005b10:	9303      	str	r3, [sp, #12]
 8005b12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b14:	443b      	add	r3, r7
 8005b16:	9309      	str	r3, [sp, #36]	; 0x24
 8005b18:	e768      	b.n	80059ec <_vfiprintf_r+0x78>
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b22:	e7a6      	b.n	8005a72 <_vfiprintf_r+0xfe>
 8005b24:	2300      	movs	r3, #0
 8005b26:	f04f 0c0a 	mov.w	ip, #10
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	3401      	adds	r4, #1
 8005b2e:	9305      	str	r3, [sp, #20]
 8005b30:	4620      	mov	r0, r4
 8005b32:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b36:	3a30      	subs	r2, #48	; 0x30
 8005b38:	2a09      	cmp	r2, #9
 8005b3a:	d903      	bls.n	8005b44 <_vfiprintf_r+0x1d0>
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0c6      	beq.n	8005ace <_vfiprintf_r+0x15a>
 8005b40:	9105      	str	r1, [sp, #20]
 8005b42:	e7c4      	b.n	8005ace <_vfiprintf_r+0x15a>
 8005b44:	4604      	mov	r4, r0
 8005b46:	2301      	movs	r3, #1
 8005b48:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b4c:	e7f0      	b.n	8005b30 <_vfiprintf_r+0x1bc>
 8005b4e:	ab03      	add	r3, sp, #12
 8005b50:	9300      	str	r3, [sp, #0]
 8005b52:	462a      	mov	r2, r5
 8005b54:	4630      	mov	r0, r6
 8005b56:	4b13      	ldr	r3, [pc, #76]	; (8005ba4 <_vfiprintf_r+0x230>)
 8005b58:	a904      	add	r1, sp, #16
 8005b5a:	f7fd fbc5 	bl	80032e8 <_printf_float>
 8005b5e:	4607      	mov	r7, r0
 8005b60:	1c78      	adds	r0, r7, #1
 8005b62:	d1d6      	bne.n	8005b12 <_vfiprintf_r+0x19e>
 8005b64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b66:	07d9      	lsls	r1, r3, #31
 8005b68:	d405      	bmi.n	8005b76 <_vfiprintf_r+0x202>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	059a      	lsls	r2, r3, #22
 8005b6e:	d402      	bmi.n	8005b76 <_vfiprintf_r+0x202>
 8005b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b72:	f7fe f90c 	bl	8003d8e <__retarget_lock_release_recursive>
 8005b76:	89ab      	ldrh	r3, [r5, #12]
 8005b78:	065b      	lsls	r3, r3, #25
 8005b7a:	f53f af1d 	bmi.w	80059b8 <_vfiprintf_r+0x44>
 8005b7e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005b80:	e71c      	b.n	80059bc <_vfiprintf_r+0x48>
 8005b82:	ab03      	add	r3, sp, #12
 8005b84:	9300      	str	r3, [sp, #0]
 8005b86:	462a      	mov	r2, r5
 8005b88:	4630      	mov	r0, r6
 8005b8a:	4b06      	ldr	r3, [pc, #24]	; (8005ba4 <_vfiprintf_r+0x230>)
 8005b8c:	a904      	add	r1, sp, #16
 8005b8e:	f7fd fe4b 	bl	8003828 <_printf_i>
 8005b92:	e7e4      	b.n	8005b5e <_vfiprintf_r+0x1ea>
 8005b94:	080060f4 	.word	0x080060f4
 8005b98:	080060fa 	.word	0x080060fa
 8005b9c:	080060fe 	.word	0x080060fe
 8005ba0:	080032e9 	.word	0x080032e9
 8005ba4:	08005951 	.word	0x08005951

08005ba8 <__swbuf_r>:
 8005ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005baa:	460e      	mov	r6, r1
 8005bac:	4614      	mov	r4, r2
 8005bae:	4605      	mov	r5, r0
 8005bb0:	b118      	cbz	r0, 8005bba <__swbuf_r+0x12>
 8005bb2:	6a03      	ldr	r3, [r0, #32]
 8005bb4:	b90b      	cbnz	r3, 8005bba <__swbuf_r+0x12>
 8005bb6:	f7fd ffd3 	bl	8003b60 <__sinit>
 8005bba:	69a3      	ldr	r3, [r4, #24]
 8005bbc:	60a3      	str	r3, [r4, #8]
 8005bbe:	89a3      	ldrh	r3, [r4, #12]
 8005bc0:	071a      	lsls	r2, r3, #28
 8005bc2:	d525      	bpl.n	8005c10 <__swbuf_r+0x68>
 8005bc4:	6923      	ldr	r3, [r4, #16]
 8005bc6:	b31b      	cbz	r3, 8005c10 <__swbuf_r+0x68>
 8005bc8:	6823      	ldr	r3, [r4, #0]
 8005bca:	6922      	ldr	r2, [r4, #16]
 8005bcc:	b2f6      	uxtb	r6, r6
 8005bce:	1a98      	subs	r0, r3, r2
 8005bd0:	6963      	ldr	r3, [r4, #20]
 8005bd2:	4637      	mov	r7, r6
 8005bd4:	4283      	cmp	r3, r0
 8005bd6:	dc04      	bgt.n	8005be2 <__swbuf_r+0x3a>
 8005bd8:	4621      	mov	r1, r4
 8005bda:	4628      	mov	r0, r5
 8005bdc:	f7ff fda2 	bl	8005724 <_fflush_r>
 8005be0:	b9e0      	cbnz	r0, 8005c1c <__swbuf_r+0x74>
 8005be2:	68a3      	ldr	r3, [r4, #8]
 8005be4:	3b01      	subs	r3, #1
 8005be6:	60a3      	str	r3, [r4, #8]
 8005be8:	6823      	ldr	r3, [r4, #0]
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	6022      	str	r2, [r4, #0]
 8005bee:	701e      	strb	r6, [r3, #0]
 8005bf0:	6962      	ldr	r2, [r4, #20]
 8005bf2:	1c43      	adds	r3, r0, #1
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d004      	beq.n	8005c02 <__swbuf_r+0x5a>
 8005bf8:	89a3      	ldrh	r3, [r4, #12]
 8005bfa:	07db      	lsls	r3, r3, #31
 8005bfc:	d506      	bpl.n	8005c0c <__swbuf_r+0x64>
 8005bfe:	2e0a      	cmp	r6, #10
 8005c00:	d104      	bne.n	8005c0c <__swbuf_r+0x64>
 8005c02:	4621      	mov	r1, r4
 8005c04:	4628      	mov	r0, r5
 8005c06:	f7ff fd8d 	bl	8005724 <_fflush_r>
 8005c0a:	b938      	cbnz	r0, 8005c1c <__swbuf_r+0x74>
 8005c0c:	4638      	mov	r0, r7
 8005c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005c10:	4621      	mov	r1, r4
 8005c12:	4628      	mov	r0, r5
 8005c14:	f000 f806 	bl	8005c24 <__swsetup_r>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d0d5      	beq.n	8005bc8 <__swbuf_r+0x20>
 8005c1c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c20:	e7f4      	b.n	8005c0c <__swbuf_r+0x64>
	...

08005c24 <__swsetup_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4b2a      	ldr	r3, [pc, #168]	; (8005cd0 <__swsetup_r+0xac>)
 8005c28:	4605      	mov	r5, r0
 8005c2a:	6818      	ldr	r0, [r3, #0]
 8005c2c:	460c      	mov	r4, r1
 8005c2e:	b118      	cbz	r0, 8005c38 <__swsetup_r+0x14>
 8005c30:	6a03      	ldr	r3, [r0, #32]
 8005c32:	b90b      	cbnz	r3, 8005c38 <__swsetup_r+0x14>
 8005c34:	f7fd ff94 	bl	8003b60 <__sinit>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c3e:	0718      	lsls	r0, r3, #28
 8005c40:	d422      	bmi.n	8005c88 <__swsetup_r+0x64>
 8005c42:	06d9      	lsls	r1, r3, #27
 8005c44:	d407      	bmi.n	8005c56 <__swsetup_r+0x32>
 8005c46:	2309      	movs	r3, #9
 8005c48:	602b      	str	r3, [r5, #0]
 8005c4a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c4e:	f04f 30ff 	mov.w	r0, #4294967295
 8005c52:	81a3      	strh	r3, [r4, #12]
 8005c54:	e034      	b.n	8005cc0 <__swsetup_r+0x9c>
 8005c56:	0758      	lsls	r0, r3, #29
 8005c58:	d512      	bpl.n	8005c80 <__swsetup_r+0x5c>
 8005c5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c5c:	b141      	cbz	r1, 8005c70 <__swsetup_r+0x4c>
 8005c5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c62:	4299      	cmp	r1, r3
 8005c64:	d002      	beq.n	8005c6c <__swsetup_r+0x48>
 8005c66:	4628      	mov	r0, r5
 8005c68:	f7fe ff0e 	bl	8004a88 <_free_r>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	6363      	str	r3, [r4, #52]	; 0x34
 8005c70:	89a3      	ldrh	r3, [r4, #12]
 8005c72:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c76:	81a3      	strh	r3, [r4, #12]
 8005c78:	2300      	movs	r3, #0
 8005c7a:	6063      	str	r3, [r4, #4]
 8005c7c:	6923      	ldr	r3, [r4, #16]
 8005c7e:	6023      	str	r3, [r4, #0]
 8005c80:	89a3      	ldrh	r3, [r4, #12]
 8005c82:	f043 0308 	orr.w	r3, r3, #8
 8005c86:	81a3      	strh	r3, [r4, #12]
 8005c88:	6923      	ldr	r3, [r4, #16]
 8005c8a:	b94b      	cbnz	r3, 8005ca0 <__swsetup_r+0x7c>
 8005c8c:	89a3      	ldrh	r3, [r4, #12]
 8005c8e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c96:	d003      	beq.n	8005ca0 <__swsetup_r+0x7c>
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 f883 	bl	8005da6 <__smakebuf_r>
 8005ca0:	89a0      	ldrh	r0, [r4, #12]
 8005ca2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ca6:	f010 0301 	ands.w	r3, r0, #1
 8005caa:	d00a      	beq.n	8005cc2 <__swsetup_r+0x9e>
 8005cac:	2300      	movs	r3, #0
 8005cae:	60a3      	str	r3, [r4, #8]
 8005cb0:	6963      	ldr	r3, [r4, #20]
 8005cb2:	425b      	negs	r3, r3
 8005cb4:	61a3      	str	r3, [r4, #24]
 8005cb6:	6923      	ldr	r3, [r4, #16]
 8005cb8:	b943      	cbnz	r3, 8005ccc <__swsetup_r+0xa8>
 8005cba:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cbe:	d1c4      	bne.n	8005c4a <__swsetup_r+0x26>
 8005cc0:	bd38      	pop	{r3, r4, r5, pc}
 8005cc2:	0781      	lsls	r1, r0, #30
 8005cc4:	bf58      	it	pl
 8005cc6:	6963      	ldrpl	r3, [r4, #20]
 8005cc8:	60a3      	str	r3, [r4, #8]
 8005cca:	e7f4      	b.n	8005cb6 <__swsetup_r+0x92>
 8005ccc:	2000      	movs	r0, #0
 8005cce:	e7f7      	b.n	8005cc0 <__swsetup_r+0x9c>
 8005cd0:	20000064 	.word	0x20000064

08005cd4 <_raise_r>:
 8005cd4:	291f      	cmp	r1, #31
 8005cd6:	b538      	push	{r3, r4, r5, lr}
 8005cd8:	4604      	mov	r4, r0
 8005cda:	460d      	mov	r5, r1
 8005cdc:	d904      	bls.n	8005ce8 <_raise_r+0x14>
 8005cde:	2316      	movs	r3, #22
 8005ce0:	6003      	str	r3, [r0, #0]
 8005ce2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
 8005ce8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8005cea:	b112      	cbz	r2, 8005cf2 <_raise_r+0x1e>
 8005cec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005cf0:	b94b      	cbnz	r3, 8005d06 <_raise_r+0x32>
 8005cf2:	4620      	mov	r0, r4
 8005cf4:	f000 f830 	bl	8005d58 <_getpid_r>
 8005cf8:	462a      	mov	r2, r5
 8005cfa:	4601      	mov	r1, r0
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005d02:	f000 b817 	b.w	8005d34 <_kill_r>
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d00a      	beq.n	8005d20 <_raise_r+0x4c>
 8005d0a:	1c59      	adds	r1, r3, #1
 8005d0c:	d103      	bne.n	8005d16 <_raise_r+0x42>
 8005d0e:	2316      	movs	r3, #22
 8005d10:	6003      	str	r3, [r0, #0]
 8005d12:	2001      	movs	r0, #1
 8005d14:	e7e7      	b.n	8005ce6 <_raise_r+0x12>
 8005d16:	2400      	movs	r4, #0
 8005d18:	4628      	mov	r0, r5
 8005d1a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8005d1e:	4798      	blx	r3
 8005d20:	2000      	movs	r0, #0
 8005d22:	e7e0      	b.n	8005ce6 <_raise_r+0x12>

08005d24 <raise>:
 8005d24:	4b02      	ldr	r3, [pc, #8]	; (8005d30 <raise+0xc>)
 8005d26:	4601      	mov	r1, r0
 8005d28:	6818      	ldr	r0, [r3, #0]
 8005d2a:	f7ff bfd3 	b.w	8005cd4 <_raise_r>
 8005d2e:	bf00      	nop
 8005d30:	20000064 	.word	0x20000064

08005d34 <_kill_r>:
 8005d34:	b538      	push	{r3, r4, r5, lr}
 8005d36:	2300      	movs	r3, #0
 8005d38:	4d06      	ldr	r5, [pc, #24]	; (8005d54 <_kill_r+0x20>)
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	4608      	mov	r0, r1
 8005d3e:	4611      	mov	r1, r2
 8005d40:	602b      	str	r3, [r5, #0]
 8005d42:	f7fb fabb 	bl	80012bc <_kill>
 8005d46:	1c43      	adds	r3, r0, #1
 8005d48:	d102      	bne.n	8005d50 <_kill_r+0x1c>
 8005d4a:	682b      	ldr	r3, [r5, #0]
 8005d4c:	b103      	cbz	r3, 8005d50 <_kill_r+0x1c>
 8005d4e:	6023      	str	r3, [r4, #0]
 8005d50:	bd38      	pop	{r3, r4, r5, pc}
 8005d52:	bf00      	nop
 8005d54:	200003e4 	.word	0x200003e4

08005d58 <_getpid_r>:
 8005d58:	f7fb baa9 	b.w	80012ae <_getpid>

08005d5c <__swhatbuf_r>:
 8005d5c:	b570      	push	{r4, r5, r6, lr}
 8005d5e:	460c      	mov	r4, r1
 8005d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d64:	4615      	mov	r5, r2
 8005d66:	2900      	cmp	r1, #0
 8005d68:	461e      	mov	r6, r3
 8005d6a:	b096      	sub	sp, #88	; 0x58
 8005d6c:	da0c      	bge.n	8005d88 <__swhatbuf_r+0x2c>
 8005d6e:	89a3      	ldrh	r3, [r4, #12]
 8005d70:	2100      	movs	r1, #0
 8005d72:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005d76:	bf0c      	ite	eq
 8005d78:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8005d7c:	2340      	movne	r3, #64	; 0x40
 8005d7e:	2000      	movs	r0, #0
 8005d80:	6031      	str	r1, [r6, #0]
 8005d82:	602b      	str	r3, [r5, #0]
 8005d84:	b016      	add	sp, #88	; 0x58
 8005d86:	bd70      	pop	{r4, r5, r6, pc}
 8005d88:	466a      	mov	r2, sp
 8005d8a:	f000 f849 	bl	8005e20 <_fstat_r>
 8005d8e:	2800      	cmp	r0, #0
 8005d90:	dbed      	blt.n	8005d6e <__swhatbuf_r+0x12>
 8005d92:	9901      	ldr	r1, [sp, #4]
 8005d94:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8005d98:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8005d9c:	4259      	negs	r1, r3
 8005d9e:	4159      	adcs	r1, r3
 8005da0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005da4:	e7eb      	b.n	8005d7e <__swhatbuf_r+0x22>

08005da6 <__smakebuf_r>:
 8005da6:	898b      	ldrh	r3, [r1, #12]
 8005da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005daa:	079d      	lsls	r5, r3, #30
 8005dac:	4606      	mov	r6, r0
 8005dae:	460c      	mov	r4, r1
 8005db0:	d507      	bpl.n	8005dc2 <__smakebuf_r+0x1c>
 8005db2:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	6123      	str	r3, [r4, #16]
 8005dba:	2301      	movs	r3, #1
 8005dbc:	6163      	str	r3, [r4, #20]
 8005dbe:	b002      	add	sp, #8
 8005dc0:	bd70      	pop	{r4, r5, r6, pc}
 8005dc2:	466a      	mov	r2, sp
 8005dc4:	ab01      	add	r3, sp, #4
 8005dc6:	f7ff ffc9 	bl	8005d5c <__swhatbuf_r>
 8005dca:	9900      	ldr	r1, [sp, #0]
 8005dcc:	4605      	mov	r5, r0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	f7fe feca 	bl	8004b68 <_malloc_r>
 8005dd4:	b948      	cbnz	r0, 8005dea <__smakebuf_r+0x44>
 8005dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dda:	059a      	lsls	r2, r3, #22
 8005ddc:	d4ef      	bmi.n	8005dbe <__smakebuf_r+0x18>
 8005dde:	f023 0303 	bic.w	r3, r3, #3
 8005de2:	f043 0302 	orr.w	r3, r3, #2
 8005de6:	81a3      	strh	r3, [r4, #12]
 8005de8:	e7e3      	b.n	8005db2 <__smakebuf_r+0xc>
 8005dea:	89a3      	ldrh	r3, [r4, #12]
 8005dec:	6020      	str	r0, [r4, #0]
 8005dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df2:	81a3      	strh	r3, [r4, #12]
 8005df4:	9b00      	ldr	r3, [sp, #0]
 8005df6:	6120      	str	r0, [r4, #16]
 8005df8:	6163      	str	r3, [r4, #20]
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	b15b      	cbz	r3, 8005e16 <__smakebuf_r+0x70>
 8005dfe:	4630      	mov	r0, r6
 8005e00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e04:	f000 f81e 	bl	8005e44 <_isatty_r>
 8005e08:	b128      	cbz	r0, 8005e16 <__smakebuf_r+0x70>
 8005e0a:	89a3      	ldrh	r3, [r4, #12]
 8005e0c:	f023 0303 	bic.w	r3, r3, #3
 8005e10:	f043 0301 	orr.w	r3, r3, #1
 8005e14:	81a3      	strh	r3, [r4, #12]
 8005e16:	89a3      	ldrh	r3, [r4, #12]
 8005e18:	431d      	orrs	r5, r3
 8005e1a:	81a5      	strh	r5, [r4, #12]
 8005e1c:	e7cf      	b.n	8005dbe <__smakebuf_r+0x18>
	...

08005e20 <_fstat_r>:
 8005e20:	b538      	push	{r3, r4, r5, lr}
 8005e22:	2300      	movs	r3, #0
 8005e24:	4d06      	ldr	r5, [pc, #24]	; (8005e40 <_fstat_r+0x20>)
 8005e26:	4604      	mov	r4, r0
 8005e28:	4608      	mov	r0, r1
 8005e2a:	4611      	mov	r1, r2
 8005e2c:	602b      	str	r3, [r5, #0]
 8005e2e:	f7fb faa3 	bl	8001378 <_fstat>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	d102      	bne.n	8005e3c <_fstat_r+0x1c>
 8005e36:	682b      	ldr	r3, [r5, #0]
 8005e38:	b103      	cbz	r3, 8005e3c <_fstat_r+0x1c>
 8005e3a:	6023      	str	r3, [r4, #0]
 8005e3c:	bd38      	pop	{r3, r4, r5, pc}
 8005e3e:	bf00      	nop
 8005e40:	200003e4 	.word	0x200003e4

08005e44 <_isatty_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	2300      	movs	r3, #0
 8005e48:	4d05      	ldr	r5, [pc, #20]	; (8005e60 <_isatty_r+0x1c>)
 8005e4a:	4604      	mov	r4, r0
 8005e4c:	4608      	mov	r0, r1
 8005e4e:	602b      	str	r3, [r5, #0]
 8005e50:	f7fb faa1 	bl	8001396 <_isatty>
 8005e54:	1c43      	adds	r3, r0, #1
 8005e56:	d102      	bne.n	8005e5e <_isatty_r+0x1a>
 8005e58:	682b      	ldr	r3, [r5, #0]
 8005e5a:	b103      	cbz	r3, 8005e5e <_isatty_r+0x1a>
 8005e5c:	6023      	str	r3, [r4, #0]
 8005e5e:	bd38      	pop	{r3, r4, r5, pc}
 8005e60:	200003e4 	.word	0x200003e4

08005e64 <_init>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	bf00      	nop
 8005e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e6a:	bc08      	pop	{r3}
 8005e6c:	469e      	mov	lr, r3
 8005e6e:	4770      	bx	lr

08005e70 <_fini>:
 8005e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e72:	bf00      	nop
 8005e74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e76:	bc08      	pop	{r3}
 8005e78:	469e      	mov	lr, r3
 8005e7a:	4770      	bx	lr
